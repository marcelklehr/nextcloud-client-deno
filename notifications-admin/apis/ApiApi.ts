/* tslint:disable */
/* eslint-disable */
/**
 * notifications-administration
 * This app provides a backend and frontend for the notification API available in Nextcloud.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  ApiGenerateNotification200Response,
  ApiGenerateNotification400Response,
} from '../models/index.ts';
import {
    ApiGenerateNotification200ResponseFromJSON,
    ApiGenerateNotification200ResponseToJSON,
    ApiGenerateNotification400ResponseFromJSON,
    ApiGenerateNotification400ResponseToJSON,
} from '../models/index.ts';

export interface ApiGenerateNotificationRequest {
    shortMessage: string;
    apiVersion: ApiGenerateNotificationApiVersionEnum;
    userId: string;
    oCSAPIRequest: boolean;
    longMessage?: string;
}

/**
 * 
 */
export class ApiApi extends runtime.BaseAPI {

    /**
     * This endpoint requires admin access
     * Generate a notification for a user
     */
    async apiGenerateNotificationRaw(requestParameters: ApiGenerateNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiGenerateNotification200Response>> {
        if (requestParameters['shortMessage'] == null) {
            throw new runtime.RequiredError(
                'shortMessage',
                'Required parameter "shortMessage" was null or undefined when calling apiGenerateNotification().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling apiGenerateNotification().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling apiGenerateNotification().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling apiGenerateNotification().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['shortMessage'] != null) {
            queryParameters['shortMessage'] = requestParameters['shortMessage'];
        }

        if (requestParameters['longMessage'] != null) {
            queryParameters['longMessage'] = requestParameters['longMessage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/notifications/api/{apiVersion}/admin_notifications/{userId}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiGenerateNotification200ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint requires admin access
     * Generate a notification for a user
     */
    async apiGenerateNotification(requestParameters: ApiGenerateNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiGenerateNotification200Response> {
        const response = await this.apiGenerateNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ApiGenerateNotificationApiVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type ApiGenerateNotificationApiVersionEnum = typeof ApiGenerateNotificationApiVersionEnum[keyof typeof ApiGenerateNotificationApiVersionEnum];
