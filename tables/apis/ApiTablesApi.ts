/* tslint:disable */
/* eslint-disable */
/**
 * tables
 * Manage data the way you need it.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  ApiGeneralList500Response,
  ApiTablesCreate200Response,
  ApiTablesList200Response,
} from '../models/index.ts';
import {
    ApiGeneralList500ResponseFromJSON,
    ApiGeneralList500ResponseToJSON,
    ApiTablesCreate200ResponseFromJSON,
    ApiTablesCreate200ResponseToJSON,
    ApiTablesList200ResponseFromJSON,
    ApiTablesList200ResponseToJSON,
} from '../models/index.ts';

export interface ApiTablesCreateRequest {
    title: string;
    oCSAPIRequest: boolean;
    emoji?: string;
    description?: string;
    template?: string;
}

export interface ApiTablesDestroyRequest {
    id: number;
    oCSAPIRequest: boolean;
}

export interface ApiTablesListRequest {
    oCSAPIRequest: boolean;
}

export interface ApiTablesShowRequest {
    id: number;
    oCSAPIRequest: boolean;
}

export interface ApiTablesTransferRequest {
    newOwnerUserId: string;
    id: number;
    oCSAPIRequest: boolean;
}

export interface ApiTablesUpdateRequest {
    id: number;
    oCSAPIRequest: boolean;
    title?: string;
    emoji?: string;
    description?: string;
    archived?: ApiTablesUpdateArchivedEnum;
}

/**
 * 
 */
export class ApiTablesApi extends runtime.BaseAPI {

    /**
     * [api v2] Create a new table and return it
     */
    async apiTablesCreateRaw(requestParameters: ApiTablesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiTablesCreate200Response>> {
        if (requestParameters['title'] == null) {
            throw new runtime.RequiredError(
                'title',
                'Required parameter "title" was null or undefined when calling apiTablesCreate().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling apiTablesCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['emoji'] != null) {
            queryParameters['emoji'] = requestParameters['emoji'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['template'] != null) {
            queryParameters['template'] = requestParameters['template'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/tables/api/2/tables`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiTablesCreate200ResponseFromJSON(jsonValue));
    }

    /**
     * [api v2] Create a new table and return it
     */
    async apiTablesCreate(requestParameters: ApiTablesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiTablesCreate200Response> {
        const response = await this.apiTablesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * [api v2] Delete a table
     */
    async apiTablesDestroyRaw(requestParameters: ApiTablesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiTablesCreate200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiTablesDestroy().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling apiTablesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/tables/api/2/tables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiTablesCreate200ResponseFromJSON(jsonValue));
    }

    /**
     * [api v2] Delete a table
     */
    async apiTablesDestroy(requestParameters: ApiTablesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiTablesCreate200Response> {
        const response = await this.apiTablesDestroyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * [api v2] Returns all Tables
     */
    async apiTablesListRaw(requestParameters: ApiTablesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiTablesList200Response>> {
        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling apiTablesList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/tables/api/2/tables`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiTablesList200ResponseFromJSON(jsonValue));
    }

    /**
     * [api v2] Returns all Tables
     */
    async apiTablesList(requestParameters: ApiTablesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiTablesList200Response> {
        const response = await this.apiTablesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * [api v2] Get a table object
     */
    async apiTablesShowRaw(requestParameters: ApiTablesShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiTablesCreate200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiTablesShow().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling apiTablesShow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/tables/api/2/tables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiTablesCreate200ResponseFromJSON(jsonValue));
    }

    /**
     * [api v2] Get a table object
     */
    async apiTablesShow(requestParameters: ApiTablesShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiTablesCreate200Response> {
        const response = await this.apiTablesShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Transfer table from one user to another
     * [api v2] Transfer table
     */
    async apiTablesTransferRaw(requestParameters: ApiTablesTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiTablesCreate200Response>> {
        if (requestParameters['newOwnerUserId'] == null) {
            throw new runtime.RequiredError(
                'newOwnerUserId',
                'Required parameter "newOwnerUserId" was null or undefined when calling apiTablesTransfer().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiTablesTransfer().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling apiTablesTransfer().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['newOwnerUserId'] != null) {
            queryParameters['newOwnerUserId'] = requestParameters['newOwnerUserId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/tables/api/2/tables/{id}/transfer`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiTablesCreate200ResponseFromJSON(jsonValue));
    }

    /**
     * Transfer table from one user to another
     * [api v2] Transfer table
     */
    async apiTablesTransfer(requestParameters: ApiTablesTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiTablesCreate200Response> {
        const response = await this.apiTablesTransferRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * [api v2] Update tables properties
     */
    async apiTablesUpdateRaw(requestParameters: ApiTablesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiTablesCreate200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiTablesUpdate().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling apiTablesUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['emoji'] != null) {
            queryParameters['emoji'] = requestParameters['emoji'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['archived'] != null) {
            queryParameters['archived'] = requestParameters['archived'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/tables/api/2/tables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiTablesCreate200ResponseFromJSON(jsonValue));
    }

    /**
     * [api v2] Update tables properties
     */
    async apiTablesUpdate(requestParameters: ApiTablesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiTablesCreate200Response> {
        const response = await this.apiTablesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ApiTablesUpdateArchivedEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type ApiTablesUpdateArchivedEnum = typeof ApiTablesUpdateArchivedEnum[keyof typeof ApiTablesUpdateArchivedEnum];
