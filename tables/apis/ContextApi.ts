/* tslint:disable */
/* eslint-disable */
/**
 * tables
 * Manage data the way you need it.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  ApiGeneralList500Response,
  ContextCreate200Response,
  ContextCreateNodesParameter,
  ContextList200Response,
} from '../models/index.ts';
import {
    ApiGeneralList500ResponseFromJSON,
    ApiGeneralList500ResponseToJSON,
    ContextCreate200ResponseFromJSON,
    ContextCreate200ResponseToJSON,
    ContextCreateNodesParameterFromJSON,
    ContextCreateNodesParameterToJSON,
    ContextList200ResponseFromJSON,
    ContextList200ResponseToJSON,
} from '../models/index.ts';

export interface ContextAddNodeRequest {
    nodeId: number;
    nodeType: number;
    permissions: number;
    contextId: number;
    oCSAPIRequest: boolean;
    order?: number;
}

export interface ContextCreateRequest {
    name: string;
    iconName: string;
    oCSAPIRequest: boolean;
    description?: string;
    nodes?: ContextCreateNodesParameter;
}

export interface ContextDestroyRequest {
    contextId: number;
    oCSAPIRequest: boolean;
}

export interface ContextListRequest {
    oCSAPIRequest: boolean;
}

export interface ContextRemoveNodeRequest {
    contextId: number;
    nodeRelId: number;
    oCSAPIRequest: boolean;
}

export interface ContextShowRequest {
    contextId: number;
    oCSAPIRequest: boolean;
}

export interface ContextTransferRequest {
    newOwnerId: string;
    contextId: number;
    oCSAPIRequest: boolean;
    newOwnerType?: number;
}

export interface ContextUpdateRequest {
    contextId: number;
    oCSAPIRequest: boolean;
    name?: string;
    iconName?: string;
    description?: string;
    nodes?: string;
}

export interface ContextUpdateContentOrderRequest {
    content: string;
    contextId: number;
    pageId: number;
    oCSAPIRequest: boolean;
}

/**
 * 
 */
export class ContextApi extends runtime.BaseAPI {

    /**
     * [api v2] Add a node to a Context
     */
    async contextAddNodeRaw(requestParameters: ContextAddNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextCreate200Response>> {
        if (requestParameters['nodeId'] == null) {
            throw new runtime.RequiredError(
                'nodeId',
                'Required parameter "nodeId" was null or undefined when calling contextAddNode().'
            );
        }

        if (requestParameters['nodeType'] == null) {
            throw new runtime.RequiredError(
                'nodeType',
                'Required parameter "nodeType" was null or undefined when calling contextAddNode().'
            );
        }

        if (requestParameters['permissions'] == null) {
            throw new runtime.RequiredError(
                'permissions',
                'Required parameter "permissions" was null or undefined when calling contextAddNode().'
            );
        }

        if (requestParameters['contextId'] == null) {
            throw new runtime.RequiredError(
                'contextId',
                'Required parameter "contextId" was null or undefined when calling contextAddNode().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling contextAddNode().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['nodeId'] != null) {
            queryParameters['nodeId'] = requestParameters['nodeId'];
        }

        if (requestParameters['nodeType'] != null) {
            queryParameters['nodeType'] = requestParameters['nodeType'];
        }

        if (requestParameters['permissions'] != null) {
            queryParameters['permissions'] = requestParameters['permissions'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/tables/api/2/contexts/{contextId}/nodes`.replace(`{${"contextId"}}`, encodeURIComponent(String(requestParameters['contextId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextCreate200ResponseFromJSON(jsonValue));
    }

    /**
     * [api v2] Add a node to a Context
     */
    async contextAddNode(requestParameters: ContextAddNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextCreate200Response> {
        const response = await this.contextAddNodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * [api v2] Create a new context and return it
     */
    async contextCreateRaw(requestParameters: ContextCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextCreate200Response>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling contextCreate().'
            );
        }

        if (requestParameters['iconName'] == null) {
            throw new runtime.RequiredError(
                'iconName',
                'Required parameter "iconName" was null or undefined when calling contextCreate().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling contextCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['iconName'] != null) {
            queryParameters['iconName'] = requestParameters['iconName'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['nodes'] != null) {
            queryParameters['nodes'] = requestParameters['nodes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/tables/api/2/contexts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextCreate200ResponseFromJSON(jsonValue));
    }

    /**
     * [api v2] Create a new context and return it
     */
    async contextCreate(requestParameters: ContextCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextCreate200Response> {
        const response = await this.contextCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * [api v2] Delete an existing context and return it
     */
    async contextDestroyRaw(requestParameters: ContextDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextCreate200Response>> {
        if (requestParameters['contextId'] == null) {
            throw new runtime.RequiredError(
                'contextId',
                'Required parameter "contextId" was null or undefined when calling contextDestroy().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling contextDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/tables/api/2/contexts/{contextId}`.replace(`{${"contextId"}}`, encodeURIComponent(String(requestParameters['contextId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextCreate200ResponseFromJSON(jsonValue));
    }

    /**
     * [api v2] Delete an existing context and return it
     */
    async contextDestroy(requestParameters: ContextDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextCreate200Response> {
        const response = await this.contextDestroyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return an empty array if no contexts were found
     * [api v3] Get all contexts available to the requesting person
     */
    async contextListRaw(requestParameters: ContextListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextList200Response>> {
        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling contextList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/tables/api/2/contexts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextList200ResponseFromJSON(jsonValue));
    }

    /**
     * Return an empty array if no contexts were found
     * [api v3] Get all contexts available to the requesting person
     */
    async contextList(requestParameters: ContextListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextList200Response> {
        const response = await this.contextListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * [api v2] Remove a node from a Context
     */
    async contextRemoveNodeRaw(requestParameters: ContextRemoveNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextCreate200Response>> {
        if (requestParameters['contextId'] == null) {
            throw new runtime.RequiredError(
                'contextId',
                'Required parameter "contextId" was null or undefined when calling contextRemoveNode().'
            );
        }

        if (requestParameters['nodeRelId'] == null) {
            throw new runtime.RequiredError(
                'nodeRelId',
                'Required parameter "nodeRelId" was null or undefined when calling contextRemoveNode().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling contextRemoveNode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/tables/api/2/contexts/{contextId}/nodes/{nodeRelId}`.replace(`{${"contextId"}}`, encodeURIComponent(String(requestParameters['contextId']))).replace(`{${"nodeRelId"}}`, encodeURIComponent(String(requestParameters['nodeRelId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextCreate200ResponseFromJSON(jsonValue));
    }

    /**
     * [api v2] Remove a node from a Context
     */
    async contextRemoveNode(requestParameters: ContextRemoveNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextCreate200Response> {
        const response = await this.contextRemoveNodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * [api v2] Get information about the requests context
     */
    async contextShowRaw(requestParameters: ContextShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextCreate200Response>> {
        if (requestParameters['contextId'] == null) {
            throw new runtime.RequiredError(
                'contextId',
                'Required parameter "contextId" was null or undefined when calling contextShow().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling contextShow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/tables/api/2/contexts/{contextId}`.replace(`{${"contextId"}}`, encodeURIComponent(String(requestParameters['contextId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextCreate200ResponseFromJSON(jsonValue));
    }

    /**
     * [api v2] Get information about the requests context
     */
    async contextShow(requestParameters: ContextShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextCreate200Response> {
        const response = await this.contextShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * [api v2] Transfer the ownership of a context and return it
     */
    async contextTransferRaw(requestParameters: ContextTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextCreate200Response>> {
        if (requestParameters['newOwnerId'] == null) {
            throw new runtime.RequiredError(
                'newOwnerId',
                'Required parameter "newOwnerId" was null or undefined when calling contextTransfer().'
            );
        }

        if (requestParameters['contextId'] == null) {
            throw new runtime.RequiredError(
                'contextId',
                'Required parameter "contextId" was null or undefined when calling contextTransfer().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling contextTransfer().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['newOwnerId'] != null) {
            queryParameters['newOwnerId'] = requestParameters['newOwnerId'];
        }

        if (requestParameters['newOwnerType'] != null) {
            queryParameters['newOwnerType'] = requestParameters['newOwnerType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/tables/api/2/contexts/{contextId}/transfer`.replace(`{${"contextId"}}`, encodeURIComponent(String(requestParameters['contextId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextCreate200ResponseFromJSON(jsonValue));
    }

    /**
     * [api v2] Transfer the ownership of a context and return it
     */
    async contextTransfer(requestParameters: ContextTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextCreate200Response> {
        const response = await this.contextTransferRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * [api v2] Update an existing context and return it
     */
    async contextUpdateRaw(requestParameters: ContextUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextCreate200Response>> {
        if (requestParameters['contextId'] == null) {
            throw new runtime.RequiredError(
                'contextId',
                'Required parameter "contextId" was null or undefined when calling contextUpdate().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling contextUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['iconName'] != null) {
            queryParameters['iconName'] = requestParameters['iconName'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['nodes'] != null) {
            queryParameters['nodes'] = requestParameters['nodes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/tables/api/2/contexts/{contextId}`.replace(`{${"contextId"}}`, encodeURIComponent(String(requestParameters['contextId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextCreate200ResponseFromJSON(jsonValue));
    }

    /**
     * [api v2] Update an existing context and return it
     */
    async contextUpdate(requestParameters: ContextUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextCreate200Response> {
        const response = await this.contextUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * [api v2] Update the order on a page of a context
     */
    async contextUpdateContentOrderRaw(requestParameters: ContextUpdateContentOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextCreate200Response>> {
        if (requestParameters['content'] == null) {
            throw new runtime.RequiredError(
                'content',
                'Required parameter "content" was null or undefined when calling contextUpdateContentOrder().'
            );
        }

        if (requestParameters['contextId'] == null) {
            throw new runtime.RequiredError(
                'contextId',
                'Required parameter "contextId" was null or undefined when calling contextUpdateContentOrder().'
            );
        }

        if (requestParameters['pageId'] == null) {
            throw new runtime.RequiredError(
                'pageId',
                'Required parameter "pageId" was null or undefined when calling contextUpdateContentOrder().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling contextUpdateContentOrder().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['content'] != null) {
            queryParameters['content'] = requestParameters['content'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/tables/api/2/contexts/{contextId}/pages/{pageId}`.replace(`{${"contextId"}}`, encodeURIComponent(String(requestParameters['contextId']))).replace(`{${"pageId"}}`, encodeURIComponent(String(requestParameters['pageId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextCreate200ResponseFromJSON(jsonValue));
    }

    /**
     * [api v2] Update the order on a page of a context
     */
    async contextUpdateContentOrder(requestParameters: ContextUpdateContentOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextCreate200Response> {
        const response = await this.contextUpdateContentOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
