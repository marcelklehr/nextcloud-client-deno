/* tslint:disable */
/* eslint-disable */
/**
 * tables
 * Manage data the way you need it.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  Api1CreateRowInTableDataParameter,
  Api1List500Response,
  Api1UpdateViewDataParameter,
  Column,
  ContextNavigation,
  ImportState,
  Row,
  Share,
  Table,
  View,
} from '../models/index.ts';
import {
    Api1CreateRowInTableDataParameterFromJSON,
    Api1CreateRowInTableDataParameterToJSON,
    Api1List500ResponseFromJSON,
    Api1List500ResponseToJSON,
    Api1UpdateViewDataParameterFromJSON,
    Api1UpdateViewDataParameterToJSON,
    ColumnFromJSON,
    ColumnToJSON,
    ContextNavigationFromJSON,
    ContextNavigationToJSON,
    ImportStateFromJSON,
    ImportStateToJSON,
    RowFromJSON,
    RowToJSON,
    ShareFromJSON,
    ShareToJSON,
    TableFromJSON,
    TableToJSON,
    ViewFromJSON,
    ViewToJSON,
} from '../models/index.ts';

export interface Api1CreateColumnRequest {
    title: string;
    type: Api1CreateColumnTypeEnum;
    mandatory: Api1CreateColumnMandatoryEnum;
    tableId?: number;
    viewId?: number;
    subtype?: string;
    description?: string;
    numberPrefix?: string;
    numberSuffix?: string;
    numberDefault?: number;
    numberMin?: number;
    numberMax?: number;
    numberDecimals?: number;
    textDefault?: string;
    textAllowedPattern?: string;
    textMaxLength?: number;
    selectionOptions?: string;
    selectionDefault?: string;
    datetimeDefault?: string;
    selectedViewIds?: Array<number>;
}

export interface Api1CreateRowInTableRequest {
    data: Api1CreateRowInTableDataParameter;
    tableId: number;
}

export interface Api1CreateRowInViewRequest {
    data: Api1CreateRowInTableDataParameter;
    viewId: number;
}

export interface Api1CreateShareRequest {
    nodeId: number;
    nodeType: Api1CreateShareNodeTypeEnum;
    receiver: string;
    receiverType: Api1CreateShareReceiverTypeEnum;
    permissionRead?: Api1CreateSharePermissionReadEnum;
    permissionCreate?: Api1CreateSharePermissionCreateEnum;
    permissionUpdate?: Api1CreateSharePermissionUpdateEnum;
    permissionDelete?: Api1CreateSharePermissionDeleteEnum;
    permissionManage?: Api1CreateSharePermissionManageEnum;
    displayMode?: number;
}

export interface Api1CreateTableRequest {
    title: string;
    emoji?: string;
    template?: string;
}

export interface Api1CreateTableColumnRequest {
    title: string;
    type: Api1CreateTableColumnTypeEnum;
    mandatory: Api1CreateTableColumnMandatoryEnum;
    tableId: number;
    subtype?: string;
    description?: string;
    numberPrefix?: string;
    numberSuffix?: string;
    numberDefault?: number;
    numberMin?: number;
    numberMax?: number;
    numberDecimals?: number;
    textDefault?: string;
    textAllowedPattern?: string;
    textMaxLength?: number;
    selectionOptions?: string;
    selectionDefault?: string;
    datetimeDefault?: string;
    selectedViewIds?: Array<number>;
}

export interface Api1CreateTableShareRequest {
    receiver: string;
    receiverType: Api1CreateTableShareReceiverTypeEnum;
    permissionRead: Api1CreateTableSharePermissionReadEnum;
    permissionCreate: Api1CreateTableSharePermissionCreateEnum;
    permissionUpdate: Api1CreateTableSharePermissionUpdateEnum;
    permissionDelete: Api1CreateTableSharePermissionDeleteEnum;
    permissionManage: Api1CreateTableSharePermissionManageEnum;
    tableId: number;
}

export interface Api1CreateViewRequest {
    title: string;
    tableId: number;
    emoji?: string;
}

export interface Api1DeleteColumnRequest {
    columnId: number;
}

export interface Api1DeleteRowRequest {
    rowId: number;
}

export interface Api1DeleteRowByViewRequest {
    viewId: number;
    rowId: number;
}

export interface Api1DeleteShareRequest {
    shareId: number;
}

export interface Api1DeleteTableRequest {
    tableId: number;
}

export interface Api1DeleteViewRequest {
    viewId: number;
}

export interface Api1GetColumnRequest {
    columnId: number;
}

export interface Api1GetRowRequest {
    rowId: number;
}

export interface Api1GetShareRequest {
    shareId: number;
}

export interface Api1GetTableRequest {
    tableId: number;
}

export interface Api1GetViewRequest {
    viewId: number;
}

export interface Api1ImportInTableRequest {
    path: string;
    tableId: number;
    createMissingColumns?: Api1ImportInTableCreateMissingColumnsEnum;
}

export interface Api1ImportInViewRequest {
    path: string;
    viewId: number;
    createMissingColumns?: Api1ImportInViewCreateMissingColumnsEnum;
}

export interface Api1ListTableColumnsRequest {
    tableId: number;
    viewId?: number;
}

export interface Api1ListTableRowsRequest {
    tableId: number;
    limit?: number;
    offset?: number;
}

export interface Api1ListTableRowsSimpleRequest {
    tableId: number;
    limit?: number;
    offset?: number;
}

export interface Api1ListTableSharesRequest {
    tableId: number;
}

export interface Api1ListViewColumnsRequest {
    viewId: number;
}

export interface Api1ListViewRowsRequest {
    viewId: number;
    limit?: number;
    offset?: number;
}

export interface Api1ListViewSharesRequest {
    viewId: number;
}

export interface Api1ListViewsRequest {
    tableId: number;
}

export interface Api1UpdateColumnRequest {
    mandatory: Api1UpdateColumnMandatoryEnum;
    columnId: number;
    title?: string;
    subtype?: string;
    description?: string;
    numberPrefix?: string;
    numberSuffix?: string;
    numberDefault?: number;
    numberMin?: number;
    numberMax?: number;
    numberDecimals?: number;
    textDefault?: string;
    textAllowedPattern?: string;
    textMaxLength?: number;
    selectionOptions?: string;
    selectionDefault?: string;
    datetimeDefault?: string;
}

export interface Api1UpdateRowRequest {
    data: Api1CreateRowInTableDataParameter;
    rowId: number;
    viewId?: number;
}

export interface Api1UpdateShareDisplayModeRequest {
    displayMode: number;
    shareId: number;
    target?: Api1UpdateShareDisplayModeTargetEnum;
}

export interface Api1UpdateSharePermissionsRequest {
    permissionType: string;
    permissionValue: Api1UpdateSharePermissionsPermissionValueEnum;
    shareId: number;
}

export interface Api1UpdateTableRequest {
    tableId: number;
    title?: string;
    emoji?: string;
    archived?: Api1UpdateTableArchivedEnum;
}

export interface Api1UpdateViewRequest {
    data: Api1UpdateViewDataParameter;
    viewId: number;
}

/**
 * 
 */
export class Api1Api extends runtime.BaseAPI {

    /**
     * Create a column
     */
    async api1CreateColumnRaw(requestParameters: Api1CreateColumnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Column>> {
        if (requestParameters['title'] == null) {
            throw new runtime.RequiredError(
                'title',
                'Required parameter "title" was null or undefined when calling api1CreateColumn().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling api1CreateColumn().'
            );
        }

        if (requestParameters['mandatory'] == null) {
            throw new runtime.RequiredError(
                'mandatory',
                'Required parameter "mandatory" was null or undefined when calling api1CreateColumn().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tableId'] != null) {
            queryParameters['tableId'] = requestParameters['tableId'];
        }

        if (requestParameters['viewId'] != null) {
            queryParameters['viewId'] = requestParameters['viewId'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['subtype'] != null) {
            queryParameters['subtype'] = requestParameters['subtype'];
        }

        if (requestParameters['mandatory'] != null) {
            queryParameters['mandatory'] = requestParameters['mandatory'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['numberPrefix'] != null) {
            queryParameters['numberPrefix'] = requestParameters['numberPrefix'];
        }

        if (requestParameters['numberSuffix'] != null) {
            queryParameters['numberSuffix'] = requestParameters['numberSuffix'];
        }

        if (requestParameters['numberDefault'] != null) {
            queryParameters['numberDefault'] = requestParameters['numberDefault'];
        }

        if (requestParameters['numberMin'] != null) {
            queryParameters['numberMin'] = requestParameters['numberMin'];
        }

        if (requestParameters['numberMax'] != null) {
            queryParameters['numberMax'] = requestParameters['numberMax'];
        }

        if (requestParameters['numberDecimals'] != null) {
            queryParameters['numberDecimals'] = requestParameters['numberDecimals'];
        }

        if (requestParameters['textDefault'] != null) {
            queryParameters['textDefault'] = requestParameters['textDefault'];
        }

        if (requestParameters['textAllowedPattern'] != null) {
            queryParameters['textAllowedPattern'] = requestParameters['textAllowedPattern'];
        }

        if (requestParameters['textMaxLength'] != null) {
            queryParameters['textMaxLength'] = requestParameters['textMaxLength'];
        }

        if (requestParameters['selectionOptions'] != null) {
            queryParameters['selectionOptions'] = requestParameters['selectionOptions'];
        }

        if (requestParameters['selectionDefault'] != null) {
            queryParameters['selectionDefault'] = requestParameters['selectionDefault'];
        }

        if (requestParameters['datetimeDefault'] != null) {
            queryParameters['datetimeDefault'] = requestParameters['datetimeDefault'];
        }

        if (requestParameters['selectedViewIds'] != null) {
            queryParameters['selectedViewIds[]'] = requestParameters['selectedViewIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/columns`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ColumnFromJSON(jsonValue));
    }

    /**
     * Create a column
     */
    async api1CreateColumn(requestParameters: Api1CreateColumnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Column> {
        const response = await this.api1CreateColumnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a row within a table
     */
    async api1CreateRowInTableRaw(requestParameters: Api1CreateRowInTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Row>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling api1CreateRowInTable().'
            );
        }

        if (requestParameters['tableId'] == null) {
            throw new runtime.RequiredError(
                'tableId',
                'Required parameter "tableId" was null or undefined when calling api1CreateRowInTable().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['data'] != null) {
            queryParameters['data'] = requestParameters['data'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/tables/{tableId}/rows`.replace(`{${"tableId"}}`, encodeURIComponent(String(requestParameters['tableId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RowFromJSON(jsonValue));
    }

    /**
     * Create a row within a table
     */
    async api1CreateRowInTable(requestParameters: Api1CreateRowInTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Row> {
        const response = await this.api1CreateRowInTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a row within a view
     */
    async api1CreateRowInViewRaw(requestParameters: Api1CreateRowInViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Row>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling api1CreateRowInView().'
            );
        }

        if (requestParameters['viewId'] == null) {
            throw new runtime.RequiredError(
                'viewId',
                'Required parameter "viewId" was null or undefined when calling api1CreateRowInView().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['data'] != null) {
            queryParameters['data'] = requestParameters['data'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/views/{viewId}/rows`.replace(`{${"viewId"}}`, encodeURIComponent(String(requestParameters['viewId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RowFromJSON(jsonValue));
    }

    /**
     * Create a row within a view
     */
    async api1CreateRowInView(requestParameters: Api1CreateRowInViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Row> {
        const response = await this.api1CreateRowInViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new share
     */
    async api1CreateShareRaw(requestParameters: Api1CreateShareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Share>> {
        if (requestParameters['nodeId'] == null) {
            throw new runtime.RequiredError(
                'nodeId',
                'Required parameter "nodeId" was null or undefined when calling api1CreateShare().'
            );
        }

        if (requestParameters['nodeType'] == null) {
            throw new runtime.RequiredError(
                'nodeType',
                'Required parameter "nodeType" was null or undefined when calling api1CreateShare().'
            );
        }

        if (requestParameters['receiver'] == null) {
            throw new runtime.RequiredError(
                'receiver',
                'Required parameter "receiver" was null or undefined when calling api1CreateShare().'
            );
        }

        if (requestParameters['receiverType'] == null) {
            throw new runtime.RequiredError(
                'receiverType',
                'Required parameter "receiverType" was null or undefined when calling api1CreateShare().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['nodeId'] != null) {
            queryParameters['nodeId'] = requestParameters['nodeId'];
        }

        if (requestParameters['nodeType'] != null) {
            queryParameters['nodeType'] = requestParameters['nodeType'];
        }

        if (requestParameters['receiver'] != null) {
            queryParameters['receiver'] = requestParameters['receiver'];
        }

        if (requestParameters['receiverType'] != null) {
            queryParameters['receiverType'] = requestParameters['receiverType'];
        }

        if (requestParameters['permissionRead'] != null) {
            queryParameters['permissionRead'] = requestParameters['permissionRead'];
        }

        if (requestParameters['permissionCreate'] != null) {
            queryParameters['permissionCreate'] = requestParameters['permissionCreate'];
        }

        if (requestParameters['permissionUpdate'] != null) {
            queryParameters['permissionUpdate'] = requestParameters['permissionUpdate'];
        }

        if (requestParameters['permissionDelete'] != null) {
            queryParameters['permissionDelete'] = requestParameters['permissionDelete'];
        }

        if (requestParameters['permissionManage'] != null) {
            queryParameters['permissionManage'] = requestParameters['permissionManage'];
        }

        if (requestParameters['displayMode'] != null) {
            queryParameters['displayMode'] = requestParameters['displayMode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/shares`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareFromJSON(jsonValue));
    }

    /**
     * Create a new share
     */
    async api1CreateShare(requestParameters: Api1CreateShareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Share> {
        const response = await this.api1CreateShareRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new table and return it
     */
    async api1CreateTableRaw(requestParameters: Api1CreateTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Table>> {
        if (requestParameters['title'] == null) {
            throw new runtime.RequiredError(
                'title',
                'Required parameter "title" was null or undefined when calling api1CreateTable().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['emoji'] != null) {
            queryParameters['emoji'] = requestParameters['emoji'];
        }

        if (requestParameters['template'] != null) {
            queryParameters['template'] = requestParameters['template'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/tables`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TableFromJSON(jsonValue));
    }

    /**
     * Create a new table and return it
     */
    async api1CreateTable(requestParameters: Api1CreateTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Table> {
        const response = await this.api1CreateTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new column for a table
     */
    async api1CreateTableColumnRaw(requestParameters: Api1CreateTableColumnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Column>> {
        if (requestParameters['title'] == null) {
            throw new runtime.RequiredError(
                'title',
                'Required parameter "title" was null or undefined when calling api1CreateTableColumn().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling api1CreateTableColumn().'
            );
        }

        if (requestParameters['mandatory'] == null) {
            throw new runtime.RequiredError(
                'mandatory',
                'Required parameter "mandatory" was null or undefined when calling api1CreateTableColumn().'
            );
        }

        if (requestParameters['tableId'] == null) {
            throw new runtime.RequiredError(
                'tableId',
                'Required parameter "tableId" was null or undefined when calling api1CreateTableColumn().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['subtype'] != null) {
            queryParameters['subtype'] = requestParameters['subtype'];
        }

        if (requestParameters['mandatory'] != null) {
            queryParameters['mandatory'] = requestParameters['mandatory'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['numberPrefix'] != null) {
            queryParameters['numberPrefix'] = requestParameters['numberPrefix'];
        }

        if (requestParameters['numberSuffix'] != null) {
            queryParameters['numberSuffix'] = requestParameters['numberSuffix'];
        }

        if (requestParameters['numberDefault'] != null) {
            queryParameters['numberDefault'] = requestParameters['numberDefault'];
        }

        if (requestParameters['numberMin'] != null) {
            queryParameters['numberMin'] = requestParameters['numberMin'];
        }

        if (requestParameters['numberMax'] != null) {
            queryParameters['numberMax'] = requestParameters['numberMax'];
        }

        if (requestParameters['numberDecimals'] != null) {
            queryParameters['numberDecimals'] = requestParameters['numberDecimals'];
        }

        if (requestParameters['textDefault'] != null) {
            queryParameters['textDefault'] = requestParameters['textDefault'];
        }

        if (requestParameters['textAllowedPattern'] != null) {
            queryParameters['textAllowedPattern'] = requestParameters['textAllowedPattern'];
        }

        if (requestParameters['textMaxLength'] != null) {
            queryParameters['textMaxLength'] = requestParameters['textMaxLength'];
        }

        if (requestParameters['selectionOptions'] != null) {
            queryParameters['selectionOptions'] = requestParameters['selectionOptions'];
        }

        if (requestParameters['selectionDefault'] != null) {
            queryParameters['selectionDefault'] = requestParameters['selectionDefault'];
        }

        if (requestParameters['datetimeDefault'] != null) {
            queryParameters['datetimeDefault'] = requestParameters['datetimeDefault'];
        }

        if (requestParameters['selectedViewIds'] != null) {
            queryParameters['selectedViewIds[]'] = requestParameters['selectedViewIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/tables/{tableId}/columns`.replace(`{${"tableId"}}`, encodeURIComponent(String(requestParameters['tableId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ColumnFromJSON(jsonValue));
    }

    /**
     * Create a new column for a table
     */
    async api1CreateTableColumn(requestParameters: Api1CreateTableColumnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Column> {
        const response = await this.api1CreateTableColumnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a share for a table
     */
    async api1CreateTableShareRaw(requestParameters: Api1CreateTableShareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Share>> {
        if (requestParameters['receiver'] == null) {
            throw new runtime.RequiredError(
                'receiver',
                'Required parameter "receiver" was null or undefined when calling api1CreateTableShare().'
            );
        }

        if (requestParameters['receiverType'] == null) {
            throw new runtime.RequiredError(
                'receiverType',
                'Required parameter "receiverType" was null or undefined when calling api1CreateTableShare().'
            );
        }

        if (requestParameters['permissionRead'] == null) {
            throw new runtime.RequiredError(
                'permissionRead',
                'Required parameter "permissionRead" was null or undefined when calling api1CreateTableShare().'
            );
        }

        if (requestParameters['permissionCreate'] == null) {
            throw new runtime.RequiredError(
                'permissionCreate',
                'Required parameter "permissionCreate" was null or undefined when calling api1CreateTableShare().'
            );
        }

        if (requestParameters['permissionUpdate'] == null) {
            throw new runtime.RequiredError(
                'permissionUpdate',
                'Required parameter "permissionUpdate" was null or undefined when calling api1CreateTableShare().'
            );
        }

        if (requestParameters['permissionDelete'] == null) {
            throw new runtime.RequiredError(
                'permissionDelete',
                'Required parameter "permissionDelete" was null or undefined when calling api1CreateTableShare().'
            );
        }

        if (requestParameters['permissionManage'] == null) {
            throw new runtime.RequiredError(
                'permissionManage',
                'Required parameter "permissionManage" was null or undefined when calling api1CreateTableShare().'
            );
        }

        if (requestParameters['tableId'] == null) {
            throw new runtime.RequiredError(
                'tableId',
                'Required parameter "tableId" was null or undefined when calling api1CreateTableShare().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['receiver'] != null) {
            queryParameters['receiver'] = requestParameters['receiver'];
        }

        if (requestParameters['receiverType'] != null) {
            queryParameters['receiverType'] = requestParameters['receiverType'];
        }

        if (requestParameters['permissionRead'] != null) {
            queryParameters['permissionRead'] = requestParameters['permissionRead'];
        }

        if (requestParameters['permissionCreate'] != null) {
            queryParameters['permissionCreate'] = requestParameters['permissionCreate'];
        }

        if (requestParameters['permissionUpdate'] != null) {
            queryParameters['permissionUpdate'] = requestParameters['permissionUpdate'];
        }

        if (requestParameters['permissionDelete'] != null) {
            queryParameters['permissionDelete'] = requestParameters['permissionDelete'];
        }

        if (requestParameters['permissionManage'] != null) {
            queryParameters['permissionManage'] = requestParameters['permissionManage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/tables/{tableId}/shares`.replace(`{${"tableId"}}`, encodeURIComponent(String(requestParameters['tableId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareFromJSON(jsonValue));
    }

    /**
     * Create a share for a table
     */
    async api1CreateTableShare(requestParameters: Api1CreateTableShareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Share> {
        const response = await this.api1CreateTableShareRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new view for a table
     */
    async api1CreateViewRaw(requestParameters: Api1CreateViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<View>> {
        if (requestParameters['title'] == null) {
            throw new runtime.RequiredError(
                'title',
                'Required parameter "title" was null or undefined when calling api1CreateView().'
            );
        }

        if (requestParameters['tableId'] == null) {
            throw new runtime.RequiredError(
                'tableId',
                'Required parameter "tableId" was null or undefined when calling api1CreateView().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['emoji'] != null) {
            queryParameters['emoji'] = requestParameters['emoji'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/tables/{tableId}/views`.replace(`{${"tableId"}}`, encodeURIComponent(String(requestParameters['tableId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViewFromJSON(jsonValue));
    }

    /**
     * Create a new view for a table
     */
    async api1CreateView(requestParameters: Api1CreateViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<View> {
        const response = await this.api1CreateViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a column
     */
    async api1DeleteColumnRaw(requestParameters: Api1DeleteColumnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Column>> {
        if (requestParameters['columnId'] == null) {
            throw new runtime.RequiredError(
                'columnId',
                'Required parameter "columnId" was null or undefined when calling api1DeleteColumn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/columns/{columnId}`.replace(`{${"columnId"}}`, encodeURIComponent(String(requestParameters['columnId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ColumnFromJSON(jsonValue));
    }

    /**
     * Delete a column
     */
    async api1DeleteColumn(requestParameters: Api1DeleteColumnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Column> {
        const response = await this.api1DeleteColumnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a row
     */
    async api1DeleteRowRaw(requestParameters: Api1DeleteRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Row>> {
        if (requestParameters['rowId'] == null) {
            throw new runtime.RequiredError(
                'rowId',
                'Required parameter "rowId" was null or undefined when calling api1DeleteRow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/rows/{rowId}`.replace(`{${"rowId"}}`, encodeURIComponent(String(requestParameters['rowId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RowFromJSON(jsonValue));
    }

    /**
     * Delete a row
     */
    async api1DeleteRow(requestParameters: Api1DeleteRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Row> {
        const response = await this.api1DeleteRowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a row within a view
     */
    async api1DeleteRowByViewRaw(requestParameters: Api1DeleteRowByViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Row>> {
        if (requestParameters['viewId'] == null) {
            throw new runtime.RequiredError(
                'viewId',
                'Required parameter "viewId" was null or undefined when calling api1DeleteRowByView().'
            );
        }

        if (requestParameters['rowId'] == null) {
            throw new runtime.RequiredError(
                'rowId',
                'Required parameter "rowId" was null or undefined when calling api1DeleteRowByView().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/views/{viewId}/rows/{rowId}`.replace(`{${"viewId"}}`, encodeURIComponent(String(requestParameters['viewId']))).replace(`{${"rowId"}}`, encodeURIComponent(String(requestParameters['rowId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RowFromJSON(jsonValue));
    }

    /**
     * Delete a row within a view
     */
    async api1DeleteRowByView(requestParameters: Api1DeleteRowByViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Row> {
        const response = await this.api1DeleteRowByViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a share
     */
    async api1DeleteShareRaw(requestParameters: Api1DeleteShareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Share>> {
        if (requestParameters['shareId'] == null) {
            throw new runtime.RequiredError(
                'shareId',
                'Required parameter "shareId" was null or undefined when calling api1DeleteShare().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/shares/{shareId}`.replace(`{${"shareId"}}`, encodeURIComponent(String(requestParameters['shareId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareFromJSON(jsonValue));
    }

    /**
     * Delete a share
     */
    async api1DeleteShare(requestParameters: Api1DeleteShareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Share> {
        const response = await this.api1DeleteShareRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a table
     */
    async api1DeleteTableRaw(requestParameters: Api1DeleteTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Table>> {
        if (requestParameters['tableId'] == null) {
            throw new runtime.RequiredError(
                'tableId',
                'Required parameter "tableId" was null or undefined when calling api1DeleteTable().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/tables/{tableId}`.replace(`{${"tableId"}}`, encodeURIComponent(String(requestParameters['tableId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TableFromJSON(jsonValue));
    }

    /**
     * Delete a table
     */
    async api1DeleteTable(requestParameters: Api1DeleteTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Table> {
        const response = await this.api1DeleteTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a view
     */
    async api1DeleteViewRaw(requestParameters: Api1DeleteViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<View>> {
        if (requestParameters['viewId'] == null) {
            throw new runtime.RequiredError(
                'viewId',
                'Required parameter "viewId" was null or undefined when calling api1DeleteView().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/views/{viewId}`.replace(`{${"viewId"}}`, encodeURIComponent(String(requestParameters['viewId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViewFromJSON(jsonValue));
    }

    /**
     * Delete a view
     */
    async api1DeleteView(requestParameters: Api1DeleteViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<View> {
        const response = await this.api1DeleteViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a column object
     */
    async api1GetColumnRaw(requestParameters: Api1GetColumnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Column>> {
        if (requestParameters['columnId'] == null) {
            throw new runtime.RequiredError(
                'columnId',
                'Required parameter "columnId" was null or undefined when calling api1GetColumn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/columns/{columnId}`.replace(`{${"columnId"}}`, encodeURIComponent(String(requestParameters['columnId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ColumnFromJSON(jsonValue));
    }

    /**
     * Returns a column object
     */
    async api1GetColumn(requestParameters: Api1GetColumnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Column> {
        const response = await this.api1GetColumnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a row
     */
    async api1GetRowRaw(requestParameters: Api1GetRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Row>> {
        if (requestParameters['rowId'] == null) {
            throw new runtime.RequiredError(
                'rowId',
                'Required parameter "rowId" was null or undefined when calling api1GetRow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/rows/{rowId}`.replace(`{${"rowId"}}`, encodeURIComponent(String(requestParameters['rowId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RowFromJSON(jsonValue));
    }

    /**
     * Get a row
     */
    async api1GetRow(requestParameters: Api1GetRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Row> {
        const response = await this.api1GetRowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a share object
     */
    async api1GetShareRaw(requestParameters: Api1GetShareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Share>> {
        if (requestParameters['shareId'] == null) {
            throw new runtime.RequiredError(
                'shareId',
                'Required parameter "shareId" was null or undefined when calling api1GetShare().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/shares/{shareId}`.replace(`{${"shareId"}}`, encodeURIComponent(String(requestParameters['shareId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareFromJSON(jsonValue));
    }

    /**
     * Get a share object
     */
    async api1GetShare(requestParameters: Api1GetShareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Share> {
        const response = await this.api1GetShareRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a table object
     */
    async api1GetTableRaw(requestParameters: Api1GetTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Table>> {
        if (requestParameters['tableId'] == null) {
            throw new runtime.RequiredError(
                'tableId',
                'Required parameter "tableId" was null or undefined when calling api1GetTable().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/tables/{tableId}`.replace(`{${"tableId"}}`, encodeURIComponent(String(requestParameters['tableId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TableFromJSON(jsonValue));
    }

    /**
     * Get a table object
     */
    async api1GetTable(requestParameters: Api1GetTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Table> {
        const response = await this.api1GetTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a view object
     */
    async api1GetViewRaw(requestParameters: Api1GetViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<View>> {
        if (requestParameters['viewId'] == null) {
            throw new runtime.RequiredError(
                'viewId',
                'Required parameter "viewId" was null or undefined when calling api1GetView().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/views/{viewId}`.replace(`{${"viewId"}}`, encodeURIComponent(String(requestParameters['viewId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViewFromJSON(jsonValue));
    }

    /**
     * Get a view object
     */
    async api1GetView(requestParameters: Api1GetViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<View> {
        const response = await this.api1GetViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Import from file in to a table
     */
    async api1ImportInTableRaw(requestParameters: Api1ImportInTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImportState>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling api1ImportInTable().'
            );
        }

        if (requestParameters['tableId'] == null) {
            throw new runtime.RequiredError(
                'tableId',
                'Required parameter "tableId" was null or undefined when calling api1ImportInTable().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['path'] != null) {
            queryParameters['path'] = requestParameters['path'];
        }

        if (requestParameters['createMissingColumns'] != null) {
            queryParameters['createMissingColumns'] = requestParameters['createMissingColumns'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/import/table/{tableId}`.replace(`{${"tableId"}}`, encodeURIComponent(String(requestParameters['tableId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImportStateFromJSON(jsonValue));
    }

    /**
     * Import from file in to a table
     */
    async api1ImportInTable(requestParameters: Api1ImportInTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImportState> {
        const response = await this.api1ImportInTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Import from file in to a table
     */
    async api1ImportInViewRaw(requestParameters: Api1ImportInViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImportState>> {
        if (requestParameters['path'] == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling api1ImportInView().'
            );
        }

        if (requestParameters['viewId'] == null) {
            throw new runtime.RequiredError(
                'viewId',
                'Required parameter "viewId" was null or undefined when calling api1ImportInView().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['path'] != null) {
            queryParameters['path'] = requestParameters['path'];
        }

        if (requestParameters['createMissingColumns'] != null) {
            queryParameters['createMissingColumns'] = requestParameters['createMissingColumns'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/import/views/{viewId}`.replace(`{${"viewId"}}`, encodeURIComponent(String(requestParameters['viewId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImportStateFromJSON(jsonValue));
    }

    /**
     * Import from file in to a table
     */
    async api1ImportInView(requestParameters: Api1ImportInViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImportState> {
        const response = await this.api1ImportInViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all Tables
     */
    async api1ListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Table>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/tables`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TableFromJSON));
    }

    /**
     * Returns all Tables
     */
    async api1List(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Table>> {
        const response = await this.api1ListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all columns for a table or a underlying view Return an empty array if no columns were found
     */
    async api1ListTableColumnsRaw(requestParameters: Api1ListTableColumnsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Column>>> {
        if (requestParameters['tableId'] == null) {
            throw new runtime.RequiredError(
                'tableId',
                'Required parameter "tableId" was null or undefined when calling api1ListTableColumns().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['viewId'] != null) {
            queryParameters['viewId'] = requestParameters['viewId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/tables/{tableId}/columns`.replace(`{${"tableId"}}`, encodeURIComponent(String(requestParameters['tableId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ColumnFromJSON));
    }

    /**
     * Get all columns for a table or a underlying view Return an empty array if no columns were found
     */
    async api1ListTableColumns(requestParameters: Api1ListTableColumnsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Column>> {
        const response = await this.api1ListTableColumnsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all rows for a table
     */
    async api1ListTableRowsRaw(requestParameters: Api1ListTableRowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Row>>> {
        if (requestParameters['tableId'] == null) {
            throw new runtime.RequiredError(
                'tableId',
                'Required parameter "tableId" was null or undefined when calling api1ListTableRows().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/tables/{tableId}/rows`.replace(`{${"tableId"}}`, encodeURIComponent(String(requestParameters['tableId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RowFromJSON));
    }

    /**
     * List all rows for a table
     */
    async api1ListTableRows(requestParameters: Api1ListTableRowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Row>> {
        const response = await this.api1ListTableRowsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all rows values for a table, first row are the column titles
     */
    async api1ListTableRowsSimpleRaw(requestParameters: Api1ListTableRowsSimpleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['tableId'] == null) {
            throw new runtime.RequiredError(
                'tableId',
                'Required parameter "tableId" was null or undefined when calling api1ListTableRowsSimple().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/tables/{tableId}/rows/simple`.replace(`{${"tableId"}}`, encodeURIComponent(String(requestParameters['tableId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List all rows values for a table, first row are the column titles
     */
    async api1ListTableRowsSimple(requestParameters: Api1ListTableRowsSimpleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.api1ListTableRowsSimpleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all shares for a table Will be empty if table does not exist
     */
    async api1ListTableSharesRaw(requestParameters: Api1ListTableSharesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Share>>> {
        if (requestParameters['tableId'] == null) {
            throw new runtime.RequiredError(
                'tableId',
                'Required parameter "tableId" was null or undefined when calling api1ListTableShares().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/tables/{tableId}/shares`.replace(`{${"tableId"}}`, encodeURIComponent(String(requestParameters['tableId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShareFromJSON));
    }

    /**
     * Get all shares for a table Will be empty if table does not exist
     */
    async api1ListTableShares(requestParameters: Api1ListTableSharesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Share>> {
        const response = await this.api1ListTableSharesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all columns for a view Return an empty array if no columns were found
     */
    async api1ListViewColumnsRaw(requestParameters: Api1ListViewColumnsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Column>>> {
        if (requestParameters['viewId'] == null) {
            throw new runtime.RequiredError(
                'viewId',
                'Required parameter "viewId" was null or undefined when calling api1ListViewColumns().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/views/{viewId}/columns`.replace(`{${"viewId"}}`, encodeURIComponent(String(requestParameters['viewId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ColumnFromJSON));
    }

    /**
     * Get all columns for a view Return an empty array if no columns were found
     */
    async api1ListViewColumns(requestParameters: Api1ListViewColumnsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Column>> {
        const response = await this.api1ListViewColumnsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all rows for a view
     */
    async api1ListViewRowsRaw(requestParameters: Api1ListViewRowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Row>>> {
        if (requestParameters['viewId'] == null) {
            throw new runtime.RequiredError(
                'viewId',
                'Required parameter "viewId" was null or undefined when calling api1ListViewRows().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/views/{viewId}/rows`.replace(`{${"viewId"}}`, encodeURIComponent(String(requestParameters['viewId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RowFromJSON));
    }

    /**
     * List all rows for a view
     */
    async api1ListViewRows(requestParameters: Api1ListViewRowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Row>> {
        const response = await this.api1ListViewRowsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all shares for a view Will be empty if view does not exist
     */
    async api1ListViewSharesRaw(requestParameters: Api1ListViewSharesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Share>>> {
        if (requestParameters['viewId'] == null) {
            throw new runtime.RequiredError(
                'viewId',
                'Required parameter "viewId" was null or undefined when calling api1ListViewShares().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/views/{viewId}/shares`.replace(`{${"viewId"}}`, encodeURIComponent(String(requestParameters['viewId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShareFromJSON));
    }

    /**
     * Get all shares for a view Will be empty if view does not exist
     */
    async api1ListViewShares(requestParameters: Api1ListViewSharesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Share>> {
        const response = await this.api1ListViewSharesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all views for a table
     */
    async api1ListViewsRaw(requestParameters: Api1ListViewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<View>>> {
        if (requestParameters['tableId'] == null) {
            throw new runtime.RequiredError(
                'tableId',
                'Required parameter "tableId" was null or undefined when calling api1ListViews().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/tables/{tableId}/views`.replace(`{${"tableId"}}`, encodeURIComponent(String(requestParameters['tableId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ViewFromJSON));
    }

    /**
     * Get all views for a table
     */
    async api1ListViews(requestParameters: Api1ListViewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<View>> {
        const response = await this.api1ListViewsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a column
     */
    async api1UpdateColumnRaw(requestParameters: Api1UpdateColumnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Column>> {
        if (requestParameters['mandatory'] == null) {
            throw new runtime.RequiredError(
                'mandatory',
                'Required parameter "mandatory" was null or undefined when calling api1UpdateColumn().'
            );
        }

        if (requestParameters['columnId'] == null) {
            throw new runtime.RequiredError(
                'columnId',
                'Required parameter "columnId" was null or undefined when calling api1UpdateColumn().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['subtype'] != null) {
            queryParameters['subtype'] = requestParameters['subtype'];
        }

        if (requestParameters['mandatory'] != null) {
            queryParameters['mandatory'] = requestParameters['mandatory'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['numberPrefix'] != null) {
            queryParameters['numberPrefix'] = requestParameters['numberPrefix'];
        }

        if (requestParameters['numberSuffix'] != null) {
            queryParameters['numberSuffix'] = requestParameters['numberSuffix'];
        }

        if (requestParameters['numberDefault'] != null) {
            queryParameters['numberDefault'] = requestParameters['numberDefault'];
        }

        if (requestParameters['numberMin'] != null) {
            queryParameters['numberMin'] = requestParameters['numberMin'];
        }

        if (requestParameters['numberMax'] != null) {
            queryParameters['numberMax'] = requestParameters['numberMax'];
        }

        if (requestParameters['numberDecimals'] != null) {
            queryParameters['numberDecimals'] = requestParameters['numberDecimals'];
        }

        if (requestParameters['textDefault'] != null) {
            queryParameters['textDefault'] = requestParameters['textDefault'];
        }

        if (requestParameters['textAllowedPattern'] != null) {
            queryParameters['textAllowedPattern'] = requestParameters['textAllowedPattern'];
        }

        if (requestParameters['textMaxLength'] != null) {
            queryParameters['textMaxLength'] = requestParameters['textMaxLength'];
        }

        if (requestParameters['selectionOptions'] != null) {
            queryParameters['selectionOptions'] = requestParameters['selectionOptions'];
        }

        if (requestParameters['selectionDefault'] != null) {
            queryParameters['selectionDefault'] = requestParameters['selectionDefault'];
        }

        if (requestParameters['datetimeDefault'] != null) {
            queryParameters['datetimeDefault'] = requestParameters['datetimeDefault'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/columns/{columnId}`.replace(`{${"columnId"}}`, encodeURIComponent(String(requestParameters['columnId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ColumnFromJSON(jsonValue));
    }

    /**
     * Update a column
     */
    async api1UpdateColumn(requestParameters: Api1UpdateColumnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Column> {
        const response = await this.api1UpdateColumnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a row
     */
    async api1UpdateRowRaw(requestParameters: Api1UpdateRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Row>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling api1UpdateRow().'
            );
        }

        if (requestParameters['rowId'] == null) {
            throw new runtime.RequiredError(
                'rowId',
                'Required parameter "rowId" was null or undefined when calling api1UpdateRow().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['viewId'] != null) {
            queryParameters['viewId'] = requestParameters['viewId'];
        }

        if (requestParameters['data'] != null) {
            queryParameters['data'] = requestParameters['data'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/rows/{rowId}`.replace(`{${"rowId"}}`, encodeURIComponent(String(requestParameters['rowId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RowFromJSON(jsonValue));
    }

    /**
     * Update a row
     */
    async api1UpdateRow(requestParameters: Api1UpdateRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Row> {
        const response = await this.api1UpdateRowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the display mode of a context share
     */
    async api1UpdateShareDisplayModeRaw(requestParameters: Api1UpdateShareDisplayModeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextNavigation>> {
        if (requestParameters['displayMode'] == null) {
            throw new runtime.RequiredError(
                'displayMode',
                'Required parameter "displayMode" was null or undefined when calling api1UpdateShareDisplayMode().'
            );
        }

        if (requestParameters['shareId'] == null) {
            throw new runtime.RequiredError(
                'shareId',
                'Required parameter "shareId" was null or undefined when calling api1UpdateShareDisplayMode().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['displayMode'] != null) {
            queryParameters['displayMode'] = requestParameters['displayMode'];
        }

        if (requestParameters['target'] != null) {
            queryParameters['target'] = requestParameters['target'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/shares/{shareId}/display-mode`.replace(`{${"shareId"}}`, encodeURIComponent(String(requestParameters['shareId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextNavigationFromJSON(jsonValue));
    }

    /**
     * Updates the display mode of a context share
     */
    async api1UpdateShareDisplayMode(requestParameters: Api1UpdateShareDisplayModeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextNavigation> {
        const response = await this.api1UpdateShareDisplayModeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a share permission
     */
    async api1UpdateSharePermissionsRaw(requestParameters: Api1UpdateSharePermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Share>> {
        if (requestParameters['permissionType'] == null) {
            throw new runtime.RequiredError(
                'permissionType',
                'Required parameter "permissionType" was null or undefined when calling api1UpdateSharePermissions().'
            );
        }

        if (requestParameters['permissionValue'] == null) {
            throw new runtime.RequiredError(
                'permissionValue',
                'Required parameter "permissionValue" was null or undefined when calling api1UpdateSharePermissions().'
            );
        }

        if (requestParameters['shareId'] == null) {
            throw new runtime.RequiredError(
                'shareId',
                'Required parameter "shareId" was null or undefined when calling api1UpdateSharePermissions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['permissionType'] != null) {
            queryParameters['permissionType'] = requestParameters['permissionType'];
        }

        if (requestParameters['permissionValue'] != null) {
            queryParameters['permissionValue'] = requestParameters['permissionValue'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/shares/{shareId}`.replace(`{${"shareId"}}`, encodeURIComponent(String(requestParameters['shareId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareFromJSON(jsonValue));
    }

    /**
     * Update a share permission
     */
    async api1UpdateSharePermissions(requestParameters: Api1UpdateSharePermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Share> {
        const response = await this.api1UpdateSharePermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update tables properties
     */
    async api1UpdateTableRaw(requestParameters: Api1UpdateTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Table>> {
        if (requestParameters['tableId'] == null) {
            throw new runtime.RequiredError(
                'tableId',
                'Required parameter "tableId" was null or undefined when calling api1UpdateTable().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['emoji'] != null) {
            queryParameters['emoji'] = requestParameters['emoji'];
        }

        if (requestParameters['archived'] != null) {
            queryParameters['archived'] = requestParameters['archived'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/tables/{tableId}`.replace(`{${"tableId"}}`, encodeURIComponent(String(requestParameters['tableId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TableFromJSON(jsonValue));
    }

    /**
     * Update tables properties
     */
    async api1UpdateTable(requestParameters: Api1UpdateTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Table> {
        const response = await this.api1UpdateTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a view via key-value sets
     */
    async api1UpdateViewRaw(requestParameters: Api1UpdateViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<View>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling api1UpdateView().'
            );
        }

        if (requestParameters['viewId'] == null) {
            throw new runtime.RequiredError(
                'viewId',
                'Required parameter "viewId" was null or undefined when calling api1UpdateView().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['data'] != null) {
            queryParameters['data'] = requestParameters['data'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/index.php/apps/tables/api/1/views/{viewId}`.replace(`{${"viewId"}}`, encodeURIComponent(String(requestParameters['viewId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViewFromJSON(jsonValue));
    }

    /**
     * Update a view via key-value sets
     */
    async api1UpdateView(requestParameters: Api1UpdateViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<View> {
        const response = await this.api1UpdateViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const Api1CreateColumnTypeEnum = {
    Text: 'text',
    Number: 'number',
    Datetime: 'datetime',
    Select: 'select'
} as const;
export type Api1CreateColumnTypeEnum = typeof Api1CreateColumnTypeEnum[keyof typeof Api1CreateColumnTypeEnum];
/**
 * @export
 */
export const Api1CreateColumnMandatoryEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type Api1CreateColumnMandatoryEnum = typeof Api1CreateColumnMandatoryEnum[keyof typeof Api1CreateColumnMandatoryEnum];
/**
 * @export
 */
export const Api1CreateShareNodeTypeEnum = {
    Table: 'table',
    View: 'view'
} as const;
export type Api1CreateShareNodeTypeEnum = typeof Api1CreateShareNodeTypeEnum[keyof typeof Api1CreateShareNodeTypeEnum];
/**
 * @export
 */
export const Api1CreateShareReceiverTypeEnum = {
    User: 'user',
    Group: 'group'
} as const;
export type Api1CreateShareReceiverTypeEnum = typeof Api1CreateShareReceiverTypeEnum[keyof typeof Api1CreateShareReceiverTypeEnum];
/**
 * @export
 */
export const Api1CreateSharePermissionReadEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type Api1CreateSharePermissionReadEnum = typeof Api1CreateSharePermissionReadEnum[keyof typeof Api1CreateSharePermissionReadEnum];
/**
 * @export
 */
export const Api1CreateSharePermissionCreateEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type Api1CreateSharePermissionCreateEnum = typeof Api1CreateSharePermissionCreateEnum[keyof typeof Api1CreateSharePermissionCreateEnum];
/**
 * @export
 */
export const Api1CreateSharePermissionUpdateEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type Api1CreateSharePermissionUpdateEnum = typeof Api1CreateSharePermissionUpdateEnum[keyof typeof Api1CreateSharePermissionUpdateEnum];
/**
 * @export
 */
export const Api1CreateSharePermissionDeleteEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type Api1CreateSharePermissionDeleteEnum = typeof Api1CreateSharePermissionDeleteEnum[keyof typeof Api1CreateSharePermissionDeleteEnum];
/**
 * @export
 */
export const Api1CreateSharePermissionManageEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type Api1CreateSharePermissionManageEnum = typeof Api1CreateSharePermissionManageEnum[keyof typeof Api1CreateSharePermissionManageEnum];
/**
 * @export
 */
export const Api1CreateTableColumnTypeEnum = {
    Text: 'text',
    Number: 'number',
    Datetime: 'datetime',
    Select: 'select'
} as const;
export type Api1CreateTableColumnTypeEnum = typeof Api1CreateTableColumnTypeEnum[keyof typeof Api1CreateTableColumnTypeEnum];
/**
 * @export
 */
export const Api1CreateTableColumnMandatoryEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type Api1CreateTableColumnMandatoryEnum = typeof Api1CreateTableColumnMandatoryEnum[keyof typeof Api1CreateTableColumnMandatoryEnum];
/**
 * @export
 */
export const Api1CreateTableShareReceiverTypeEnum = {
    User: 'user',
    Group: 'group'
} as const;
export type Api1CreateTableShareReceiverTypeEnum = typeof Api1CreateTableShareReceiverTypeEnum[keyof typeof Api1CreateTableShareReceiverTypeEnum];
/**
 * @export
 */
export const Api1CreateTableSharePermissionReadEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type Api1CreateTableSharePermissionReadEnum = typeof Api1CreateTableSharePermissionReadEnum[keyof typeof Api1CreateTableSharePermissionReadEnum];
/**
 * @export
 */
export const Api1CreateTableSharePermissionCreateEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type Api1CreateTableSharePermissionCreateEnum = typeof Api1CreateTableSharePermissionCreateEnum[keyof typeof Api1CreateTableSharePermissionCreateEnum];
/**
 * @export
 */
export const Api1CreateTableSharePermissionUpdateEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type Api1CreateTableSharePermissionUpdateEnum = typeof Api1CreateTableSharePermissionUpdateEnum[keyof typeof Api1CreateTableSharePermissionUpdateEnum];
/**
 * @export
 */
export const Api1CreateTableSharePermissionDeleteEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type Api1CreateTableSharePermissionDeleteEnum = typeof Api1CreateTableSharePermissionDeleteEnum[keyof typeof Api1CreateTableSharePermissionDeleteEnum];
/**
 * @export
 */
export const Api1CreateTableSharePermissionManageEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type Api1CreateTableSharePermissionManageEnum = typeof Api1CreateTableSharePermissionManageEnum[keyof typeof Api1CreateTableSharePermissionManageEnum];
/**
 * @export
 */
export const Api1ImportInTableCreateMissingColumnsEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type Api1ImportInTableCreateMissingColumnsEnum = typeof Api1ImportInTableCreateMissingColumnsEnum[keyof typeof Api1ImportInTableCreateMissingColumnsEnum];
/**
 * @export
 */
export const Api1ImportInViewCreateMissingColumnsEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type Api1ImportInViewCreateMissingColumnsEnum = typeof Api1ImportInViewCreateMissingColumnsEnum[keyof typeof Api1ImportInViewCreateMissingColumnsEnum];
/**
 * @export
 */
export const Api1UpdateColumnMandatoryEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type Api1UpdateColumnMandatoryEnum = typeof Api1UpdateColumnMandatoryEnum[keyof typeof Api1UpdateColumnMandatoryEnum];
/**
 * @export
 */
export const Api1UpdateShareDisplayModeTargetEnum = {
    Default: 'default',
    Self: 'self'
} as const;
export type Api1UpdateShareDisplayModeTargetEnum = typeof Api1UpdateShareDisplayModeTargetEnum[keyof typeof Api1UpdateShareDisplayModeTargetEnum];
/**
 * @export
 */
export const Api1UpdateSharePermissionsPermissionValueEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type Api1UpdateSharePermissionsPermissionValueEnum = typeof Api1UpdateSharePermissionsPermissionValueEnum[keyof typeof Api1UpdateSharePermissionsPermissionValueEnum];
/**
 * @export
 */
export const Api1UpdateTableArchivedEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type Api1UpdateTableArchivedEnum = typeof Api1UpdateTableArchivedEnum[keyof typeof Api1UpdateTableArchivedEnum];
