/* tslint:disable */
/* eslint-disable */
/**
 * tables
 * Manage data the way you need it.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  ApiColumnsList200Response,
  ApiColumnsShow200Response,
  ApiGeneralList500Response,
} from '../models/index.ts';
import {
    ApiColumnsList200ResponseFromJSON,
    ApiColumnsList200ResponseToJSON,
    ApiColumnsShow200ResponseFromJSON,
    ApiColumnsShow200ResponseToJSON,
    ApiGeneralList500ResponseFromJSON,
    ApiGeneralList500ResponseToJSON,
} from '../models/index.ts';

export interface ApiColumnsCreateDatetimeColumnRequest {
    baseNodeId: number;
    title: string;
    oCSAPIRequest: boolean;
    datetimeDefault?: ApiColumnsCreateDatetimeColumnDatetimeDefaultEnum;
    subtype?: ApiColumnsCreateDatetimeColumnSubtypeEnum;
    description?: string;
    selectedViewIds?: Array<number>;
    mandatory?: ApiColumnsCreateDatetimeColumnMandatoryEnum;
    baseNodeType?: ApiColumnsCreateDatetimeColumnBaseNodeTypeEnum;
}

export interface ApiColumnsCreateNumberColumnRequest {
    baseNodeId: number;
    title: string;
    oCSAPIRequest: boolean;
    numberDefault?: number;
    numberDecimals?: number;
    numberPrefix?: string;
    numberSuffix?: string;
    numberMin?: number;
    numberMax?: number;
    subtype?: ApiColumnsCreateNumberColumnSubtypeEnum;
    description?: string;
    selectedViewIds?: Array<number>;
    mandatory?: ApiColumnsCreateNumberColumnMandatoryEnum;
    baseNodeType?: ApiColumnsCreateNumberColumnBaseNodeTypeEnum;
}

export interface ApiColumnsCreateSelectionColumnRequest {
    baseNodeId: number;
    title: string;
    selectionOptions: string;
    oCSAPIRequest: boolean;
    selectionDefault?: string;
    subtype?: ApiColumnsCreateSelectionColumnSubtypeEnum;
    description?: string;
    selectedViewIds?: Array<number>;
    mandatory?: ApiColumnsCreateSelectionColumnMandatoryEnum;
    baseNodeType?: ApiColumnsCreateSelectionColumnBaseNodeTypeEnum;
}

export interface ApiColumnsCreateTextColumnRequest {
    baseNodeId: number;
    title: string;
    oCSAPIRequest: boolean;
    textDefault?: string;
    textAllowedPattern?: string;
    textMaxLength?: number;
    subtype?: ApiColumnsCreateTextColumnSubtypeEnum;
    description?: string;
    selectedViewIds?: Array<number>;
    mandatory?: ApiColumnsCreateTextColumnMandatoryEnum;
    baseNodeType?: ApiColumnsCreateTextColumnBaseNodeTypeEnum;
}

export interface ApiColumnsListRequest {
    nodeType: ApiColumnsListNodeTypeEnum;
    nodeId: number;
    oCSAPIRequest: boolean;
}

export interface ApiColumnsShowRequest {
    id: number;
    oCSAPIRequest: boolean;
}

/**
 * 
 */
export class ApiColumnsApi extends runtime.BaseAPI {

    /**
     * Specify a subtype to use any special datetime column
     * [api v2] Create new datetime column
     */
    async apiColumnsCreateDatetimeColumnRaw(requestParameters: ApiColumnsCreateDatetimeColumnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiColumnsShow200Response>> {
        if (requestParameters['baseNodeId'] == null) {
            throw new runtime.RequiredError(
                'baseNodeId',
                'Required parameter "baseNodeId" was null or undefined when calling apiColumnsCreateDatetimeColumn().'
            );
        }

        if (requestParameters['title'] == null) {
            throw new runtime.RequiredError(
                'title',
                'Required parameter "title" was null or undefined when calling apiColumnsCreateDatetimeColumn().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling apiColumnsCreateDatetimeColumn().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['baseNodeId'] != null) {
            queryParameters['baseNodeId'] = requestParameters['baseNodeId'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['datetimeDefault'] != null) {
            queryParameters['datetimeDefault'] = requestParameters['datetimeDefault'];
        }

        if (requestParameters['subtype'] != null) {
            queryParameters['subtype'] = requestParameters['subtype'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['selectedViewIds'] != null) {
            queryParameters['selectedViewIds[]'] = requestParameters['selectedViewIds'];
        }

        if (requestParameters['mandatory'] != null) {
            queryParameters['mandatory'] = requestParameters['mandatory'];
        }

        if (requestParameters['baseNodeType'] != null) {
            queryParameters['baseNodeType'] = requestParameters['baseNodeType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/tables/api/2/columns/datetime`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiColumnsShow200ResponseFromJSON(jsonValue));
    }

    /**
     * Specify a subtype to use any special datetime column
     * [api v2] Create new datetime column
     */
    async apiColumnsCreateDatetimeColumn(requestParameters: ApiColumnsCreateDatetimeColumnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiColumnsShow200Response> {
        const response = await this.apiColumnsCreateDatetimeColumnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Specify a subtype to use any special numbered column
     * [api v2] Create new numbered column
     */
    async apiColumnsCreateNumberColumnRaw(requestParameters: ApiColumnsCreateNumberColumnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiColumnsShow200Response>> {
        if (requestParameters['baseNodeId'] == null) {
            throw new runtime.RequiredError(
                'baseNodeId',
                'Required parameter "baseNodeId" was null or undefined when calling apiColumnsCreateNumberColumn().'
            );
        }

        if (requestParameters['title'] == null) {
            throw new runtime.RequiredError(
                'title',
                'Required parameter "title" was null or undefined when calling apiColumnsCreateNumberColumn().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling apiColumnsCreateNumberColumn().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['baseNodeId'] != null) {
            queryParameters['baseNodeId'] = requestParameters['baseNodeId'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['numberDefault'] != null) {
            queryParameters['numberDefault'] = requestParameters['numberDefault'];
        }

        if (requestParameters['numberDecimals'] != null) {
            queryParameters['numberDecimals'] = requestParameters['numberDecimals'];
        }

        if (requestParameters['numberPrefix'] != null) {
            queryParameters['numberPrefix'] = requestParameters['numberPrefix'];
        }

        if (requestParameters['numberSuffix'] != null) {
            queryParameters['numberSuffix'] = requestParameters['numberSuffix'];
        }

        if (requestParameters['numberMin'] != null) {
            queryParameters['numberMin'] = requestParameters['numberMin'];
        }

        if (requestParameters['numberMax'] != null) {
            queryParameters['numberMax'] = requestParameters['numberMax'];
        }

        if (requestParameters['subtype'] != null) {
            queryParameters['subtype'] = requestParameters['subtype'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['selectedViewIds'] != null) {
            queryParameters['selectedViewIds[]'] = requestParameters['selectedViewIds'];
        }

        if (requestParameters['mandatory'] != null) {
            queryParameters['mandatory'] = requestParameters['mandatory'];
        }

        if (requestParameters['baseNodeType'] != null) {
            queryParameters['baseNodeType'] = requestParameters['baseNodeType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/tables/api/2/columns/number`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiColumnsShow200ResponseFromJSON(jsonValue));
    }

    /**
     * Specify a subtype to use any special numbered column
     * [api v2] Create new numbered column
     */
    async apiColumnsCreateNumberColumn(requestParameters: ApiColumnsCreateNumberColumnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiColumnsShow200Response> {
        const response = await this.apiColumnsCreateNumberColumnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Specify a subtype to use any special selection column
     * [api v2] Create new selection column
     */
    async apiColumnsCreateSelectionColumnRaw(requestParameters: ApiColumnsCreateSelectionColumnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiColumnsShow200Response>> {
        if (requestParameters['baseNodeId'] == null) {
            throw new runtime.RequiredError(
                'baseNodeId',
                'Required parameter "baseNodeId" was null or undefined when calling apiColumnsCreateSelectionColumn().'
            );
        }

        if (requestParameters['title'] == null) {
            throw new runtime.RequiredError(
                'title',
                'Required parameter "title" was null or undefined when calling apiColumnsCreateSelectionColumn().'
            );
        }

        if (requestParameters['selectionOptions'] == null) {
            throw new runtime.RequiredError(
                'selectionOptions',
                'Required parameter "selectionOptions" was null or undefined when calling apiColumnsCreateSelectionColumn().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling apiColumnsCreateSelectionColumn().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['baseNodeId'] != null) {
            queryParameters['baseNodeId'] = requestParameters['baseNodeId'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['selectionOptions'] != null) {
            queryParameters['selectionOptions'] = requestParameters['selectionOptions'];
        }

        if (requestParameters['selectionDefault'] != null) {
            queryParameters['selectionDefault'] = requestParameters['selectionDefault'];
        }

        if (requestParameters['subtype'] != null) {
            queryParameters['subtype'] = requestParameters['subtype'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['selectedViewIds'] != null) {
            queryParameters['selectedViewIds[]'] = requestParameters['selectedViewIds'];
        }

        if (requestParameters['mandatory'] != null) {
            queryParameters['mandatory'] = requestParameters['mandatory'];
        }

        if (requestParameters['baseNodeType'] != null) {
            queryParameters['baseNodeType'] = requestParameters['baseNodeType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/tables/api/2/columns/selection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiColumnsShow200ResponseFromJSON(jsonValue));
    }

    /**
     * Specify a subtype to use any special selection column
     * [api v2] Create new selection column
     */
    async apiColumnsCreateSelectionColumn(requestParameters: ApiColumnsCreateSelectionColumnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiColumnsShow200Response> {
        const response = await this.apiColumnsCreateSelectionColumnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Specify a subtype to use any special text column
     * [api v2] Create new text column
     */
    async apiColumnsCreateTextColumnRaw(requestParameters: ApiColumnsCreateTextColumnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiColumnsShow200Response>> {
        if (requestParameters['baseNodeId'] == null) {
            throw new runtime.RequiredError(
                'baseNodeId',
                'Required parameter "baseNodeId" was null or undefined when calling apiColumnsCreateTextColumn().'
            );
        }

        if (requestParameters['title'] == null) {
            throw new runtime.RequiredError(
                'title',
                'Required parameter "title" was null or undefined when calling apiColumnsCreateTextColumn().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling apiColumnsCreateTextColumn().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['baseNodeId'] != null) {
            queryParameters['baseNodeId'] = requestParameters['baseNodeId'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['textDefault'] != null) {
            queryParameters['textDefault'] = requestParameters['textDefault'];
        }

        if (requestParameters['textAllowedPattern'] != null) {
            queryParameters['textAllowedPattern'] = requestParameters['textAllowedPattern'];
        }

        if (requestParameters['textMaxLength'] != null) {
            queryParameters['textMaxLength'] = requestParameters['textMaxLength'];
        }

        if (requestParameters['subtype'] != null) {
            queryParameters['subtype'] = requestParameters['subtype'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['selectedViewIds'] != null) {
            queryParameters['selectedViewIds[]'] = requestParameters['selectedViewIds'];
        }

        if (requestParameters['mandatory'] != null) {
            queryParameters['mandatory'] = requestParameters['mandatory'];
        }

        if (requestParameters['baseNodeType'] != null) {
            queryParameters['baseNodeType'] = requestParameters['baseNodeType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/tables/api/2/columns/text`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiColumnsShow200ResponseFromJSON(jsonValue));
    }

    /**
     * Specify a subtype to use any special text column
     * [api v2] Create new text column
     */
    async apiColumnsCreateTextColumn(requestParameters: ApiColumnsCreateTextColumnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiColumnsShow200Response> {
        const response = await this.apiColumnsCreateTextColumnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return an empty array if no columns were found
     * [api v2] Get all columns for a table or a view
     */
    async apiColumnsListRaw(requestParameters: ApiColumnsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiColumnsList200Response>> {
        if (requestParameters['nodeType'] == null) {
            throw new runtime.RequiredError(
                'nodeType',
                'Required parameter "nodeType" was null or undefined when calling apiColumnsList().'
            );
        }

        if (requestParameters['nodeId'] == null) {
            throw new runtime.RequiredError(
                'nodeId',
                'Required parameter "nodeId" was null or undefined when calling apiColumnsList().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling apiColumnsList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/tables/api/2/columns/{nodeType}/{nodeId}`.replace(`{${"nodeType"}}`, encodeURIComponent(String(requestParameters['nodeType']))).replace(`{${"nodeId"}}`, encodeURIComponent(String(requestParameters['nodeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiColumnsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Return an empty array if no columns were found
     * [api v2] Get all columns for a table or a view
     */
    async apiColumnsList(requestParameters: ApiColumnsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiColumnsList200Response> {
        const response = await this.apiColumnsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * [api v2] Get a column object
     */
    async apiColumnsShowRaw(requestParameters: ApiColumnsShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiColumnsShow200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiColumnsShow().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling apiColumnsShow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/tables/api/2/columns/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiColumnsShow200ResponseFromJSON(jsonValue));
    }

    /**
     * [api v2] Get a column object
     */
    async apiColumnsShow(requestParameters: ApiColumnsShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiColumnsShow200Response> {
        const response = await this.apiColumnsShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ApiColumnsCreateDatetimeColumnDatetimeDefaultEnum = {
    Today: 'today',
    Now: 'now'
} as const;
export type ApiColumnsCreateDatetimeColumnDatetimeDefaultEnum = typeof ApiColumnsCreateDatetimeColumnDatetimeDefaultEnum[keyof typeof ApiColumnsCreateDatetimeColumnDatetimeDefaultEnum];
/**
 * @export
 */
export const ApiColumnsCreateDatetimeColumnSubtypeEnum = {
    Progress: 'progress',
    Stars: 'stars'
} as const;
export type ApiColumnsCreateDatetimeColumnSubtypeEnum = typeof ApiColumnsCreateDatetimeColumnSubtypeEnum[keyof typeof ApiColumnsCreateDatetimeColumnSubtypeEnum];
/**
 * @export
 */
export const ApiColumnsCreateDatetimeColumnMandatoryEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type ApiColumnsCreateDatetimeColumnMandatoryEnum = typeof ApiColumnsCreateDatetimeColumnMandatoryEnum[keyof typeof ApiColumnsCreateDatetimeColumnMandatoryEnum];
/**
 * @export
 */
export const ApiColumnsCreateDatetimeColumnBaseNodeTypeEnum = {
    Table: 'table',
    View: 'view'
} as const;
export type ApiColumnsCreateDatetimeColumnBaseNodeTypeEnum = typeof ApiColumnsCreateDatetimeColumnBaseNodeTypeEnum[keyof typeof ApiColumnsCreateDatetimeColumnBaseNodeTypeEnum];
/**
 * @export
 */
export const ApiColumnsCreateNumberColumnSubtypeEnum = {
    Progress: 'progress',
    Stars: 'stars'
} as const;
export type ApiColumnsCreateNumberColumnSubtypeEnum = typeof ApiColumnsCreateNumberColumnSubtypeEnum[keyof typeof ApiColumnsCreateNumberColumnSubtypeEnum];
/**
 * @export
 */
export const ApiColumnsCreateNumberColumnMandatoryEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type ApiColumnsCreateNumberColumnMandatoryEnum = typeof ApiColumnsCreateNumberColumnMandatoryEnum[keyof typeof ApiColumnsCreateNumberColumnMandatoryEnum];
/**
 * @export
 */
export const ApiColumnsCreateNumberColumnBaseNodeTypeEnum = {
    Table: 'table',
    View: 'view'
} as const;
export type ApiColumnsCreateNumberColumnBaseNodeTypeEnum = typeof ApiColumnsCreateNumberColumnBaseNodeTypeEnum[keyof typeof ApiColumnsCreateNumberColumnBaseNodeTypeEnum];
/**
 * @export
 */
export const ApiColumnsCreateSelectionColumnSubtypeEnum = {
    Progress: 'progress',
    Stars: 'stars'
} as const;
export type ApiColumnsCreateSelectionColumnSubtypeEnum = typeof ApiColumnsCreateSelectionColumnSubtypeEnum[keyof typeof ApiColumnsCreateSelectionColumnSubtypeEnum];
/**
 * @export
 */
export const ApiColumnsCreateSelectionColumnMandatoryEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type ApiColumnsCreateSelectionColumnMandatoryEnum = typeof ApiColumnsCreateSelectionColumnMandatoryEnum[keyof typeof ApiColumnsCreateSelectionColumnMandatoryEnum];
/**
 * @export
 */
export const ApiColumnsCreateSelectionColumnBaseNodeTypeEnum = {
    Table: 'table',
    View: 'view'
} as const;
export type ApiColumnsCreateSelectionColumnBaseNodeTypeEnum = typeof ApiColumnsCreateSelectionColumnBaseNodeTypeEnum[keyof typeof ApiColumnsCreateSelectionColumnBaseNodeTypeEnum];
/**
 * @export
 */
export const ApiColumnsCreateTextColumnSubtypeEnum = {
    Progress: 'progress',
    Stars: 'stars'
} as const;
export type ApiColumnsCreateTextColumnSubtypeEnum = typeof ApiColumnsCreateTextColumnSubtypeEnum[keyof typeof ApiColumnsCreateTextColumnSubtypeEnum];
/**
 * @export
 */
export const ApiColumnsCreateTextColumnMandatoryEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type ApiColumnsCreateTextColumnMandatoryEnum = typeof ApiColumnsCreateTextColumnMandatoryEnum[keyof typeof ApiColumnsCreateTextColumnMandatoryEnum];
/**
 * @export
 */
export const ApiColumnsCreateTextColumnBaseNodeTypeEnum = {
    Table: 'table',
    View: 'view'
} as const;
export type ApiColumnsCreateTextColumnBaseNodeTypeEnum = typeof ApiColumnsCreateTextColumnBaseNodeTypeEnum[keyof typeof ApiColumnsCreateTextColumnBaseNodeTypeEnum];
/**
 * @export
 */
export const ApiColumnsListNodeTypeEnum = {
    Table: 'table',
    View: 'view'
} as const;
export type ApiColumnsListNodeTypeEnum = typeof ApiColumnsListNodeTypeEnum[keyof typeof ApiColumnsListNodeTypeEnum];
