/* tslint:disable */
/* eslint-disable */
/**
 * tables
 * Manage data the way you need it.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.ts';
/**
 * 
 * @export
 * @interface Column
 */
export interface Column {
    /**
     * 
     * @type {number}
     * @memberof Column
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Column
     */
    title: string;
    /**
     * 
     * @type {number}
     * @memberof Column
     */
    tableId: number;
    /**
     * 
     * @type {string}
     * @memberof Column
     */
    createdBy: string;
    /**
     * 
     * @type {string}
     * @memberof Column
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof Column
     */
    lastEditBy: string;
    /**
     * 
     * @type {string}
     * @memberof Column
     */
    lastEditAt: string;
    /**
     * 
     * @type {string}
     * @memberof Column
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof Column
     */
    subtype: string;
    /**
     * 
     * @type {boolean}
     * @memberof Column
     */
    mandatory: boolean;
    /**
     * 
     * @type {string}
     * @memberof Column
     */
    description: string;
    /**
     * 
     * @type {number}
     * @memberof Column
     */
    orderWeight: number;
    /**
     * 
     * @type {number}
     * @memberof Column
     */
    numberDefault: number;
    /**
     * 
     * @type {number}
     * @memberof Column
     */
    numberMin: number;
    /**
     * 
     * @type {number}
     * @memberof Column
     */
    numberMax: number;
    /**
     * 
     * @type {number}
     * @memberof Column
     */
    numberDecimals: number;
    /**
     * 
     * @type {string}
     * @memberof Column
     */
    numberPrefix: string;
    /**
     * 
     * @type {string}
     * @memberof Column
     */
    numberSuffix: string;
    /**
     * 
     * @type {string}
     * @memberof Column
     */
    textDefault: string;
    /**
     * 
     * @type {string}
     * @memberof Column
     */
    textAllowedPattern: string;
    /**
     * 
     * @type {number}
     * @memberof Column
     */
    textMaxLength: number;
    /**
     * 
     * @type {string}
     * @memberof Column
     */
    selectionOptions: string;
    /**
     * 
     * @type {string}
     * @memberof Column
     */
    selectionDefault: string;
    /**
     * 
     * @type {string}
     * @memberof Column
     */
    datetimeDefault: string;
}

/**
 * Check if a given object implements the Column interface.
 */
export function instanceOfColumn(value: object): value is Column {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('tableId' in value) || value['tableId'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('lastEditBy' in value) || value['lastEditBy'] === undefined) return false;
    if (!('lastEditAt' in value) || value['lastEditAt'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('subtype' in value) || value['subtype'] === undefined) return false;
    if (!('mandatory' in value) || value['mandatory'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('orderWeight' in value) || value['orderWeight'] === undefined) return false;
    if (!('numberDefault' in value) || value['numberDefault'] === undefined) return false;
    if (!('numberMin' in value) || value['numberMin'] === undefined) return false;
    if (!('numberMax' in value) || value['numberMax'] === undefined) return false;
    if (!('numberDecimals' in value) || value['numberDecimals'] === undefined) return false;
    if (!('numberPrefix' in value) || value['numberPrefix'] === undefined) return false;
    if (!('numberSuffix' in value) || value['numberSuffix'] === undefined) return false;
    if (!('textDefault' in value) || value['textDefault'] === undefined) return false;
    if (!('textAllowedPattern' in value) || value['textAllowedPattern'] === undefined) return false;
    if (!('textMaxLength' in value) || value['textMaxLength'] === undefined) return false;
    if (!('selectionOptions' in value) || value['selectionOptions'] === undefined) return false;
    if (!('selectionDefault' in value) || value['selectionDefault'] === undefined) return false;
    if (!('datetimeDefault' in value) || value['datetimeDefault'] === undefined) return false;
    return true;
}

export function ColumnFromJSON(json: any): Column {
    return ColumnFromJSONTyped(json, false);
}

export function ColumnFromJSONTyped(json: any, ignoreDiscriminator: boolean): Column {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'tableId': json['tableId'],
        'createdBy': json['createdBy'],
        'createdAt': json['createdAt'],
        'lastEditBy': json['lastEditBy'],
        'lastEditAt': json['lastEditAt'],
        'type': json['type'],
        'subtype': json['subtype'],
        'mandatory': json['mandatory'],
        'description': json['description'],
        'orderWeight': json['orderWeight'],
        'numberDefault': json['numberDefault'],
        'numberMin': json['numberMin'],
        'numberMax': json['numberMax'],
        'numberDecimals': json['numberDecimals'],
        'numberPrefix': json['numberPrefix'],
        'numberSuffix': json['numberSuffix'],
        'textDefault': json['textDefault'],
        'textAllowedPattern': json['textAllowedPattern'],
        'textMaxLength': json['textMaxLength'],
        'selectionOptions': json['selectionOptions'],
        'selectionDefault': json['selectionDefault'],
        'datetimeDefault': json['datetimeDefault'],
    };
}

export function ColumnToJSON(value?: Column | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'title': value['title'],
        'tableId': value['tableId'],
        'createdBy': value['createdBy'],
        'createdAt': value['createdAt'],
        'lastEditBy': value['lastEditBy'],
        'lastEditAt': value['lastEditAt'],
        'type': value['type'],
        'subtype': value['subtype'],
        'mandatory': value['mandatory'],
        'description': value['description'],
        'orderWeight': value['orderWeight'],
        'numberDefault': value['numberDefault'],
        'numberMin': value['numberMin'],
        'numberMax': value['numberMax'],
        'numberDecimals': value['numberDecimals'],
        'numberPrefix': value['numberPrefix'],
        'numberSuffix': value['numberSuffix'],
        'textDefault': value['textDefault'],
        'textAllowedPattern': value['textAllowedPattern'],
        'textMaxLength': value['textMaxLength'],
        'selectionOptions': value['selectionOptions'],
        'selectionDefault': value['selectionDefault'],
        'datetimeDefault': value['datetimeDefault'],
    };
}

