/* tslint:disable */
/* eslint-disable */
/**
 * tables
 * Manage data the way you need it.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.ts';
import type { Api1UpdateViewDataParameterOneOf2Value } from './Api1UpdateViewDataParameterOneOf2Value.ts';
import {
    Api1UpdateViewDataParameterOneOf2ValueFromJSON,
    Api1UpdateViewDataParameterOneOf2ValueFromJSONTyped,
    Api1UpdateViewDataParameterOneOf2ValueToJSON,
} from './Api1UpdateViewDataParameterOneOf2Value.ts';
import type { Api1UpdateViewDataParameterOneOf3Value } from './Api1UpdateViewDataParameterOneOf3Value.ts';
import {
    Api1UpdateViewDataParameterOneOf3ValueFromJSON,
    Api1UpdateViewDataParameterOneOf3ValueFromJSONTyped,
    Api1UpdateViewDataParameterOneOf3ValueToJSON,
} from './Api1UpdateViewDataParameterOneOf3Value.ts';
import type { TableOnSharePermissions } from './TableOnSharePermissions.ts';
import {
    TableOnSharePermissionsFromJSON,
    TableOnSharePermissionsFromJSONTyped,
    TableOnSharePermissionsToJSON,
} from './TableOnSharePermissions.ts';

/**
 * 
 * @export
 * @interface View
 */
export interface View {
    /**
     * 
     * @type {number}
     * @memberof View
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof View
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof View
     */
    emoji: string | null;
    /**
     * 
     * @type {number}
     * @memberof View
     */
    tableId: number;
    /**
     * 
     * @type {string}
     * @memberof View
     */
    ownership: string;
    /**
     * 
     * @type {string}
     * @memberof View
     */
    ownerDisplayName: string | null;
    /**
     * 
     * @type {string}
     * @memberof View
     */
    createdBy: string;
    /**
     * 
     * @type {string}
     * @memberof View
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof View
     */
    lastEditBy: string;
    /**
     * 
     * @type {string}
     * @memberof View
     */
    lastEditAt: string;
    /**
     * 
     * @type {string}
     * @memberof View
     */
    description: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof View
     */
    columns: Array<number>;
    /**
     * 
     * @type {Array<Api1UpdateViewDataParameterOneOf2Value>}
     * @memberof View
     */
    sort: Array<Api1UpdateViewDataParameterOneOf2Value>;
    /**
     * 
     * @type {Array<Array<Api1UpdateViewDataParameterOneOf3Value>>}
     * @memberof View
     */
    filter: Array<Array<Api1UpdateViewDataParameterOneOf3Value>>;
    /**
     * 
     * @type {boolean}
     * @memberof View
     */
    isShared: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof View
     */
    favorite: boolean;
    /**
     * 
     * @type {TableOnSharePermissions}
     * @memberof View
     */
    onSharePermissions: TableOnSharePermissions | null;
    /**
     * 
     * @type {boolean}
     * @memberof View
     */
    hasShares: boolean;
    /**
     * 
     * @type {number}
     * @memberof View
     */
    rowsCount: number;
}

/**
 * Check if a given object implements the View interface.
 */
export function instanceOfView(value: object): value is View {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('emoji' in value) || value['emoji'] === undefined) return false;
    if (!('tableId' in value) || value['tableId'] === undefined) return false;
    if (!('ownership' in value) || value['ownership'] === undefined) return false;
    if (!('ownerDisplayName' in value) || value['ownerDisplayName'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('lastEditBy' in value) || value['lastEditBy'] === undefined) return false;
    if (!('lastEditAt' in value) || value['lastEditAt'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('columns' in value) || value['columns'] === undefined) return false;
    if (!('sort' in value) || value['sort'] === undefined) return false;
    if (!('filter' in value) || value['filter'] === undefined) return false;
    if (!('isShared' in value) || value['isShared'] === undefined) return false;
    if (!('favorite' in value) || value['favorite'] === undefined) return false;
    if (!('onSharePermissions' in value) || value['onSharePermissions'] === undefined) return false;
    if (!('hasShares' in value) || value['hasShares'] === undefined) return false;
    if (!('rowsCount' in value) || value['rowsCount'] === undefined) return false;
    return true;
}

export function ViewFromJSON(json: any): View {
    return ViewFromJSONTyped(json, false);
}

export function ViewFromJSONTyped(json: any, ignoreDiscriminator: boolean): View {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'emoji': json['emoji'],
        'tableId': json['tableId'],
        'ownership': json['ownership'],
        'ownerDisplayName': json['ownerDisplayName'],
        'createdBy': json['createdBy'],
        'createdAt': json['createdAt'],
        'lastEditBy': json['lastEditBy'],
        'lastEditAt': json['lastEditAt'],
        'description': json['description'],
        'columns': json['columns'],
        'sort': ((json['sort'] as Array<any>).map(Api1UpdateViewDataParameterOneOf2ValueFromJSON)),
        'filter': json['filter'],
        'isShared': json['isShared'],
        'favorite': json['favorite'],
        'onSharePermissions': TableOnSharePermissionsFromJSON(json['onSharePermissions']),
        'hasShares': json['hasShares'],
        'rowsCount': json['rowsCount'],
    };
}

export function ViewToJSON(value?: View | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'title': value['title'],
        'emoji': value['emoji'],
        'tableId': value['tableId'],
        'ownership': value['ownership'],
        'ownerDisplayName': value['ownerDisplayName'],
        'createdBy': value['createdBy'],
        'createdAt': value['createdAt'],
        'lastEditBy': value['lastEditBy'],
        'lastEditAt': value['lastEditAt'],
        'description': value['description'],
        'columns': value['columns'],
        'sort': ((value['sort'] as Array<any>).map(Api1UpdateViewDataParameterOneOf2ValueToJSON)),
        'filter': value['filter'],
        'isShared': value['isShared'],
        'favorite': value['favorite'],
        'onSharePermissions': TableOnSharePermissionsToJSON(value['onSharePermissions']),
        'hasShares': value['hasShares'],
        'rowsCount': value['rowsCount'],
    };
}

