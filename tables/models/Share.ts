/* tslint:disable */
/* eslint-disable */
/**
 * tables
 * Manage data the way you need it.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.ts';
/**
 * 
 * @export
 * @interface Share
 */
export interface Share {
    /**
     * 
     * @type {number}
     * @memberof Share
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Share
     */
    sender: string;
    /**
     * 
     * @type {string}
     * @memberof Share
     */
    receiver: string;
    /**
     * 
     * @type {string}
     * @memberof Share
     */
    receiverDisplayName: string;
    /**
     * 
     * @type {string}
     * @memberof Share
     */
    receiverType: string;
    /**
     * 
     * @type {number}
     * @memberof Share
     */
    nodeId: number;
    /**
     * 
     * @type {string}
     * @memberof Share
     */
    nodeType: string;
    /**
     * 
     * @type {boolean}
     * @memberof Share
     */
    permissionRead: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Share
     */
    permissionCreate: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Share
     */
    permissionUpdate: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Share
     */
    permissionDelete: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Share
     */
    permissionManage: boolean;
    /**
     * 
     * @type {string}
     * @memberof Share
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof Share
     */
    createdBy: string;
}

/**
 * Check if a given object implements the Share interface.
 */
export function instanceOfShare(value: object): value is Share {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('sender' in value) || value['sender'] === undefined) return false;
    if (!('receiver' in value) || value['receiver'] === undefined) return false;
    if (!('receiverDisplayName' in value) || value['receiverDisplayName'] === undefined) return false;
    if (!('receiverType' in value) || value['receiverType'] === undefined) return false;
    if (!('nodeId' in value) || value['nodeId'] === undefined) return false;
    if (!('nodeType' in value) || value['nodeType'] === undefined) return false;
    if (!('permissionRead' in value) || value['permissionRead'] === undefined) return false;
    if (!('permissionCreate' in value) || value['permissionCreate'] === undefined) return false;
    if (!('permissionUpdate' in value) || value['permissionUpdate'] === undefined) return false;
    if (!('permissionDelete' in value) || value['permissionDelete'] === undefined) return false;
    if (!('permissionManage' in value) || value['permissionManage'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    return true;
}

export function ShareFromJSON(json: any): Share {
    return ShareFromJSONTyped(json, false);
}

export function ShareFromJSONTyped(json: any, ignoreDiscriminator: boolean): Share {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'sender': json['sender'],
        'receiver': json['receiver'],
        'receiverDisplayName': json['receiverDisplayName'],
        'receiverType': json['receiverType'],
        'nodeId': json['nodeId'],
        'nodeType': json['nodeType'],
        'permissionRead': json['permissionRead'],
        'permissionCreate': json['permissionCreate'],
        'permissionUpdate': json['permissionUpdate'],
        'permissionDelete': json['permissionDelete'],
        'permissionManage': json['permissionManage'],
        'createdAt': json['createdAt'],
        'createdBy': json['createdBy'],
    };
}

export function ShareToJSON(value?: Share | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'sender': value['sender'],
        'receiver': value['receiver'],
        'receiverDisplayName': value['receiverDisplayName'],
        'receiverType': value['receiverType'],
        'nodeId': value['nodeId'],
        'nodeType': value['nodeType'],
        'permissionRead': value['permissionRead'],
        'permissionCreate': value['permissionCreate'],
        'permissionUpdate': value['permissionUpdate'],
        'permissionDelete': value['permissionDelete'],
        'permissionManage': value['permissionManage'],
        'createdAt': value['createdAt'],
        'createdBy': value['createdBy'],
    };
}

