/* tslint:disable */
/* eslint-disable */
/**
 * core-full
 * Core functionality of Nextcloud
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  AppPasswordConfirmUserPassword200ResponseOcsData,
  AppPasswordConfirmUserPasswordRequest,
} from '../models/index.ts';
import {
    AppPasswordConfirmUserPassword200ResponseOcsDataFromJSON,
    AppPasswordConfirmUserPassword200ResponseOcsDataToJSON,
    AppPasswordConfirmUserPasswordRequestFromJSON,
    AppPasswordConfirmUserPasswordRequestToJSON,
} from '../models/index.ts';

export interface LoginConfirmPasswordRequest {
    appPasswordConfirmUserPasswordRequest: AppPasswordConfirmUserPasswordRequest;
}

/**
 * 
 */
export class LoginApi extends runtime.BaseAPI {

    /**
     * Confirm the user password
     */
    async loginConfirmPasswordRaw(requestParameters: LoginConfirmPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPasswordConfirmUserPassword200ResponseOcsData>> {
        if (requestParameters['appPasswordConfirmUserPasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'appPasswordConfirmUserPasswordRequest',
                'Required parameter "appPasswordConfirmUserPasswordRequest" was null or undefined when calling loginConfirmPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/index.php/login/confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppPasswordConfirmUserPasswordRequestToJSON(requestParameters['appPasswordConfirmUserPasswordRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppPasswordConfirmUserPassword200ResponseOcsDataFromJSON(jsonValue));
    }

    /**
     * Confirm the user password
     */
    async loginConfirmPassword(requestParameters: LoginConfirmPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPasswordConfirmUserPassword200ResponseOcsData> {
        const response = await this.loginConfirmPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
