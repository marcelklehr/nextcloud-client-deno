/* tslint:disable */
/* eslint-disable */
/**
 * core-full
 * Core functionality of Nextcloud
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  TaskProcessingApiDeleteTask200Response,
  TaskProcessingApiGetNextScheduledTask200Response,
  TaskProcessingApiGetNextScheduledTaskRequest,
  TaskProcessingApiListTasksByApp200Response,
  TaskProcessingApiListTasksByAppRequest,
  TaskProcessingApiListTasksRequest,
  TaskProcessingApiSchedule200Response,
  TaskProcessingApiSchedule500Response,
  TaskProcessingApiScheduleRequest,
  TaskProcessingApiSetFileContentsExApp201Response,
  TaskProcessingApiSetProgressRequest,
  TaskProcessingApiSetResultRequest,
  TaskProcessingApiTaskTypes200Response,
} from '../models/index.ts';
import {
    TaskProcessingApiDeleteTask200ResponseFromJSON,
    TaskProcessingApiDeleteTask200ResponseToJSON,
    TaskProcessingApiGetNextScheduledTask200ResponseFromJSON,
    TaskProcessingApiGetNextScheduledTask200ResponseToJSON,
    TaskProcessingApiGetNextScheduledTaskRequestFromJSON,
    TaskProcessingApiGetNextScheduledTaskRequestToJSON,
    TaskProcessingApiListTasksByApp200ResponseFromJSON,
    TaskProcessingApiListTasksByApp200ResponseToJSON,
    TaskProcessingApiListTasksByAppRequestFromJSON,
    TaskProcessingApiListTasksByAppRequestToJSON,
    TaskProcessingApiListTasksRequestFromJSON,
    TaskProcessingApiListTasksRequestToJSON,
    TaskProcessingApiSchedule200ResponseFromJSON,
    TaskProcessingApiSchedule200ResponseToJSON,
    TaskProcessingApiSchedule500ResponseFromJSON,
    TaskProcessingApiSchedule500ResponseToJSON,
    TaskProcessingApiScheduleRequestFromJSON,
    TaskProcessingApiScheduleRequestToJSON,
    TaskProcessingApiSetFileContentsExApp201ResponseFromJSON,
    TaskProcessingApiSetFileContentsExApp201ResponseToJSON,
    TaskProcessingApiSetProgressRequestFromJSON,
    TaskProcessingApiSetProgressRequestToJSON,
    TaskProcessingApiSetResultRequestFromJSON,
    TaskProcessingApiSetResultRequestToJSON,
    TaskProcessingApiTaskTypes200ResponseFromJSON,
    TaskProcessingApiTaskTypes200ResponseToJSON,
} from '../models/index.ts';

export interface TaskProcessingApiCancelTaskRequest {
    taskId: number;
    oCSAPIRequest: boolean;
}

export interface TaskProcessingApiDeleteTaskRequest {
    id: number;
    oCSAPIRequest: boolean;
}

export interface TaskProcessingApiGetFileContentsRequest {
    taskId: number;
    fileId: number;
    oCSAPIRequest: boolean;
}

export interface TaskProcessingApiGetFileContentsExAppRequest {
    taskId: number;
    fileId: number;
    oCSAPIRequest: boolean;
}

export interface TaskProcessingApiGetNextScheduledTaskOperationRequest {
    oCSAPIRequest: boolean;
    taskProcessingApiGetNextScheduledTaskRequest: TaskProcessingApiGetNextScheduledTaskRequest;
}

export interface TaskProcessingApiGetTaskRequest {
    id: number;
    oCSAPIRequest: boolean;
}

export interface TaskProcessingApiListTasksOperationRequest {
    oCSAPIRequest: boolean;
    taskProcessingApiListTasksRequest?: TaskProcessingApiListTasksRequest;
}

export interface TaskProcessingApiListTasksByAppOperationRequest {
    appId: string;
    oCSAPIRequest: boolean;
    taskProcessingApiListTasksByAppRequest?: TaskProcessingApiListTasksByAppRequest;
}

export interface TaskProcessingApiScheduleOperationRequest {
    oCSAPIRequest: boolean;
    taskProcessingApiScheduleRequest: TaskProcessingApiScheduleRequest;
}

export interface TaskProcessingApiSetFileContentsExAppRequest {
    taskId: number;
    oCSAPIRequest: boolean;
}

export interface TaskProcessingApiSetProgressOperationRequest {
    taskId: number;
    oCSAPIRequest: boolean;
    taskProcessingApiSetProgressRequest: TaskProcessingApiSetProgressRequest;
}

export interface TaskProcessingApiSetResultOperationRequest {
    taskId: number;
    oCSAPIRequest: boolean;
    taskProcessingApiSetResultRequest?: TaskProcessingApiSetResultRequest;
}

export interface TaskProcessingApiTaskTypesRequest {
    oCSAPIRequest: boolean;
}

/**
 * 
 */
export class TaskProcessingApiApi extends runtime.BaseAPI {

    /**
     * Cancels a task
     */
    async taskProcessingApiCancelTaskRaw(requestParameters: TaskProcessingApiCancelTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskProcessingApiSchedule200Response>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling taskProcessingApiCancelTask().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling taskProcessingApiCancelTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/taskprocessing/tasks/{taskId}/cancel`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskProcessingApiSchedule200ResponseFromJSON(jsonValue));
    }

    /**
     * Cancels a task
     */
    async taskProcessingApiCancelTask(requestParameters: TaskProcessingApiCancelTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskProcessingApiSchedule200Response> {
        const response = await this.taskProcessingApiCancelTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a task
     */
    async taskProcessingApiDeleteTaskRaw(requestParameters: TaskProcessingApiDeleteTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskProcessingApiDeleteTask200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling taskProcessingApiDeleteTask().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling taskProcessingApiDeleteTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/taskprocessing/task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskProcessingApiDeleteTask200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a task
     */
    async taskProcessingApiDeleteTask(requestParameters: TaskProcessingApiDeleteTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskProcessingApiDeleteTask200Response> {
        const response = await this.taskProcessingApiDeleteTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the contents of a file referenced in a task
     */
    async taskProcessingApiGetFileContentsRaw(requestParameters: TaskProcessingApiGetFileContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling taskProcessingApiGetFileContents().'
            );
        }

        if (requestParameters['fileId'] == null) {
            throw new runtime.RequiredError(
                'fileId',
                'Required parameter "fileId" was null or undefined when calling taskProcessingApiGetFileContents().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling taskProcessingApiGetFileContents().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/taskprocessing/tasks/{taskId}/file/{fileId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))).replace(`{${"fileId"}}`, encodeURIComponent(String(requestParameters['fileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Returns the contents of a file referenced in a task
     */
    async taskProcessingApiGetFileContents(requestParameters: TaskProcessingApiGetFileContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.taskProcessingApiGetFileContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires admin access
     * Returns the contents of a file referenced in a task(ExApp route version)
     */
    async taskProcessingApiGetFileContentsExAppRaw(requestParameters: TaskProcessingApiGetFileContentsExAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling taskProcessingApiGetFileContentsExApp().'
            );
        }

        if (requestParameters['fileId'] == null) {
            throw new runtime.RequiredError(
                'fileId',
                'Required parameter "fileId" was null or undefined when calling taskProcessingApiGetFileContentsExApp().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling taskProcessingApiGetFileContentsExApp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/taskprocessing/tasks_provider/{taskId}/file/{fileId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))).replace(`{${"fileId"}}`, encodeURIComponent(String(requestParameters['fileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * This endpoint requires admin access
     * Returns the contents of a file referenced in a task(ExApp route version)
     */
    async taskProcessingApiGetFileContentsExApp(requestParameters: TaskProcessingApiGetFileContentsExAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.taskProcessingApiGetFileContentsExAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires admin access
     * Returns the next scheduled task for the taskTypeId
     */
    async taskProcessingApiGetNextScheduledTaskRaw(requestParameters: TaskProcessingApiGetNextScheduledTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskProcessingApiGetNextScheduledTask200Response>> {
        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling taskProcessingApiGetNextScheduledTask().'
            );
        }

        if (requestParameters['taskProcessingApiGetNextScheduledTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'taskProcessingApiGetNextScheduledTaskRequest',
                'Required parameter "taskProcessingApiGetNextScheduledTaskRequest" was null or undefined when calling taskProcessingApiGetNextScheduledTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/taskprocessing/tasks_provider/next`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: TaskProcessingApiGetNextScheduledTaskRequestToJSON(requestParameters['taskProcessingApiGetNextScheduledTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskProcessingApiGetNextScheduledTask200ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint requires admin access
     * Returns the next scheduled task for the taskTypeId
     */
    async taskProcessingApiGetNextScheduledTask(requestParameters: TaskProcessingApiGetNextScheduledTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskProcessingApiGetNextScheduledTask200Response | null | undefined > {
        const response = await this.taskProcessingApiGetNextScheduledTaskRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Tasks are removed 1 week after receiving their last update
     * Gets a task including status and result
     */
    async taskProcessingApiGetTaskRaw(requestParameters: TaskProcessingApiGetTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskProcessingApiSchedule200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling taskProcessingApiGetTask().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling taskProcessingApiGetTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/taskprocessing/task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskProcessingApiSchedule200ResponseFromJSON(jsonValue));
    }

    /**
     * Tasks are removed 1 week after receiving their last update
     * Gets a task including status and result
     */
    async taskProcessingApiGetTask(requestParameters: TaskProcessingApiGetTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskProcessingApiSchedule200Response> {
        const response = await this.taskProcessingApiGetTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns tasks for the current user filtered by the optional taskType and optional customId
     */
    async taskProcessingApiListTasksRaw(requestParameters: TaskProcessingApiListTasksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskProcessingApiListTasksByApp200Response>> {
        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling taskProcessingApiListTasks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/taskprocessing/tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: TaskProcessingApiListTasksRequestToJSON(requestParameters['taskProcessingApiListTasksRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskProcessingApiListTasksByApp200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns tasks for the current user filtered by the optional taskType and optional customId
     */
    async taskProcessingApiListTasks(requestParameters: TaskProcessingApiListTasksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskProcessingApiListTasksByApp200Response> {
        const response = await this.taskProcessingApiListTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns tasks for the current user filtered by the appId and optional customId
     */
    async taskProcessingApiListTasksByAppRaw(requestParameters: TaskProcessingApiListTasksByAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskProcessingApiListTasksByApp200Response>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling taskProcessingApiListTasksByApp().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling taskProcessingApiListTasksByApp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/taskprocessing/tasks/app/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: TaskProcessingApiListTasksByAppRequestToJSON(requestParameters['taskProcessingApiListTasksByAppRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskProcessingApiListTasksByApp200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns tasks for the current user filtered by the appId and optional customId
     */
    async taskProcessingApiListTasksByApp(requestParameters: TaskProcessingApiListTasksByAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskProcessingApiListTasksByApp200Response> {
        const response = await this.taskProcessingApiListTasksByAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Schedules a task
     */
    async taskProcessingApiScheduleRaw(requestParameters: TaskProcessingApiScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskProcessingApiSchedule200Response>> {
        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling taskProcessingApiSchedule().'
            );
        }

        if (requestParameters['taskProcessingApiScheduleRequest'] == null) {
            throw new runtime.RequiredError(
                'taskProcessingApiScheduleRequest',
                'Required parameter "taskProcessingApiScheduleRequest" was null or undefined when calling taskProcessingApiSchedule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/taskprocessing/schedule`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskProcessingApiScheduleRequestToJSON(requestParameters['taskProcessingApiScheduleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskProcessingApiSchedule200ResponseFromJSON(jsonValue));
    }

    /**
     * Schedules a task
     */
    async taskProcessingApiSchedule(requestParameters: TaskProcessingApiScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskProcessingApiSchedule200Response> {
        const response = await this.taskProcessingApiScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use field \'file\' for the file upload This endpoint requires admin access
     * Upload a file so it can be referenced in a task result (ExApp route version)
     */
    async taskProcessingApiSetFileContentsExAppRaw(requestParameters: TaskProcessingApiSetFileContentsExAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskProcessingApiSetFileContentsExApp201Response>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling taskProcessingApiSetFileContentsExApp().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling taskProcessingApiSetFileContentsExApp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/taskprocessing/tasks_provider/{taskId}/file`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskProcessingApiSetFileContentsExApp201ResponseFromJSON(jsonValue));
    }

    /**
     * Use field \'file\' for the file upload This endpoint requires admin access
     * Upload a file so it can be referenced in a task result (ExApp route version)
     */
    async taskProcessingApiSetFileContentsExApp(requestParameters: TaskProcessingApiSetFileContentsExAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskProcessingApiSetFileContentsExApp201Response> {
        const response = await this.taskProcessingApiSetFileContentsExAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires admin access
     * Sets the task progress
     */
    async taskProcessingApiSetProgressRaw(requestParameters: TaskProcessingApiSetProgressOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskProcessingApiSchedule200Response>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling taskProcessingApiSetProgress().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling taskProcessingApiSetProgress().'
            );
        }

        if (requestParameters['taskProcessingApiSetProgressRequest'] == null) {
            throw new runtime.RequiredError(
                'taskProcessingApiSetProgressRequest',
                'Required parameter "taskProcessingApiSetProgressRequest" was null or undefined when calling taskProcessingApiSetProgress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/taskprocessing/tasks_provider/{taskId}/progress`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskProcessingApiSetProgressRequestToJSON(requestParameters['taskProcessingApiSetProgressRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskProcessingApiSchedule200ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint requires admin access
     * Sets the task progress
     */
    async taskProcessingApiSetProgress(requestParameters: TaskProcessingApiSetProgressOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskProcessingApiSchedule200Response> {
        const response = await this.taskProcessingApiSetProgressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires admin access
     * Sets the task result
     */
    async taskProcessingApiSetResultRaw(requestParameters: TaskProcessingApiSetResultOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskProcessingApiSchedule200Response>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling taskProcessingApiSetResult().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling taskProcessingApiSetResult().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/taskprocessing/tasks_provider/{taskId}/result`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskProcessingApiSetResultRequestToJSON(requestParameters['taskProcessingApiSetResultRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskProcessingApiSchedule200ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint requires admin access
     * Sets the task result
     */
    async taskProcessingApiSetResult(requestParameters: TaskProcessingApiSetResultOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskProcessingApiSchedule200Response> {
        const response = await this.taskProcessingApiSetResultRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all available TaskProcessing task types
     */
    async taskProcessingApiTaskTypesRaw(requestParameters: TaskProcessingApiTaskTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskProcessingApiTaskTypes200Response>> {
        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling taskProcessingApiTaskTypes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/taskprocessing/tasktypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskProcessingApiTaskTypes200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all available TaskProcessing task types
     */
    async taskProcessingApiTaskTypes(requestParameters: TaskProcessingApiTaskTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskProcessingApiTaskTypes200Response> {
        const response = await this.taskProcessingApiTaskTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
