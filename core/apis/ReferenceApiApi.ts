/* tslint:disable */
/* eslint-disable */
/**
 * core
 * Core functionality of Nextcloud
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  ReferenceApiExtract200Response,
  ReferenceApiGetProvidersInfo200Response,
  ReferenceApiTouchProvider200Response,
} from '../models/index.ts';
import {
    ReferenceApiExtract200ResponseFromJSON,
    ReferenceApiExtract200ResponseToJSON,
    ReferenceApiGetProvidersInfo200ResponseFromJSON,
    ReferenceApiGetProvidersInfo200ResponseToJSON,
    ReferenceApiTouchProvider200ResponseFromJSON,
    ReferenceApiTouchProvider200ResponseToJSON,
} from '../models/index.ts';

export interface ReferenceApiExtractRequest {
    text: string;
    oCSAPIRequest: boolean;
    resolve?: ReferenceApiExtractResolveEnum;
    limit?: number;
}

export interface ReferenceApiGetProvidersInfoRequest {
    oCSAPIRequest: boolean;
}

export interface ReferenceApiResolveRequest {
    references: Array<string>;
    oCSAPIRequest: boolean;
    limit?: number;
}

export interface ReferenceApiResolveOneRequest {
    reference: string;
    oCSAPIRequest: boolean;
}

export interface ReferenceApiTouchProviderRequest {
    providerId: string;
    oCSAPIRequest: boolean;
    timestamp?: number;
}

/**
 * 
 */
export class ReferenceApiApi extends runtime.BaseAPI {

    /**
     * Extract references from a text
     */
    async referenceApiExtractRaw(requestParameters: ReferenceApiExtractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferenceApiExtract200Response>> {
        if (requestParameters['text'] == null) {
            throw new runtime.RequiredError(
                'text',
                'Required parameter "text" was null or undefined when calling referenceApiExtract().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling referenceApiExtract().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['text'] != null) {
            queryParameters['text'] = requestParameters['text'];
        }

        if (requestParameters['resolve'] != null) {
            queryParameters['resolve'] = requestParameters['resolve'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/references/extract`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceApiExtract200ResponseFromJSON(jsonValue));
    }

    /**
     * Extract references from a text
     */
    async referenceApiExtract(requestParameters: ReferenceApiExtractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferenceApiExtract200Response> {
        const response = await this.referenceApiExtractRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the providers
     */
    async referenceApiGetProvidersInfoRaw(requestParameters: ReferenceApiGetProvidersInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferenceApiGetProvidersInfo200Response>> {
        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling referenceApiGetProvidersInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/references/providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceApiGetProvidersInfo200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the providers
     */
    async referenceApiGetProvidersInfo(requestParameters: ReferenceApiGetProvidersInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferenceApiGetProvidersInfo200Response> {
        const response = await this.referenceApiGetProvidersInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resolve multiple references
     */
    async referenceApiResolveRaw(requestParameters: ReferenceApiResolveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferenceApiExtract200Response>> {
        if (requestParameters['references'] == null) {
            throw new runtime.RequiredError(
                'references',
                'Required parameter "references" was null or undefined when calling referenceApiResolve().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling referenceApiResolve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['references'] != null) {
            queryParameters['references[]'] = requestParameters['references'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/references/resolve`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceApiExtract200ResponseFromJSON(jsonValue));
    }

    /**
     * Resolve multiple references
     */
    async referenceApiResolve(requestParameters: ReferenceApiResolveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferenceApiExtract200Response> {
        const response = await this.referenceApiResolveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resolve a reference
     */
    async referenceApiResolveOneRaw(requestParameters: ReferenceApiResolveOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferenceApiExtract200Response>> {
        if (requestParameters['reference'] == null) {
            throw new runtime.RequiredError(
                'reference',
                'Required parameter "reference" was null or undefined when calling referenceApiResolveOne().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling referenceApiResolveOne().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['reference'] != null) {
            queryParameters['reference'] = requestParameters['reference'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/references/resolve`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceApiExtract200ResponseFromJSON(jsonValue));
    }

    /**
     * Resolve a reference
     */
    async referenceApiResolveOne(requestParameters: ReferenceApiResolveOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferenceApiExtract200Response> {
        const response = await this.referenceApiResolveOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Touch a provider
     */
    async referenceApiTouchProviderRaw(requestParameters: ReferenceApiTouchProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferenceApiTouchProvider200Response>> {
        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling referenceApiTouchProvider().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling referenceApiTouchProvider().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/references/provider/{providerId}`.replace(`{${"providerId"}}`, encodeURIComponent(String(requestParameters['providerId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceApiTouchProvider200ResponseFromJSON(jsonValue));
    }

    /**
     * Touch a provider
     */
    async referenceApiTouchProvider(requestParameters: ReferenceApiTouchProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferenceApiTouchProvider200Response> {
        const response = await this.referenceApiTouchProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ReferenceApiExtractResolveEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type ReferenceApiExtractResolveEnum = typeof ReferenceApiExtractResolveEnum[keyof typeof ReferenceApiExtractResolveEnum];
