/* tslint:disable */
/* eslint-disable */
/**
 * core-full
 * Core functionality of Nextcloud
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  ReferenceApiExtract200Response,
  ReferenceApiExtractPublicRequest,
  ReferenceApiExtractRequest,
  ReferenceApiGetProvidersInfo200Response,
  ReferenceApiResolveOnePublicRequest,
  ReferenceApiResolveOneRequest,
  ReferenceApiResolvePublicRequest,
  ReferenceApiResolveRequest,
  ReferenceApiTouchProvider200Response,
  ReferenceApiTouchProviderRequest,
} from '../models/index.ts';
import {
    ReferenceApiExtract200ResponseFromJSON,
    ReferenceApiExtract200ResponseToJSON,
    ReferenceApiExtractPublicRequestFromJSON,
    ReferenceApiExtractPublicRequestToJSON,
    ReferenceApiExtractRequestFromJSON,
    ReferenceApiExtractRequestToJSON,
    ReferenceApiGetProvidersInfo200ResponseFromJSON,
    ReferenceApiGetProvidersInfo200ResponseToJSON,
    ReferenceApiResolveOnePublicRequestFromJSON,
    ReferenceApiResolveOnePublicRequestToJSON,
    ReferenceApiResolveOneRequestFromJSON,
    ReferenceApiResolveOneRequestToJSON,
    ReferenceApiResolvePublicRequestFromJSON,
    ReferenceApiResolvePublicRequestToJSON,
    ReferenceApiResolveRequestFromJSON,
    ReferenceApiResolveRequestToJSON,
    ReferenceApiTouchProvider200ResponseFromJSON,
    ReferenceApiTouchProvider200ResponseToJSON,
    ReferenceApiTouchProviderRequestFromJSON,
    ReferenceApiTouchProviderRequestToJSON,
} from '../models/index.ts';

export interface ReferenceApiExtractOperationRequest {
    oCSAPIRequest: boolean;
    referenceApiExtractRequest: ReferenceApiExtractRequest;
}

export interface ReferenceApiExtractPublicOperationRequest {
    oCSAPIRequest: boolean;
    referenceApiExtractPublicRequest: ReferenceApiExtractPublicRequest;
}

export interface ReferenceApiGetProvidersInfoRequest {
    oCSAPIRequest: boolean;
}

export interface ReferenceApiResolveOperationRequest {
    oCSAPIRequest: boolean;
    referenceApiResolveRequest: ReferenceApiResolveRequest;
}

export interface ReferenceApiResolveOneOperationRequest {
    oCSAPIRequest: boolean;
    referenceApiResolveOneRequest: ReferenceApiResolveOneRequest;
}

export interface ReferenceApiResolveOnePublicOperationRequest {
    oCSAPIRequest: boolean;
    referenceApiResolveOnePublicRequest: ReferenceApiResolveOnePublicRequest;
}

export interface ReferenceApiResolvePublicOperationRequest {
    oCSAPIRequest: boolean;
    referenceApiResolvePublicRequest: ReferenceApiResolvePublicRequest;
}

export interface ReferenceApiTouchProviderOperationRequest {
    providerId: string;
    oCSAPIRequest: boolean;
    referenceApiTouchProviderRequest?: ReferenceApiTouchProviderRequest;
}

/**
 * 
 */
export class ReferenceApiApi extends runtime.BaseAPI {

    /**
     * Extract references from a text
     */
    async referenceApiExtractRaw(requestParameters: ReferenceApiExtractOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferenceApiExtract200Response>> {
        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling referenceApiExtract().'
            );
        }

        if (requestParameters['referenceApiExtractRequest'] == null) {
            throw new runtime.RequiredError(
                'referenceApiExtractRequest',
                'Required parameter "referenceApiExtractRequest" was null or undefined when calling referenceApiExtract().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/references/extract`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReferenceApiExtractRequestToJSON(requestParameters['referenceApiExtractRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceApiExtract200ResponseFromJSON(jsonValue));
    }

    /**
     * Extract references from a text
     */
    async referenceApiExtract(requestParameters: ReferenceApiExtractOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferenceApiExtract200Response> {
        const response = await this.referenceApiExtractRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Extract references from a text
     */
    async referenceApiExtractPublicRaw(requestParameters: ReferenceApiExtractPublicOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferenceApiExtract200Response>> {
        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling referenceApiExtractPublic().'
            );
        }

        if (requestParameters['referenceApiExtractPublicRequest'] == null) {
            throw new runtime.RequiredError(
                'referenceApiExtractPublicRequest',
                'Required parameter "referenceApiExtractPublicRequest" was null or undefined when calling referenceApiExtractPublic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/references/extractPublic`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReferenceApiExtractPublicRequestToJSON(requestParameters['referenceApiExtractPublicRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceApiExtract200ResponseFromJSON(jsonValue));
    }

    /**
     * Extract references from a text
     */
    async referenceApiExtractPublic(requestParameters: ReferenceApiExtractPublicOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferenceApiExtract200Response> {
        const response = await this.referenceApiExtractPublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the providers
     */
    async referenceApiGetProvidersInfoRaw(requestParameters: ReferenceApiGetProvidersInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferenceApiGetProvidersInfo200Response>> {
        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling referenceApiGetProvidersInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/references/providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceApiGetProvidersInfo200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the providers
     */
    async referenceApiGetProvidersInfo(requestParameters: ReferenceApiGetProvidersInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferenceApiGetProvidersInfo200Response> {
        const response = await this.referenceApiGetProvidersInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resolve multiple references
     */
    async referenceApiResolveRaw(requestParameters: ReferenceApiResolveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferenceApiExtract200Response>> {
        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling referenceApiResolve().'
            );
        }

        if (requestParameters['referenceApiResolveRequest'] == null) {
            throw new runtime.RequiredError(
                'referenceApiResolveRequest',
                'Required parameter "referenceApiResolveRequest" was null or undefined when calling referenceApiResolve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/references/resolve`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReferenceApiResolveRequestToJSON(requestParameters['referenceApiResolveRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceApiExtract200ResponseFromJSON(jsonValue));
    }

    /**
     * Resolve multiple references
     */
    async referenceApiResolve(requestParameters: ReferenceApiResolveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferenceApiExtract200Response> {
        const response = await this.referenceApiResolveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resolve a reference
     */
    async referenceApiResolveOneRaw(requestParameters: ReferenceApiResolveOneOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferenceApiExtract200Response>> {
        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling referenceApiResolveOne().'
            );
        }

        if (requestParameters['referenceApiResolveOneRequest'] == null) {
            throw new runtime.RequiredError(
                'referenceApiResolveOneRequest',
                'Required parameter "referenceApiResolveOneRequest" was null or undefined when calling referenceApiResolveOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/references/resolve`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: ReferenceApiResolveOneRequestToJSON(requestParameters['referenceApiResolveOneRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceApiExtract200ResponseFromJSON(jsonValue));
    }

    /**
     * Resolve a reference
     */
    async referenceApiResolveOne(requestParameters: ReferenceApiResolveOneOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferenceApiExtract200Response> {
        const response = await this.referenceApiResolveOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resolve from a public page
     */
    async referenceApiResolveOnePublicRaw(requestParameters: ReferenceApiResolveOnePublicOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferenceApiExtract200Response>> {
        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling referenceApiResolveOnePublic().'
            );
        }

        if (requestParameters['referenceApiResolveOnePublicRequest'] == null) {
            throw new runtime.RequiredError(
                'referenceApiResolveOnePublicRequest',
                'Required parameter "referenceApiResolveOnePublicRequest" was null or undefined when calling referenceApiResolveOnePublic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/references/resolvePublic`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: ReferenceApiResolveOnePublicRequestToJSON(requestParameters['referenceApiResolveOnePublicRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceApiExtract200ResponseFromJSON(jsonValue));
    }

    /**
     * Resolve from a public page
     */
    async referenceApiResolveOnePublic(requestParameters: ReferenceApiResolveOnePublicOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferenceApiExtract200Response> {
        const response = await this.referenceApiResolveOnePublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resolve multiple references from a public page
     */
    async referenceApiResolvePublicRaw(requestParameters: ReferenceApiResolvePublicOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferenceApiExtract200Response>> {
        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling referenceApiResolvePublic().'
            );
        }

        if (requestParameters['referenceApiResolvePublicRequest'] == null) {
            throw new runtime.RequiredError(
                'referenceApiResolvePublicRequest',
                'Required parameter "referenceApiResolvePublicRequest" was null or undefined when calling referenceApiResolvePublic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/references/resolvePublic`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReferenceApiResolvePublicRequestToJSON(requestParameters['referenceApiResolvePublicRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceApiExtract200ResponseFromJSON(jsonValue));
    }

    /**
     * Resolve multiple references from a public page
     */
    async referenceApiResolvePublic(requestParameters: ReferenceApiResolvePublicOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferenceApiExtract200Response> {
        const response = await this.referenceApiResolvePublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Touch a provider
     */
    async referenceApiTouchProviderRaw(requestParameters: ReferenceApiTouchProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferenceApiTouchProvider200Response>> {
        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling referenceApiTouchProvider().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling referenceApiTouchProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/references/provider/{providerId}`.replace(`{${"providerId"}}`, encodeURIComponent(String(requestParameters['providerId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReferenceApiTouchProviderRequestToJSON(requestParameters['referenceApiTouchProviderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceApiTouchProvider200ResponseFromJSON(jsonValue));
    }

    /**
     * Touch a provider
     */
    async referenceApiTouchProvider(requestParameters: ReferenceApiTouchProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferenceApiTouchProvider200Response> {
        const response = await this.referenceApiTouchProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
