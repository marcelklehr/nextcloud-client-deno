/* tslint:disable */
/* eslint-disable */
/**
 * core-full
 * Core functionality of Nextcloud
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  AvatarGetAvatarDarkRequest,
} from '../models/index.ts';
import {
    AvatarGetAvatarDarkRequestFromJSON,
    AvatarGetAvatarDarkRequestToJSON,
} from '../models/index.ts';

export interface AvatarGetAvatarRequest {
    userId: string;
    size: number;
    avatarGetAvatarDarkRequest?: AvatarGetAvatarDarkRequest;
}

export interface AvatarGetAvatarDarkOperationRequest {
    userId: string;
    size: number;
    avatarGetAvatarDarkRequest?: AvatarGetAvatarDarkRequest;
}

/**
 * 
 */
export class AvatarApi extends runtime.BaseAPI {

    /**
     * Get the avatar
     */
    async avatarGetAvatarRaw(requestParameters: AvatarGetAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling avatarGetAvatar().'
            );
        }

        if (requestParameters['size'] == null) {
            throw new runtime.RequiredError(
                'size',
                'Required parameter "size" was null or undefined when calling avatarGetAvatar().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/index.php/avatar/{userId}/{size}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"size"}}`, encodeURIComponent(String(requestParameters['size']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: AvatarGetAvatarDarkRequestToJSON(requestParameters['avatarGetAvatarDarkRequest']),
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get the avatar
     */
    async avatarGetAvatar(requestParameters: AvatarGetAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.avatarGetAvatarRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the dark avatar
     */
    async avatarGetAvatarDarkRaw(requestParameters: AvatarGetAvatarDarkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling avatarGetAvatarDark().'
            );
        }

        if (requestParameters['size'] == null) {
            throw new runtime.RequiredError(
                'size',
                'Required parameter "size" was null or undefined when calling avatarGetAvatarDark().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/index.php/avatar/{userId}/{size}/dark`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"size"}}`, encodeURIComponent(String(requestParameters['size']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: AvatarGetAvatarDarkRequestToJSON(requestParameters['avatarGetAvatarDarkRequest']),
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get the dark avatar
     */
    async avatarGetAvatarDark(requestParameters: AvatarGetAvatarDarkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.avatarGetAvatarDarkRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
