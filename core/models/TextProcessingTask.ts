/* tslint:disable */
/* eslint-disable */
/**
 * core-full
 * Core functionality of Nextcloud
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.ts';
/**
 * 
 * @export
 * @interface TextProcessingTask
 */
export interface TextProcessingTask {
    /**
     * 
     * @type {number}
     * @memberof TextProcessingTask
     */
    id: number | null;
    /**
     * 
     * @type {string}
     * @memberof TextProcessingTask
     */
    type: string;
    /**
     * 
     * @type {number}
     * @memberof TextProcessingTask
     */
    status: TextProcessingTaskStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof TextProcessingTask
     */
    userId: string | null;
    /**
     * 
     * @type {string}
     * @memberof TextProcessingTask
     */
    appId: string;
    /**
     * 
     * @type {string}
     * @memberof TextProcessingTask
     */
    input: string;
    /**
     * 
     * @type {string}
     * @memberof TextProcessingTask
     */
    output: string | null;
    /**
     * 
     * @type {string}
     * @memberof TextProcessingTask
     */
    identifier: string;
    /**
     * 
     * @type {number}
     * @memberof TextProcessingTask
     */
    completionExpectedAt: number | null;
}


/**
 * @export
 */
export const TextProcessingTaskStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;
export type TextProcessingTaskStatusEnum = typeof TextProcessingTaskStatusEnum[keyof typeof TextProcessingTaskStatusEnum];


/**
 * Check if a given object implements the TextProcessingTask interface.
 */
export function instanceOfTextProcessingTask(value: object): value is TextProcessingTask {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('appId' in value) || value['appId'] === undefined) return false;
    if (!('input' in value) || value['input'] === undefined) return false;
    if (!('output' in value) || value['output'] === undefined) return false;
    if (!('identifier' in value) || value['identifier'] === undefined) return false;
    if (!('completionExpectedAt' in value) || value['completionExpectedAt'] === undefined) return false;
    return true;
}

export function TextProcessingTaskFromJSON(json: any): TextProcessingTask {
    return TextProcessingTaskFromJSONTyped(json, false);
}

export function TextProcessingTaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): TextProcessingTask {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'status': json['status'],
        'userId': json['userId'],
        'appId': json['appId'],
        'input': json['input'],
        'output': json['output'],
        'identifier': json['identifier'],
        'completionExpectedAt': json['completionExpectedAt'],
    };
}

export function TextProcessingTaskToJSON(value?: TextProcessingTask | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'type': value['type'],
        'status': value['status'],
        'userId': value['userId'],
        'appId': value['appId'],
        'input': value['input'],
        'output': value['output'],
        'identifier': value['identifier'],
        'completionExpectedAt': value['completionExpectedAt'],
    };
}

