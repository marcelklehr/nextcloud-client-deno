/* tslint:disable */
/* eslint-disable */
/**
 * core-full
 * Core functionality of Nextcloud
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.ts';
/**
 * 
 * @export
 * @interface Status
 */
export interface Status {
    /**
     * 
     * @type {boolean}
     * @memberof Status
     */
    installed: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Status
     */
    maintenance: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Status
     */
    needsDbUpgrade: boolean;
    /**
     * 
     * @type {string}
     * @memberof Status
     */
    version: string;
    /**
     * 
     * @type {string}
     * @memberof Status
     */
    versionstring: string;
    /**
     * 
     * @type {string}
     * @memberof Status
     */
    edition: string;
    /**
     * 
     * @type {string}
     * @memberof Status
     */
    productname: string;
    /**
     * 
     * @type {boolean}
     * @memberof Status
     */
    extendedSupport: boolean;
}

/**
 * Check if a given object implements the Status interface.
 */
export function instanceOfStatus(value: object): value is Status {
    if (!('installed' in value) || value['installed'] === undefined) return false;
    if (!('maintenance' in value) || value['maintenance'] === undefined) return false;
    if (!('needsDbUpgrade' in value) || value['needsDbUpgrade'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('versionstring' in value) || value['versionstring'] === undefined) return false;
    if (!('edition' in value) || value['edition'] === undefined) return false;
    if (!('productname' in value) || value['productname'] === undefined) return false;
    if (!('extendedSupport' in value) || value['extendedSupport'] === undefined) return false;
    return true;
}

export function StatusFromJSON(json: any): Status {
    return StatusFromJSONTyped(json, false);
}

export function StatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): Status {
    if (json == null) {
        return json;
    }
    return {
        
        'installed': json['installed'],
        'maintenance': json['maintenance'],
        'needsDbUpgrade': json['needsDbUpgrade'],
        'version': json['version'],
        'versionstring': json['versionstring'],
        'edition': json['edition'],
        'productname': json['productname'],
        'extendedSupport': json['extendedSupport'],
    };
}

export function StatusToJSON(value?: Status | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'installed': value['installed'],
        'maintenance': value['maintenance'],
        'needsDbUpgrade': value['needsDbUpgrade'],
        'version': value['version'],
        'versionstring': value['versionstring'],
        'edition': value['edition'],
        'productname': value['productname'],
        'extendedSupport': value['extendedSupport'],
    };
}

