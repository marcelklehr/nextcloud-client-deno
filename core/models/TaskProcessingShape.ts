/* tslint:disable */
/* eslint-disable */
/**
 * core-full
 * Core functionality of Nextcloud
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.ts';
/**
 * 
 * @export
 * @interface TaskProcessingShape
 */
export interface TaskProcessingShape {
    /**
     * 
     * @type {string}
     * @memberof TaskProcessingShape
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TaskProcessingShape
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof TaskProcessingShape
     */
    type: TaskProcessingShapeTypeEnum;
}


/**
 * @export
 */
export const TaskProcessingShapeTypeEnum = {
    Number: 'Number',
    Text: 'Text',
    Audio: 'Audio',
    Image: 'Image',
    Video: 'Video',
    File: 'File',
    Enum: 'Enum',
    ListOfNumbers: 'ListOfNumbers',
    ListOfTexts: 'ListOfTexts',
    ListOfImages: 'ListOfImages',
    ListOfAudios: 'ListOfAudios',
    ListOfVideos: 'ListOfVideos',
    ListOfFiles: 'ListOfFiles'
} as const;
export type TaskProcessingShapeTypeEnum = typeof TaskProcessingShapeTypeEnum[keyof typeof TaskProcessingShapeTypeEnum];


/**
 * Check if a given object implements the TaskProcessingShape interface.
 */
export function instanceOfTaskProcessingShape(value: object): value is TaskProcessingShape {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function TaskProcessingShapeFromJSON(json: any): TaskProcessingShape {
    return TaskProcessingShapeFromJSONTyped(json, false);
}

export function TaskProcessingShapeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaskProcessingShape {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'],
        'type': json['type'],
    };
}

export function TaskProcessingShapeToJSON(value?: TaskProcessingShape | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'description': value['description'],
        'type': value['type'],
    };
}

