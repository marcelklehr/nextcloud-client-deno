/* tslint:disable */
/* eslint-disable */
/**
 * core
 * Core functionality of Nextcloud
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.ts';
import type { TaskProcessingIOValue } from './TaskProcessingIOValue.ts';
import {
    TaskProcessingIOValueFromJSON,
    TaskProcessingIOValueFromJSONTyped,
    TaskProcessingIOValueToJSON,
} from './TaskProcessingIOValue.ts';

/**
 * 
 * @export
 * @interface TaskProcessingTask
 */
export interface TaskProcessingTask {
    /**
     * 
     * @type {number}
     * @memberof TaskProcessingTask
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof TaskProcessingTask
     */
    lastUpdated: number;
    /**
     * 
     * @type {string}
     * @memberof TaskProcessingTask
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof TaskProcessingTask
     */
    status: TaskProcessingTaskStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof TaskProcessingTask
     */
    userId: string | null;
    /**
     * 
     * @type {string}
     * @memberof TaskProcessingTask
     */
    appId: string;
    /**
     * 
     * @type {{ [key: string]: TaskProcessingIOValue; }}
     * @memberof TaskProcessingTask
     */
    input: { [key: string]: TaskProcessingIOValue; };
    /**
     * 
     * @type {{ [key: string]: TaskProcessingIOValue; }}
     * @memberof TaskProcessingTask
     */
    output: { [key: string]: TaskProcessingIOValue; };
    /**
     * 
     * @type {string}
     * @memberof TaskProcessingTask
     */
    customId: string | null;
    /**
     * 
     * @type {number}
     * @memberof TaskProcessingTask
     */
    completionExpectedAt: number | null;
    /**
     * 
     * @type {number}
     * @memberof TaskProcessingTask
     */
    progress: number | null;
}


/**
 * @export
 */
export const TaskProcessingTaskStatusEnum = {
    Cancelled: 'STATUS_CANCELLED',
    Failed: 'STATUS_FAILED',
    Successful: 'STATUS_SUCCESSFUL',
    Running: 'STATUS_RUNNING',
    Scheduled: 'STATUS_SCHEDULED',
    Unknown: 'STATUS_UNKNOWN'
} as const;
export type TaskProcessingTaskStatusEnum = typeof TaskProcessingTaskStatusEnum[keyof typeof TaskProcessingTaskStatusEnum];


/**
 * Check if a given object implements the TaskProcessingTask interface.
 */
export function instanceOfTaskProcessingTask(value: object): value is TaskProcessingTask {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('lastUpdated' in value) || value['lastUpdated'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('appId' in value) || value['appId'] === undefined) return false;
    if (!('input' in value) || value['input'] === undefined) return false;
    if (!('output' in value) || value['output'] === undefined) return false;
    if (!('customId' in value) || value['customId'] === undefined) return false;
    if (!('completionExpectedAt' in value) || value['completionExpectedAt'] === undefined) return false;
    if (!('progress' in value) || value['progress'] === undefined) return false;
    return true;
}

export function TaskProcessingTaskFromJSON(json: any): TaskProcessingTask {
    return TaskProcessingTaskFromJSONTyped(json, false);
}

export function TaskProcessingTaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaskProcessingTask {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'lastUpdated': json['lastUpdated'],
        'type': json['type'],
        'status': json['status'],
        'userId': json['userId'],
        'appId': json['appId'],
        'input': (mapValues(json['input'], TaskProcessingIOValueFromJSON)),
        'output': (mapValues(json['output'], TaskProcessingIOValueFromJSON)),
        'customId': json['customId'],
        'completionExpectedAt': json['completionExpectedAt'],
        'progress': json['progress'],
    };
}

export function TaskProcessingTaskToJSON(value?: TaskProcessingTask | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'lastUpdated': value['lastUpdated'],
        'type': value['type'],
        'status': value['status'],
        'userId': value['userId'],
        'appId': value['appId'],
        'input': (mapValues(value['input'], TaskProcessingIOValueToJSON)),
        'output': (mapValues(value['output'], TaskProcessingIOValueToJSON)),
        'customId': value['customId'],
        'completionExpectedAt': value['completionExpectedAt'],
        'progress': value['progress'],
    };
}

