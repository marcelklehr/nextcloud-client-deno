/* tslint:disable */
/* eslint-disable */
/**
 * spreed
 * Chat, video & audio-conferencing using WebRTC
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  BanUnbanActor200Response,
  PollCreatePoll201Response,
} from '../models/index.ts';
import {
    BanUnbanActor200ResponseFromJSON,
    BanUnbanActor200ResponseToJSON,
    PollCreatePoll201ResponseFromJSON,
    PollCreatePoll201ResponseToJSON,
} from '../models/index.ts';

export interface PollClosePollRequest {
    apiVersion: PollClosePollApiVersionEnum;
    token: string;
    pollId: number;
    oCSAPIRequest: boolean;
}

export interface PollCreatePollRequest {
    question: string;
    options: Array<string>;
    resultMode: PollCreatePollResultModeEnum;
    maxVotes: number;
    apiVersion: PollCreatePollApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface PollShowPollRequest {
    apiVersion: PollShowPollApiVersionEnum;
    token: string;
    pollId: number;
    oCSAPIRequest: boolean;
}

export interface PollVotePollRequest {
    apiVersion: PollVotePollApiVersionEnum;
    token: string;
    pollId: number;
    oCSAPIRequest: boolean;
    optionIds?: Array<number>;
}

/**
 * 
 */
export class PollApi extends runtime.BaseAPI {

    /**
     * Close a poll
     */
    async pollClosePollRaw(requestParameters: PollClosePollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PollCreatePoll201Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling pollClosePoll().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling pollClosePoll().'
            );
        }

        if (requestParameters['pollId'] == null) {
            throw new runtime.RequiredError(
                'pollId',
                'Required parameter "pollId" was null or undefined when calling pollClosePoll().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling pollClosePoll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/poll/{token}/{pollId}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))).replace(`{${"pollId"}}`, encodeURIComponent(String(requestParameters['pollId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PollCreatePoll201ResponseFromJSON(jsonValue));
    }

    /**
     * Close a poll
     */
    async pollClosePoll(requestParameters: PollClosePollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PollCreatePoll201Response> {
        const response = await this.pollClosePollRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a poll
     */
    async pollCreatePollRaw(requestParameters: PollCreatePollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PollCreatePoll201Response>> {
        if (requestParameters['question'] == null) {
            throw new runtime.RequiredError(
                'question',
                'Required parameter "question" was null or undefined when calling pollCreatePoll().'
            );
        }

        if (requestParameters['options'] == null) {
            throw new runtime.RequiredError(
                'options',
                'Required parameter "options" was null or undefined when calling pollCreatePoll().'
            );
        }

        if (requestParameters['resultMode'] == null) {
            throw new runtime.RequiredError(
                'resultMode',
                'Required parameter "resultMode" was null or undefined when calling pollCreatePoll().'
            );
        }

        if (requestParameters['maxVotes'] == null) {
            throw new runtime.RequiredError(
                'maxVotes',
                'Required parameter "maxVotes" was null or undefined when calling pollCreatePoll().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling pollCreatePoll().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling pollCreatePoll().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling pollCreatePoll().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['question'] != null) {
            queryParameters['question'] = requestParameters['question'];
        }

        if (requestParameters['options'] != null) {
            queryParameters['options[]'] = requestParameters['options'];
        }

        if (requestParameters['resultMode'] != null) {
            queryParameters['resultMode'] = requestParameters['resultMode'];
        }

        if (requestParameters['maxVotes'] != null) {
            queryParameters['maxVotes'] = requestParameters['maxVotes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/poll/{token}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PollCreatePoll201ResponseFromJSON(jsonValue));
    }

    /**
     * Create a poll
     */
    async pollCreatePoll(requestParameters: PollCreatePollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PollCreatePoll201Response> {
        const response = await this.pollCreatePollRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a poll
     */
    async pollShowPollRaw(requestParameters: PollShowPollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PollCreatePoll201Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling pollShowPoll().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling pollShowPoll().'
            );
        }

        if (requestParameters['pollId'] == null) {
            throw new runtime.RequiredError(
                'pollId',
                'Required parameter "pollId" was null or undefined when calling pollShowPoll().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling pollShowPoll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/poll/{token}/{pollId}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))).replace(`{${"pollId"}}`, encodeURIComponent(String(requestParameters['pollId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PollCreatePoll201ResponseFromJSON(jsonValue));
    }

    /**
     * Get a poll
     */
    async pollShowPoll(requestParameters: PollShowPollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PollCreatePoll201Response> {
        const response = await this.pollShowPollRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Vote on a poll
     */
    async pollVotePollRaw(requestParameters: PollVotePollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PollCreatePoll201Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling pollVotePoll().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling pollVotePoll().'
            );
        }

        if (requestParameters['pollId'] == null) {
            throw new runtime.RequiredError(
                'pollId',
                'Required parameter "pollId" was null or undefined when calling pollVotePoll().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling pollVotePoll().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optionIds'] != null) {
            queryParameters['optionIds[]'] = requestParameters['optionIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/poll/{token}/{pollId}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))).replace(`{${"pollId"}}`, encodeURIComponent(String(requestParameters['pollId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PollCreatePoll201ResponseFromJSON(jsonValue));
    }

    /**
     * Vote on a poll
     */
    async pollVotePoll(requestParameters: PollVotePollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PollCreatePoll201Response> {
        const response = await this.pollVotePollRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PollClosePollApiVersionEnum = {
    V1: 'v1'
} as const;
export type PollClosePollApiVersionEnum = typeof PollClosePollApiVersionEnum[keyof typeof PollClosePollApiVersionEnum];
/**
 * @export
 */
export const PollCreatePollResultModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type PollCreatePollResultModeEnum = typeof PollCreatePollResultModeEnum[keyof typeof PollCreatePollResultModeEnum];
/**
 * @export
 */
export const PollCreatePollApiVersionEnum = {
    V1: 'v1'
} as const;
export type PollCreatePollApiVersionEnum = typeof PollCreatePollApiVersionEnum[keyof typeof PollCreatePollApiVersionEnum];
/**
 * @export
 */
export const PollShowPollApiVersionEnum = {
    V1: 'v1'
} as const;
export type PollShowPollApiVersionEnum = typeof PollShowPollApiVersionEnum[keyof typeof PollShowPollApiVersionEnum];
/**
 * @export
 */
export const PollVotePollApiVersionEnum = {
    V1: 'v1'
} as const;
export type PollVotePollApiVersionEnum = typeof PollVotePollApiVersionEnum[keyof typeof PollVotePollApiVersionEnum];
