/* tslint:disable */
/* eslint-disable */
/**
 * spreed
 * Chat, video & audio-conferencing using WebRTC
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  BanUnbanActor200Response,
  SettingsSetUserSettingValueParameter,
} from '../models/index.ts';
import {
    BanUnbanActor200ResponseFromJSON,
    BanUnbanActor200ResponseToJSON,
    SettingsSetUserSettingValueParameterFromJSON,
    SettingsSetUserSettingValueParameterToJSON,
} from '../models/index.ts';

export interface SettingsSetUserSettingRequest {
    key: SettingsSetUserSettingKeyEnum;
    apiVersion: SettingsSetUserSettingApiVersionEnum;
    oCSAPIRequest: boolean;
    value?: SettingsSetUserSettingValueParameter;
}

/**
 * 
 */
export class SettingsApi extends runtime.BaseAPI {

    /**
     * Update user setting
     */
    async settingsSetUserSettingRaw(requestParameters: SettingsSetUserSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling settingsSetUserSetting().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling settingsSetUserSetting().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling settingsSetUserSetting().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        if (requestParameters['value'] != null) {
            queryParameters['value'] = requestParameters['value'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/settings/user`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Update user setting
     */
    async settingsSetUserSetting(requestParameters: SettingsSetUserSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.settingsSetUserSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const SettingsSetUserSettingKeyEnum = {
    AttachmentFolder: 'attachment_folder',
    ReadStatusPrivacy: 'read_status_privacy',
    TypingPrivacy: 'typing_privacy',
    PlaySounds: 'play_sounds'
} as const;
export type SettingsSetUserSettingKeyEnum = typeof SettingsSetUserSettingKeyEnum[keyof typeof SettingsSetUserSettingKeyEnum];
/**
 * @export
 */
export const SettingsSetUserSettingApiVersionEnum = {
    V1: 'v1'
} as const;
export type SettingsSetUserSettingApiVersionEnum = typeof SettingsSetUserSettingApiVersionEnum[keyof typeof SettingsSetUserSettingApiVersionEnum];
