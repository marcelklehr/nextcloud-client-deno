/* tslint:disable */
/* eslint-disable */
/**
 * spreed
 * Chat, video & audio-conferencing using WebRTC
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  AvatarUploadAvatar200Response,
  BanBanActor400Response,
  BanUnbanActor200Response,
  BreakoutRoomConfigureBreakoutRooms200Response,
  CallJoinCall400Response,
  RoomAddParticipantToRoom200Response,
  RoomGetCapabilities200Response,
  RoomGetParticipants200Response,
  RoomGetSingleRoom401Response,
  RoomJoinRoom403Response,
  RoomJoinRoom409Response,
  RoomSetPassword400Response,
} from '../models/index.ts';
import {
    AvatarUploadAvatar200ResponseFromJSON,
    AvatarUploadAvatar200ResponseToJSON,
    BanBanActor400ResponseFromJSON,
    BanBanActor400ResponseToJSON,
    BanUnbanActor200ResponseFromJSON,
    BanUnbanActor200ResponseToJSON,
    BreakoutRoomConfigureBreakoutRooms200ResponseFromJSON,
    BreakoutRoomConfigureBreakoutRooms200ResponseToJSON,
    CallJoinCall400ResponseFromJSON,
    CallJoinCall400ResponseToJSON,
    RoomAddParticipantToRoom200ResponseFromJSON,
    RoomAddParticipantToRoom200ResponseToJSON,
    RoomGetCapabilities200ResponseFromJSON,
    RoomGetCapabilities200ResponseToJSON,
    RoomGetParticipants200ResponseFromJSON,
    RoomGetParticipants200ResponseToJSON,
    RoomGetSingleRoom401ResponseFromJSON,
    RoomGetSingleRoom401ResponseToJSON,
    RoomJoinRoom403ResponseFromJSON,
    RoomJoinRoom403ResponseToJSON,
    RoomJoinRoom409ResponseFromJSON,
    RoomJoinRoom409ResponseToJSON,
    RoomSetPassword400ResponseFromJSON,
    RoomSetPassword400ResponseToJSON,
} from '../models/index.ts';

export interface RoomAddParticipantToRoomRequest {
    newParticipant: string;
    apiVersion: RoomAddParticipantToRoomApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
    source?: RoomAddParticipantToRoomSourceEnum;
}

export interface RoomAddToFavoritesRequest {
    apiVersion: RoomAddToFavoritesApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomCreateRoomRequest {
    roomType: number;
    apiVersion: RoomCreateRoomApiVersionEnum;
    oCSAPIRequest: boolean;
    invite?: string;
    roomName?: string;
    source?: string;
    objectType?: string;
    objectId?: string;
}

export interface RoomDeleteRoomRequest {
    apiVersion: RoomDeleteRoomApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomDemoteModeratorRequest {
    attendeeId: number;
    apiVersion: RoomDemoteModeratorApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomGetBreakoutRoomParticipantsRequest {
    apiVersion: RoomGetBreakoutRoomParticipantsApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
    includeStatus?: RoomGetBreakoutRoomParticipantsIncludeStatusEnum;
}

export interface RoomGetBreakoutRoomsRequest {
    apiVersion: RoomGetBreakoutRoomsApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomGetCapabilitiesRequest {
    apiVersion: RoomGetCapabilitiesApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomGetListedRoomsRequest {
    apiVersion: RoomGetListedRoomsApiVersionEnum;
    oCSAPIRequest: boolean;
    searchTerm?: string;
}

export interface RoomGetNoteToSelfConversationRequest {
    apiVersion: RoomGetNoteToSelfConversationApiVersionEnum;
    oCSAPIRequest: boolean;
}

export interface RoomGetParticipantsRequest {
    apiVersion: RoomGetParticipantsApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
    includeStatus?: RoomGetParticipantsIncludeStatusEnum;
}

export interface RoomGetRoomsRequest {
    apiVersion: RoomGetRoomsApiVersionEnum;
    oCSAPIRequest: boolean;
    noStatusUpdate?: RoomGetRoomsNoStatusUpdateEnum;
    includeStatus?: RoomGetRoomsIncludeStatusEnum;
    modifiedSince?: number;
}

export interface RoomGetSingleRoomRequest {
    apiVersion: RoomGetSingleRoomApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomJoinRoomRequest {
    apiVersion: RoomJoinRoomApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
    password?: string;
    force?: RoomJoinRoomForceEnum;
}

export interface RoomLeaveRoomRequest {
    apiVersion: RoomLeaveRoomApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomMakePrivateRequest {
    apiVersion: RoomMakePrivateApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomMakePublicRequest {
    apiVersion: RoomMakePublicApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomPromoteModeratorRequest {
    attendeeId: number;
    apiVersion: RoomPromoteModeratorApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomRemoveAttendeeFromRoomRequest {
    attendeeId: number;
    apiVersion: RoomRemoveAttendeeFromRoomApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomRemoveFromFavoritesRequest {
    apiVersion: RoomRemoveFromFavoritesApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomRemoveSelfFromRoomRequest {
    apiVersion: RoomRemoveSelfFromRoomApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomRenameRoomRequest {
    roomName: string;
    apiVersion: RoomRenameRoomApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomResendInvitationsRequest {
    apiVersion: RoomResendInvitationsApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
    attendeeId?: number;
}

export interface RoomSetAllAttendeesPermissionsRequest {
    method: RoomSetAllAttendeesPermissionsMethodEnum;
    permissions: number;
    apiVersion: RoomSetAllAttendeesPermissionsApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomSetAttendeePermissionsRequest {
    attendeeId: number;
    method: RoomSetAttendeePermissionsMethodEnum;
    permissions: number;
    apiVersion: RoomSetAttendeePermissionsApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomSetDescriptionRequest {
    description: string;
    apiVersion: RoomSetDescriptionApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomSetListableRequest {
    scope: RoomSetListableScopeEnum;
    apiVersion: RoomSetListableApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomSetLobbyRequest {
    state: number;
    apiVersion: RoomSetLobbyApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
    timer?: number;
}

export interface RoomSetMessageExpirationRequest {
    seconds: number;
    apiVersion: RoomSetMessageExpirationApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomSetNotificationCallsRequest {
    level: number;
    apiVersion: RoomSetNotificationCallsApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomSetNotificationLevelRequest {
    level: number;
    apiVersion: RoomSetNotificationLevelApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomSetPasswordRequest {
    password: string;
    apiVersion: RoomSetPasswordApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomSetPermissionsRequest {
    permissions: number;
    apiVersion: RoomSetPermissionsApiVersionEnum;
    token: string;
    mode: RoomSetPermissionsModeEnum;
    oCSAPIRequest: boolean;
}

export interface RoomSetReadOnlyRequest {
    state: RoomSetReadOnlyStateEnum;
    apiVersion: RoomSetReadOnlyApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomSetRecordingConsentRequest {
    recordingConsent: number;
    apiVersion: RoomSetRecordingConsentApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomSetSessionStateRequest {
    state: RoomSetSessionStateStateEnum;
    apiVersion: RoomSetSessionStateApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface RoomSetsipEnabledRequest {
    state: RoomSetsipEnabledStateEnum;
    apiVersion: RoomSetsipEnabledApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

/**
 * 
 */
export class RoomApi extends runtime.BaseAPI {

    /**
     * Add a participant to a room
     */
    async roomAddParticipantToRoomRaw(requestParameters: RoomAddParticipantToRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomAddParticipantToRoom200Response>> {
        if (requestParameters['newParticipant'] == null) {
            throw new runtime.RequiredError(
                'newParticipant',
                'Required parameter "newParticipant" was null or undefined when calling roomAddParticipantToRoom().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomAddParticipantToRoom().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomAddParticipantToRoom().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomAddParticipantToRoom().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['newParticipant'] != null) {
            queryParameters['newParticipant'] = requestParameters['newParticipant'];
        }

        if (requestParameters['source'] != null) {
            queryParameters['source'] = requestParameters['source'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/participants`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomAddParticipantToRoom200ResponseFromJSON(jsonValue));
    }

    /**
     * Add a participant to a room
     */
    async roomAddParticipantToRoom(requestParameters: RoomAddParticipantToRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomAddParticipantToRoom200Response> {
        const response = await this.roomAddParticipantToRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a room to the favorites
     */
    async roomAddToFavoritesRaw(requestParameters: RoomAddToFavoritesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomAddToFavorites().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomAddToFavorites().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomAddToFavorites().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/favorite`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Add a room to the favorites
     */
    async roomAddToFavorites(requestParameters: RoomAddToFavoritesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.roomAddToFavoritesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a room with a user, a group or a circle
     */
    async roomCreateRoomRaw(requestParameters: RoomCreateRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvatarUploadAvatar200Response>> {
        if (requestParameters['roomType'] == null) {
            throw new runtime.RequiredError(
                'roomType',
                'Required parameter "roomType" was null or undefined when calling roomCreateRoom().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomCreateRoom().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomCreateRoom().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['roomType'] != null) {
            queryParameters['roomType'] = requestParameters['roomType'];
        }

        if (requestParameters['invite'] != null) {
            queryParameters['invite'] = requestParameters['invite'];
        }

        if (requestParameters['roomName'] != null) {
            queryParameters['roomName'] = requestParameters['roomName'];
        }

        if (requestParameters['source'] != null) {
            queryParameters['source'] = requestParameters['source'];
        }

        if (requestParameters['objectType'] != null) {
            queryParameters['objectType'] = requestParameters['objectType'];
        }

        if (requestParameters['objectId'] != null) {
            queryParameters['objectId'] = requestParameters['objectId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvatarUploadAvatar200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a room with a user, a group or a circle
     */
    async roomCreateRoom(requestParameters: RoomCreateRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvatarUploadAvatar200Response> {
        const response = await this.roomCreateRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a room
     */
    async roomDeleteRoomRaw(requestParameters: RoomDeleteRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomDeleteRoom().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomDeleteRoom().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomDeleteRoom().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a room
     */
    async roomDeleteRoom(requestParameters: RoomDeleteRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.roomDeleteRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Demote an attendee from moderator
     */
    async roomDemoteModeratorRaw(requestParameters: RoomDemoteModeratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['attendeeId'] == null) {
            throw new runtime.RequiredError(
                'attendeeId',
                'Required parameter "attendeeId" was null or undefined when calling roomDemoteModerator().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomDemoteModerator().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomDemoteModerator().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomDemoteModerator().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['attendeeId'] != null) {
            queryParameters['attendeeId'] = requestParameters['attendeeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/moderators`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Demote an attendee from moderator
     */
    async roomDemoteModerator(requestParameters: RoomDemoteModeratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.roomDemoteModeratorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the breakout room participants for a room
     */
    async roomGetBreakoutRoomParticipantsRaw(requestParameters: RoomGetBreakoutRoomParticipantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomGetParticipants200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomGetBreakoutRoomParticipants().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomGetBreakoutRoomParticipants().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomGetBreakoutRoomParticipants().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeStatus'] != null) {
            queryParameters['includeStatus'] = requestParameters['includeStatus'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/breakout-rooms/participants`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomGetParticipants200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the breakout room participants for a room
     */
    async roomGetBreakoutRoomParticipants(requestParameters: RoomGetBreakoutRoomParticipantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomGetParticipants200Response> {
        const response = await this.roomGetBreakoutRoomParticipantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * All for moderators and in case of \"free selection\", or the assigned breakout room for other participants
     * Get breakout rooms
     */
    async roomGetBreakoutRoomsRaw(requestParameters: RoomGetBreakoutRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BreakoutRoomConfigureBreakoutRooms200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomGetBreakoutRooms().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomGetBreakoutRooms().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomGetBreakoutRooms().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/breakout-rooms`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BreakoutRoomConfigureBreakoutRooms200ResponseFromJSON(jsonValue));
    }

    /**
     * All for moderators and in case of \"free selection\", or the assigned breakout room for other participants
     * Get breakout rooms
     */
    async roomGetBreakoutRooms(requestParameters: RoomGetBreakoutRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BreakoutRoomConfigureBreakoutRooms200Response> {
        const response = await this.roomGetBreakoutRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See \"Capability handling in federated conversations\" in https://github.com/nextcloud/spreed/issues/10680 to learn which capabilities should be considered from the local server or from the remote server.
     * Get capabilities for a room
     */
    async roomGetCapabilitiesRaw(requestParameters: RoomGetCapabilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomGetCapabilities200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomGetCapabilities().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomGetCapabilities().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomGetCapabilities().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/capabilities`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomGetCapabilities200ResponseFromJSON(jsonValue));
    }

    /**
     * See \"Capability handling in federated conversations\" in https://github.com/nextcloud/spreed/issues/10680 to learn which capabilities should be considered from the local server or from the remote server.
     * Get capabilities for a room
     */
    async roomGetCapabilities(requestParameters: RoomGetCapabilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomGetCapabilities200Response> {
        const response = await this.roomGetCapabilitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get listed rooms with optional search term
     */
    async roomGetListedRoomsRaw(requestParameters: RoomGetListedRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BreakoutRoomConfigureBreakoutRooms200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomGetListedRooms().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomGetListedRooms().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchTerm'] != null) {
            queryParameters['searchTerm'] = requestParameters['searchTerm'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/listed-room`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BreakoutRoomConfigureBreakoutRooms200ResponseFromJSON(jsonValue));
    }

    /**
     * Get listed rooms with optional search term
     */
    async roomGetListedRooms(requestParameters: RoomGetListedRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BreakoutRoomConfigureBreakoutRooms200Response> {
        const response = await this.roomGetListedRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * It will be automatically created when it is currently missing
     * Get the \"Note to self\" conversation for the user
     */
    async roomGetNoteToSelfConversationRaw(requestParameters: RoomGetNoteToSelfConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvatarUploadAvatar200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomGetNoteToSelfConversation().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomGetNoteToSelfConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/note-to-self`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvatarUploadAvatar200ResponseFromJSON(jsonValue));
    }

    /**
     * It will be automatically created when it is currently missing
     * Get the \"Note to self\" conversation for the user
     */
    async roomGetNoteToSelfConversation(requestParameters: RoomGetNoteToSelfConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvatarUploadAvatar200Response> {
        const response = await this.roomGetNoteToSelfConversationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of participants for a room
     */
    async roomGetParticipantsRaw(requestParameters: RoomGetParticipantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomGetParticipants200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomGetParticipants().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomGetParticipants().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomGetParticipants().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeStatus'] != null) {
            queryParameters['includeStatus'] = requestParameters['includeStatus'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/participants`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomGetParticipants200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of participants for a room
     */
    async roomGetParticipants(requestParameters: RoomGetParticipantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomGetParticipants200Response> {
        const response = await this.roomGetParticipantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all currently existent rooms which the user has joined
     */
    async roomGetRoomsRaw(requestParameters: RoomGetRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BreakoutRoomConfigureBreakoutRooms200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomGetRooms().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomGetRooms().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['noStatusUpdate'] != null) {
            queryParameters['noStatusUpdate'] = requestParameters['noStatusUpdate'];
        }

        if (requestParameters['includeStatus'] != null) {
            queryParameters['includeStatus'] = requestParameters['includeStatus'];
        }

        if (requestParameters['modifiedSince'] != null) {
            queryParameters['modifiedSince'] = requestParameters['modifiedSince'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BreakoutRoomConfigureBreakoutRooms200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all currently existent rooms which the user has joined
     */
    async roomGetRooms(requestParameters: RoomGetRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BreakoutRoomConfigureBreakoutRooms200Response> {
        const response = await this.roomGetRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a room
     */
    async roomGetSingleRoomRaw(requestParameters: RoomGetSingleRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvatarUploadAvatar200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomGetSingleRoom().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomGetSingleRoom().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomGetSingleRoom().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvatarUploadAvatar200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a room
     */
    async roomGetSingleRoom(requestParameters: RoomGetSingleRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvatarUploadAvatar200Response> {
        const response = await this.roomGetSingleRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Join a room
     */
    async roomJoinRoomRaw(requestParameters: RoomJoinRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvatarUploadAvatar200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomJoinRoom().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomJoinRoom().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomJoinRoom().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['password'] != null) {
            queryParameters['password'] = requestParameters['password'];
        }

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/participants/active`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvatarUploadAvatar200ResponseFromJSON(jsonValue));
    }

    /**
     * Join a room
     */
    async roomJoinRoom(requestParameters: RoomJoinRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvatarUploadAvatar200Response> {
        const response = await this.roomJoinRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Leave a room
     */
    async roomLeaveRoomRaw(requestParameters: RoomLeaveRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomLeaveRoom().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomLeaveRoom().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomLeaveRoom().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/participants/active`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Leave a room
     */
    async roomLeaveRoom(requestParameters: RoomLeaveRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.roomLeaveRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Disallowed guests to join conversation
     */
    async roomMakePrivateRaw(requestParameters: RoomMakePrivateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomMakePrivate().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomMakePrivate().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomMakePrivate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/public`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Disallowed guests to join conversation
     */
    async roomMakePrivate(requestParameters: RoomMakePrivateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.roomMakePrivateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allowed guests to join conversation
     */
    async roomMakePublicRaw(requestParameters: RoomMakePublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomMakePublic().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomMakePublic().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomMakePublic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/public`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Allowed guests to join conversation
     */
    async roomMakePublic(requestParameters: RoomMakePublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.roomMakePublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Promote an attendee to moderator
     */
    async roomPromoteModeratorRaw(requestParameters: RoomPromoteModeratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['attendeeId'] == null) {
            throw new runtime.RequiredError(
                'attendeeId',
                'Required parameter "attendeeId" was null or undefined when calling roomPromoteModerator().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomPromoteModerator().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomPromoteModerator().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomPromoteModerator().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['attendeeId'] != null) {
            queryParameters['attendeeId'] = requestParameters['attendeeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/moderators`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Promote an attendee to moderator
     */
    async roomPromoteModerator(requestParameters: RoomPromoteModeratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.roomPromoteModeratorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove an attendee from a room
     */
    async roomRemoveAttendeeFromRoomRaw(requestParameters: RoomRemoveAttendeeFromRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['attendeeId'] == null) {
            throw new runtime.RequiredError(
                'attendeeId',
                'Required parameter "attendeeId" was null or undefined when calling roomRemoveAttendeeFromRoom().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomRemoveAttendeeFromRoom().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomRemoveAttendeeFromRoom().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomRemoveAttendeeFromRoom().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['attendeeId'] != null) {
            queryParameters['attendeeId'] = requestParameters['attendeeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/attendees`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Remove an attendee from a room
     */
    async roomRemoveAttendeeFromRoom(requestParameters: RoomRemoveAttendeeFromRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.roomRemoveAttendeeFromRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a room from the favorites
     */
    async roomRemoveFromFavoritesRaw(requestParameters: RoomRemoveFromFavoritesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomRemoveFromFavorites().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomRemoveFromFavorites().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomRemoveFromFavorites().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/favorite`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Remove a room from the favorites
     */
    async roomRemoveFromFavorites(requestParameters: RoomRemoveFromFavoritesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.roomRemoveFromFavoritesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove the current user from a room
     */
    async roomRemoveSelfFromRoomRaw(requestParameters: RoomRemoveSelfFromRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomRemoveSelfFromRoom().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomRemoveSelfFromRoom().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomRemoveSelfFromRoom().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/participants/self`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Remove the current user from a room
     */
    async roomRemoveSelfFromRoom(requestParameters: RoomRemoveSelfFromRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.roomRemoveSelfFromRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Rename a room
     */
    async roomRenameRoomRaw(requestParameters: RoomRenameRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['roomName'] == null) {
            throw new runtime.RequiredError(
                'roomName',
                'Required parameter "roomName" was null or undefined when calling roomRenameRoom().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomRenameRoom().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomRenameRoom().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomRenameRoom().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['roomName'] != null) {
            queryParameters['roomName'] = requestParameters['roomName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Rename a room
     */
    async roomRenameRoom(requestParameters: RoomRenameRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.roomRenameRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resend invitations
     */
    async roomResendInvitationsRaw(requestParameters: RoomResendInvitationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomResendInvitations().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomResendInvitations().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomResendInvitations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['attendeeId'] != null) {
            queryParameters['attendeeId'] = requestParameters['attendeeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/participants/resend-invitations`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Resend invitations
     */
    async roomResendInvitations(requestParameters: RoomResendInvitationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.roomResendInvitationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the permissions of all attendees
     */
    async roomSetAllAttendeesPermissionsRaw(requestParameters: RoomSetAllAttendeesPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvatarUploadAvatar200Response>> {
        if (requestParameters['method'] == null) {
            throw new runtime.RequiredError(
                'method',
                'Required parameter "method" was null or undefined when calling roomSetAllAttendeesPermissions().'
            );
        }

        if (requestParameters['permissions'] == null) {
            throw new runtime.RequiredError(
                'permissions',
                'Required parameter "permissions" was null or undefined when calling roomSetAllAttendeesPermissions().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomSetAllAttendeesPermissions().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomSetAllAttendeesPermissions().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomSetAllAttendeesPermissions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        if (requestParameters['permissions'] != null) {
            queryParameters['permissions'] = requestParameters['permissions'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/attendees/permissions/all`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvatarUploadAvatar200ResponseFromJSON(jsonValue));
    }

    /**
     * Update the permissions of all attendees
     */
    async roomSetAllAttendeesPermissions(requestParameters: RoomSetAllAttendeesPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvatarUploadAvatar200Response> {
        const response = await this.roomSetAllAttendeesPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the permissions of an attendee
     */
    async roomSetAttendeePermissionsRaw(requestParameters: RoomSetAttendeePermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['attendeeId'] == null) {
            throw new runtime.RequiredError(
                'attendeeId',
                'Required parameter "attendeeId" was null or undefined when calling roomSetAttendeePermissions().'
            );
        }

        if (requestParameters['method'] == null) {
            throw new runtime.RequiredError(
                'method',
                'Required parameter "method" was null or undefined when calling roomSetAttendeePermissions().'
            );
        }

        if (requestParameters['permissions'] == null) {
            throw new runtime.RequiredError(
                'permissions',
                'Required parameter "permissions" was null or undefined when calling roomSetAttendeePermissions().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomSetAttendeePermissions().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomSetAttendeePermissions().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomSetAttendeePermissions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['attendeeId'] != null) {
            queryParameters['attendeeId'] = requestParameters['attendeeId'];
        }

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        if (requestParameters['permissions'] != null) {
            queryParameters['permissions'] = requestParameters['permissions'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/attendees/permissions`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Update the permissions of an attendee
     */
    async roomSetAttendeePermissions(requestParameters: RoomSetAttendeePermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.roomSetAttendeePermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the description of a room
     */
    async roomSetDescriptionRaw(requestParameters: RoomSetDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['description'] == null) {
            throw new runtime.RequiredError(
                'description',
                'Required parameter "description" was null or undefined when calling roomSetDescription().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomSetDescription().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomSetDescription().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomSetDescription().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/description`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Update the description of a room
     */
    async roomSetDescription(requestParameters: RoomSetDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.roomSetDescriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Make a room listable
     */
    async roomSetListableRaw(requestParameters: RoomSetListableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['scope'] == null) {
            throw new runtime.RequiredError(
                'scope',
                'Required parameter "scope" was null or undefined when calling roomSetListable().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomSetListable().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomSetListable().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomSetListable().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/listable`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Make a room listable
     */
    async roomSetListable(requestParameters: RoomSetListableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.roomSetListableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the lobby state for a room
     */
    async roomSetLobbyRaw(requestParameters: RoomSetLobbyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvatarUploadAvatar200Response>> {
        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling roomSetLobby().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomSetLobby().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomSetLobby().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomSetLobby().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        if (requestParameters['timer'] != null) {
            queryParameters['timer'] = requestParameters['timer'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/webinar/lobby`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvatarUploadAvatar200ResponseFromJSON(jsonValue));
    }

    /**
     * Update the lobby state for a room
     */
    async roomSetLobby(requestParameters: RoomSetLobbyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvatarUploadAvatar200Response> {
        const response = await this.roomSetLobbyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update message expiration time
     */
    async roomSetMessageExpirationRaw(requestParameters: RoomSetMessageExpirationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['seconds'] == null) {
            throw new runtime.RequiredError(
                'seconds',
                'Required parameter "seconds" was null or undefined when calling roomSetMessageExpiration().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomSetMessageExpiration().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomSetMessageExpiration().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomSetMessageExpiration().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['seconds'] != null) {
            queryParameters['seconds'] = requestParameters['seconds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/message-expiration`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Update message expiration time
     */
    async roomSetMessageExpiration(requestParameters: RoomSetMessageExpirationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.roomSetMessageExpirationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update call notifications
     */
    async roomSetNotificationCallsRaw(requestParameters: RoomSetNotificationCallsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['level'] == null) {
            throw new runtime.RequiredError(
                'level',
                'Required parameter "level" was null or undefined when calling roomSetNotificationCalls().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomSetNotificationCalls().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomSetNotificationCalls().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomSetNotificationCalls().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/notify-calls`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Update call notifications
     */
    async roomSetNotificationCalls(requestParameters: RoomSetNotificationCallsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.roomSetNotificationCallsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the notification level for a room
     */
    async roomSetNotificationLevelRaw(requestParameters: RoomSetNotificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['level'] == null) {
            throw new runtime.RequiredError(
                'level',
                'Required parameter "level" was null or undefined when calling roomSetNotificationLevel().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomSetNotificationLevel().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomSetNotificationLevel().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomSetNotificationLevel().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/notify`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Update the notification level for a room
     */
    async roomSetNotificationLevel(requestParameters: RoomSetNotificationLevelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.roomSetNotificationLevelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set a password for a room
     */
    async roomSetPasswordRaw(requestParameters: RoomSetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['password'] == null) {
            throw new runtime.RequiredError(
                'password',
                'Required parameter "password" was null or undefined when calling roomSetPassword().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomSetPassword().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomSetPassword().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomSetPassword().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['password'] != null) {
            queryParameters['password'] = requestParameters['password'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/password`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Set a password for a room
     */
    async roomSetPassword(requestParameters: RoomSetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.roomSetPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the permissions of a room
     */
    async roomSetPermissionsRaw(requestParameters: RoomSetPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvatarUploadAvatar200Response>> {
        if (requestParameters['permissions'] == null) {
            throw new runtime.RequiredError(
                'permissions',
                'Required parameter "permissions" was null or undefined when calling roomSetPermissions().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomSetPermissions().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomSetPermissions().'
            );
        }

        if (requestParameters['mode'] == null) {
            throw new runtime.RequiredError(
                'mode',
                'Required parameter "mode" was null or undefined when calling roomSetPermissions().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomSetPermissions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['permissions'] != null) {
            queryParameters['permissions'] = requestParameters['permissions'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/permissions/{mode}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))).replace(`{${"mode"}}`, encodeURIComponent(String(requestParameters['mode']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvatarUploadAvatar200ResponseFromJSON(jsonValue));
    }

    /**
     * Update the permissions of a room
     */
    async roomSetPermissions(requestParameters: RoomSetPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvatarUploadAvatar200Response> {
        const response = await this.roomSetPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set read-only state of a room
     */
    async roomSetReadOnlyRaw(requestParameters: RoomSetReadOnlyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling roomSetReadOnly().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomSetReadOnly().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomSetReadOnly().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomSetReadOnly().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/read-only`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Set read-only state of a room
     */
    async roomSetReadOnly(requestParameters: RoomSetReadOnlyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.roomSetReadOnlyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set recording consent requirement for this conversation
     */
    async roomSetRecordingConsentRaw(requestParameters: RoomSetRecordingConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvatarUploadAvatar200Response>> {
        if (requestParameters['recordingConsent'] == null) {
            throw new runtime.RequiredError(
                'recordingConsent',
                'Required parameter "recordingConsent" was null or undefined when calling roomSetRecordingConsent().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomSetRecordingConsent().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomSetRecordingConsent().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomSetRecordingConsent().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['recordingConsent'] != null) {
            queryParameters['recordingConsent'] = requestParameters['recordingConsent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/recording-consent`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvatarUploadAvatar200ResponseFromJSON(jsonValue));
    }

    /**
     * Set recording consent requirement for this conversation
     */
    async roomSetRecordingConsent(requestParameters: RoomSetRecordingConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvatarUploadAvatar200Response> {
        const response = await this.roomSetRecordingConsentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set active state for a session
     */
    async roomSetSessionStateRaw(requestParameters: RoomSetSessionStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvatarUploadAvatar200Response>> {
        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling roomSetSessionState().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomSetSessionState().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomSetSessionState().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomSetSessionState().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/participants/state`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvatarUploadAvatar200ResponseFromJSON(jsonValue));
    }

    /**
     * Set active state for a session
     */
    async roomSetSessionState(requestParameters: RoomSetSessionStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvatarUploadAvatar200Response> {
        const response = await this.roomSetSessionStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update SIP enabled state
     */
    async roomSetsipEnabledRaw(requestParameters: RoomSetsipEnabledRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvatarUploadAvatar200Response>> {
        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling roomSetsipEnabled().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling roomSetsipEnabled().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling roomSetsipEnabled().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling roomSetsipEnabled().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/webinar/sip`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvatarUploadAvatar200ResponseFromJSON(jsonValue));
    }

    /**
     * Update SIP enabled state
     */
    async roomSetsipEnabled(requestParameters: RoomSetsipEnabledRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvatarUploadAvatar200Response> {
        const response = await this.roomSetsipEnabledRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const RoomAddParticipantToRoomApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomAddParticipantToRoomApiVersionEnum = typeof RoomAddParticipantToRoomApiVersionEnum[keyof typeof RoomAddParticipantToRoomApiVersionEnum];
/**
 * @export
 */
export const RoomAddParticipantToRoomSourceEnum = {
    Users: 'users',
    Groups: 'groups',
    Circles: 'circles',
    Emails: 'emails',
    FederatedUsers: 'federated_users',
    Phones: 'phones'
} as const;
export type RoomAddParticipantToRoomSourceEnum = typeof RoomAddParticipantToRoomSourceEnum[keyof typeof RoomAddParticipantToRoomSourceEnum];
/**
 * @export
 */
export const RoomAddToFavoritesApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomAddToFavoritesApiVersionEnum = typeof RoomAddToFavoritesApiVersionEnum[keyof typeof RoomAddToFavoritesApiVersionEnum];
/**
 * @export
 */
export const RoomCreateRoomApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomCreateRoomApiVersionEnum = typeof RoomCreateRoomApiVersionEnum[keyof typeof RoomCreateRoomApiVersionEnum];
/**
 * @export
 */
export const RoomDeleteRoomApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomDeleteRoomApiVersionEnum = typeof RoomDeleteRoomApiVersionEnum[keyof typeof RoomDeleteRoomApiVersionEnum];
/**
 * @export
 */
export const RoomDemoteModeratorApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomDemoteModeratorApiVersionEnum = typeof RoomDemoteModeratorApiVersionEnum[keyof typeof RoomDemoteModeratorApiVersionEnum];
/**
 * @export
 */
export const RoomGetBreakoutRoomParticipantsApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomGetBreakoutRoomParticipantsApiVersionEnum = typeof RoomGetBreakoutRoomParticipantsApiVersionEnum[keyof typeof RoomGetBreakoutRoomParticipantsApiVersionEnum];
/**
 * @export
 */
export const RoomGetBreakoutRoomParticipantsIncludeStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type RoomGetBreakoutRoomParticipantsIncludeStatusEnum = typeof RoomGetBreakoutRoomParticipantsIncludeStatusEnum[keyof typeof RoomGetBreakoutRoomParticipantsIncludeStatusEnum];
/**
 * @export
 */
export const RoomGetBreakoutRoomsApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomGetBreakoutRoomsApiVersionEnum = typeof RoomGetBreakoutRoomsApiVersionEnum[keyof typeof RoomGetBreakoutRoomsApiVersionEnum];
/**
 * @export
 */
export const RoomGetCapabilitiesApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomGetCapabilitiesApiVersionEnum = typeof RoomGetCapabilitiesApiVersionEnum[keyof typeof RoomGetCapabilitiesApiVersionEnum];
/**
 * @export
 */
export const RoomGetListedRoomsApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomGetListedRoomsApiVersionEnum = typeof RoomGetListedRoomsApiVersionEnum[keyof typeof RoomGetListedRoomsApiVersionEnum];
/**
 * @export
 */
export const RoomGetNoteToSelfConversationApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomGetNoteToSelfConversationApiVersionEnum = typeof RoomGetNoteToSelfConversationApiVersionEnum[keyof typeof RoomGetNoteToSelfConversationApiVersionEnum];
/**
 * @export
 */
export const RoomGetParticipantsApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomGetParticipantsApiVersionEnum = typeof RoomGetParticipantsApiVersionEnum[keyof typeof RoomGetParticipantsApiVersionEnum];
/**
 * @export
 */
export const RoomGetParticipantsIncludeStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type RoomGetParticipantsIncludeStatusEnum = typeof RoomGetParticipantsIncludeStatusEnum[keyof typeof RoomGetParticipantsIncludeStatusEnum];
/**
 * @export
 */
export const RoomGetRoomsApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomGetRoomsApiVersionEnum = typeof RoomGetRoomsApiVersionEnum[keyof typeof RoomGetRoomsApiVersionEnum];
/**
 * @export
 */
export const RoomGetRoomsNoStatusUpdateEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type RoomGetRoomsNoStatusUpdateEnum = typeof RoomGetRoomsNoStatusUpdateEnum[keyof typeof RoomGetRoomsNoStatusUpdateEnum];
/**
 * @export
 */
export const RoomGetRoomsIncludeStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type RoomGetRoomsIncludeStatusEnum = typeof RoomGetRoomsIncludeStatusEnum[keyof typeof RoomGetRoomsIncludeStatusEnum];
/**
 * @export
 */
export const RoomGetSingleRoomApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomGetSingleRoomApiVersionEnum = typeof RoomGetSingleRoomApiVersionEnum[keyof typeof RoomGetSingleRoomApiVersionEnum];
/**
 * @export
 */
export const RoomJoinRoomApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomJoinRoomApiVersionEnum = typeof RoomJoinRoomApiVersionEnum[keyof typeof RoomJoinRoomApiVersionEnum];
/**
 * @export
 */
export const RoomJoinRoomForceEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type RoomJoinRoomForceEnum = typeof RoomJoinRoomForceEnum[keyof typeof RoomJoinRoomForceEnum];
/**
 * @export
 */
export const RoomLeaveRoomApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomLeaveRoomApiVersionEnum = typeof RoomLeaveRoomApiVersionEnum[keyof typeof RoomLeaveRoomApiVersionEnum];
/**
 * @export
 */
export const RoomMakePrivateApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomMakePrivateApiVersionEnum = typeof RoomMakePrivateApiVersionEnum[keyof typeof RoomMakePrivateApiVersionEnum];
/**
 * @export
 */
export const RoomMakePublicApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomMakePublicApiVersionEnum = typeof RoomMakePublicApiVersionEnum[keyof typeof RoomMakePublicApiVersionEnum];
/**
 * @export
 */
export const RoomPromoteModeratorApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomPromoteModeratorApiVersionEnum = typeof RoomPromoteModeratorApiVersionEnum[keyof typeof RoomPromoteModeratorApiVersionEnum];
/**
 * @export
 */
export const RoomRemoveAttendeeFromRoomApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomRemoveAttendeeFromRoomApiVersionEnum = typeof RoomRemoveAttendeeFromRoomApiVersionEnum[keyof typeof RoomRemoveAttendeeFromRoomApiVersionEnum];
/**
 * @export
 */
export const RoomRemoveFromFavoritesApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomRemoveFromFavoritesApiVersionEnum = typeof RoomRemoveFromFavoritesApiVersionEnum[keyof typeof RoomRemoveFromFavoritesApiVersionEnum];
/**
 * @export
 */
export const RoomRemoveSelfFromRoomApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomRemoveSelfFromRoomApiVersionEnum = typeof RoomRemoveSelfFromRoomApiVersionEnum[keyof typeof RoomRemoveSelfFromRoomApiVersionEnum];
/**
 * @export
 */
export const RoomRenameRoomApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomRenameRoomApiVersionEnum = typeof RoomRenameRoomApiVersionEnum[keyof typeof RoomRenameRoomApiVersionEnum];
/**
 * @export
 */
export const RoomResendInvitationsApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomResendInvitationsApiVersionEnum = typeof RoomResendInvitationsApiVersionEnum[keyof typeof RoomResendInvitationsApiVersionEnum];
/**
 * @export
 */
export const RoomSetAllAttendeesPermissionsMethodEnum = {
    Set: 'set',
    Remove: 'remove',
    Add: 'add'
} as const;
export type RoomSetAllAttendeesPermissionsMethodEnum = typeof RoomSetAllAttendeesPermissionsMethodEnum[keyof typeof RoomSetAllAttendeesPermissionsMethodEnum];
/**
 * @export
 */
export const RoomSetAllAttendeesPermissionsApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomSetAllAttendeesPermissionsApiVersionEnum = typeof RoomSetAllAttendeesPermissionsApiVersionEnum[keyof typeof RoomSetAllAttendeesPermissionsApiVersionEnum];
/**
 * @export
 */
export const RoomSetAttendeePermissionsMethodEnum = {
    Set: 'set',
    Remove: 'remove',
    Add: 'add'
} as const;
export type RoomSetAttendeePermissionsMethodEnum = typeof RoomSetAttendeePermissionsMethodEnum[keyof typeof RoomSetAttendeePermissionsMethodEnum];
/**
 * @export
 */
export const RoomSetAttendeePermissionsApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomSetAttendeePermissionsApiVersionEnum = typeof RoomSetAttendeePermissionsApiVersionEnum[keyof typeof RoomSetAttendeePermissionsApiVersionEnum];
/**
 * @export
 */
export const RoomSetDescriptionApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomSetDescriptionApiVersionEnum = typeof RoomSetDescriptionApiVersionEnum[keyof typeof RoomSetDescriptionApiVersionEnum];
/**
 * @export
 */
export const RoomSetListableScopeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;
export type RoomSetListableScopeEnum = typeof RoomSetListableScopeEnum[keyof typeof RoomSetListableScopeEnum];
/**
 * @export
 */
export const RoomSetListableApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomSetListableApiVersionEnum = typeof RoomSetListableApiVersionEnum[keyof typeof RoomSetListableApiVersionEnum];
/**
 * @export
 */
export const RoomSetLobbyApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomSetLobbyApiVersionEnum = typeof RoomSetLobbyApiVersionEnum[keyof typeof RoomSetLobbyApiVersionEnum];
/**
 * @export
 */
export const RoomSetMessageExpirationApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomSetMessageExpirationApiVersionEnum = typeof RoomSetMessageExpirationApiVersionEnum[keyof typeof RoomSetMessageExpirationApiVersionEnum];
/**
 * @export
 */
export const RoomSetNotificationCallsApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomSetNotificationCallsApiVersionEnum = typeof RoomSetNotificationCallsApiVersionEnum[keyof typeof RoomSetNotificationCallsApiVersionEnum];
/**
 * @export
 */
export const RoomSetNotificationLevelApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomSetNotificationLevelApiVersionEnum = typeof RoomSetNotificationLevelApiVersionEnum[keyof typeof RoomSetNotificationLevelApiVersionEnum];
/**
 * @export
 */
export const RoomSetPasswordApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomSetPasswordApiVersionEnum = typeof RoomSetPasswordApiVersionEnum[keyof typeof RoomSetPasswordApiVersionEnum];
/**
 * @export
 */
export const RoomSetPermissionsApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomSetPermissionsApiVersionEnum = typeof RoomSetPermissionsApiVersionEnum[keyof typeof RoomSetPermissionsApiVersionEnum];
/**
 * @export
 */
export const RoomSetPermissionsModeEnum = {
    Call: 'call',
    Default: 'default'
} as const;
export type RoomSetPermissionsModeEnum = typeof RoomSetPermissionsModeEnum[keyof typeof RoomSetPermissionsModeEnum];
/**
 * @export
 */
export const RoomSetReadOnlyStateEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type RoomSetReadOnlyStateEnum = typeof RoomSetReadOnlyStateEnum[keyof typeof RoomSetReadOnlyStateEnum];
/**
 * @export
 */
export const RoomSetReadOnlyApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomSetReadOnlyApiVersionEnum = typeof RoomSetReadOnlyApiVersionEnum[keyof typeof RoomSetReadOnlyApiVersionEnum];
/**
 * @export
 */
export const RoomSetRecordingConsentApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomSetRecordingConsentApiVersionEnum = typeof RoomSetRecordingConsentApiVersionEnum[keyof typeof RoomSetRecordingConsentApiVersionEnum];
/**
 * @export
 */
export const RoomSetSessionStateStateEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type RoomSetSessionStateStateEnum = typeof RoomSetSessionStateStateEnum[keyof typeof RoomSetSessionStateStateEnum];
/**
 * @export
 */
export const RoomSetSessionStateApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomSetSessionStateApiVersionEnum = typeof RoomSetSessionStateApiVersionEnum[keyof typeof RoomSetSessionStateApiVersionEnum];
/**
 * @export
 */
export const RoomSetsipEnabledStateEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;
export type RoomSetsipEnabledStateEnum = typeof RoomSetsipEnabledStateEnum[keyof typeof RoomSetsipEnabledStateEnum];
/**
 * @export
 */
export const RoomSetsipEnabledApiVersionEnum = {
    V4: 'v4'
} as const;
export type RoomSetsipEnabledApiVersionEnum = typeof RoomSetsipEnabledApiVersionEnum[keyof typeof RoomSetsipEnabledApiVersionEnum];
