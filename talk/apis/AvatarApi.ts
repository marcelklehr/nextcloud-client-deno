/* tslint:disable */
/* eslint-disable */
/**
 * spreed
 * Chat, video & audio-conferencing using WebRTC
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  AvatarUploadAvatar200Response,
  AvatarUploadAvatar400Response,
} from '../models/index.ts';
import {
    AvatarUploadAvatar200ResponseFromJSON,
    AvatarUploadAvatar200ResponseToJSON,
    AvatarUploadAvatar400ResponseFromJSON,
    AvatarUploadAvatar400ResponseToJSON,
} from '../models/index.ts';

export interface AvatarDeleteAvatarRequest {
    apiVersion: AvatarDeleteAvatarApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface AvatarEmojiAvatarRequest {
    emoji: string;
    apiVersion: AvatarEmojiAvatarApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
    color?: string;
}

export interface AvatarGetAvatarRequest {
    apiVersion: AvatarGetAvatarApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
    darkTheme?: AvatarGetAvatarDarkThemeEnum;
}

export interface AvatarGetAvatarDarkRequest {
    apiVersion: AvatarGetAvatarDarkApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface AvatarUploadAvatarRequest {
    apiVersion: AvatarUploadAvatarApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

/**
 * 
 */
export class AvatarApi extends runtime.BaseAPI {

    /**
     * Delete the avatar of a room
     */
    async avatarDeleteAvatarRaw(requestParameters: AvatarDeleteAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvatarUploadAvatar200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling avatarDeleteAvatar().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling avatarDeleteAvatar().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling avatarDeleteAvatar().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/avatar`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvatarUploadAvatar200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete the avatar of a room
     */
    async avatarDeleteAvatar(requestParameters: AvatarDeleteAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvatarUploadAvatar200Response> {
        const response = await this.avatarDeleteAvatarRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set an emoji as avatar
     */
    async avatarEmojiAvatarRaw(requestParameters: AvatarEmojiAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvatarUploadAvatar200Response>> {
        if (requestParameters['emoji'] == null) {
            throw new runtime.RequiredError(
                'emoji',
                'Required parameter "emoji" was null or undefined when calling avatarEmojiAvatar().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling avatarEmojiAvatar().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling avatarEmojiAvatar().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling avatarEmojiAvatar().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['emoji'] != null) {
            queryParameters['emoji'] = requestParameters['emoji'];
        }

        if (requestParameters['color'] != null) {
            queryParameters['color'] = requestParameters['color'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/avatar/emoji`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvatarUploadAvatar200ResponseFromJSON(jsonValue));
    }

    /**
     * Set an emoji as avatar
     */
    async avatarEmojiAvatar(requestParameters: AvatarEmojiAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvatarUploadAvatar200Response> {
        const response = await this.avatarEmojiAvatarRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the avatar of a room
     */
    async avatarGetAvatarRaw(requestParameters: AvatarGetAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling avatarGetAvatar().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling avatarGetAvatar().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling avatarGetAvatar().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['darkTheme'] != null) {
            queryParameters['darkTheme'] = requestParameters['darkTheme'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/avatar`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get the avatar of a room
     */
    async avatarGetAvatar(requestParameters: AvatarGetAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.avatarGetAvatarRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the dark mode avatar of a room
     */
    async avatarGetAvatarDarkRaw(requestParameters: AvatarGetAvatarDarkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling avatarGetAvatarDark().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling avatarGetAvatarDark().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling avatarGetAvatarDark().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/avatar/dark`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get the dark mode avatar of a room
     */
    async avatarGetAvatarDark(requestParameters: AvatarGetAvatarDarkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.avatarGetAvatarDarkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload an avatar for a room
     */
    async avatarUploadAvatarRaw(requestParameters: AvatarUploadAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvatarUploadAvatar200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling avatarUploadAvatar().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling avatarUploadAvatar().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling avatarUploadAvatar().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/room/{token}/avatar`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvatarUploadAvatar200ResponseFromJSON(jsonValue));
    }

    /**
     * Upload an avatar for a room
     */
    async avatarUploadAvatar(requestParameters: AvatarUploadAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvatarUploadAvatar200Response> {
        const response = await this.avatarUploadAvatarRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AvatarDeleteAvatarApiVersionEnum = {
    V1: 'v1'
} as const;
export type AvatarDeleteAvatarApiVersionEnum = typeof AvatarDeleteAvatarApiVersionEnum[keyof typeof AvatarDeleteAvatarApiVersionEnum];
/**
 * @export
 */
export const AvatarEmojiAvatarApiVersionEnum = {
    V1: 'v1'
} as const;
export type AvatarEmojiAvatarApiVersionEnum = typeof AvatarEmojiAvatarApiVersionEnum[keyof typeof AvatarEmojiAvatarApiVersionEnum];
/**
 * @export
 */
export const AvatarGetAvatarApiVersionEnum = {
    V1: 'v1'
} as const;
export type AvatarGetAvatarApiVersionEnum = typeof AvatarGetAvatarApiVersionEnum[keyof typeof AvatarGetAvatarApiVersionEnum];
/**
 * @export
 */
export const AvatarGetAvatarDarkThemeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type AvatarGetAvatarDarkThemeEnum = typeof AvatarGetAvatarDarkThemeEnum[keyof typeof AvatarGetAvatarDarkThemeEnum];
/**
 * @export
 */
export const AvatarGetAvatarDarkApiVersionEnum = {
    V1: 'v1'
} as const;
export type AvatarGetAvatarDarkApiVersionEnum = typeof AvatarGetAvatarDarkApiVersionEnum[keyof typeof AvatarGetAvatarDarkApiVersionEnum];
/**
 * @export
 */
export const AvatarUploadAvatarApiVersionEnum = {
    V1: 'v1'
} as const;
export type AvatarUploadAvatarApiVersionEnum = typeof AvatarUploadAvatarApiVersionEnum[keyof typeof AvatarUploadAvatarApiVersionEnum];
