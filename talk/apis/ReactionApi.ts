/* tslint:disable */
/* eslint-disable */
/**
 * spreed
 * Chat, video & audio-conferencing using WebRTC
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  BanUnbanActor200Response,
  ReactionGetReactions200Response,
} from '../models/index.ts';
import {
    BanUnbanActor200ResponseFromJSON,
    BanUnbanActor200ResponseToJSON,
    ReactionGetReactions200ResponseFromJSON,
    ReactionGetReactions200ResponseToJSON,
} from '../models/index.ts';

export interface ReactionDeleteRequest {
    reaction: string;
    apiVersion: ReactionDeleteApiVersionEnum;
    token: string;
    messageId: number;
    oCSAPIRequest: boolean;
}

export interface ReactionGetReactionsRequest {
    apiVersion: ReactionGetReactionsApiVersionEnum;
    token: string;
    messageId: number;
    oCSAPIRequest: boolean;
    reaction?: string;
}

export interface ReactionReactRequest {
    reaction: string;
    apiVersion: ReactionReactApiVersionEnum;
    token: string;
    messageId: number;
    oCSAPIRequest: boolean;
}

/**
 * 
 */
export class ReactionApi extends runtime.BaseAPI {

    /**
     * Delete a reaction from a message
     */
    async reactionDeleteRaw(requestParameters: ReactionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReactionGetReactions200Response>> {
        if (requestParameters['reaction'] == null) {
            throw new runtime.RequiredError(
                'reaction',
                'Required parameter "reaction" was null or undefined when calling reactionDelete().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling reactionDelete().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling reactionDelete().'
            );
        }

        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling reactionDelete().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling reactionDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['reaction'] != null) {
            queryParameters['reaction'] = requestParameters['reaction'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/reaction/{token}/{messageId}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))).replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters['messageId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReactionGetReactions200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a reaction from a message
     */
    async reactionDelete(requestParameters: ReactionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReactionGetReactions200Response> {
        const response = await this.reactionDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of reactions for a message
     */
    async reactionGetReactionsRaw(requestParameters: ReactionGetReactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReactionGetReactions200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling reactionGetReactions().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling reactionGetReactions().'
            );
        }

        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling reactionGetReactions().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling reactionGetReactions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['reaction'] != null) {
            queryParameters['reaction'] = requestParameters['reaction'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/reaction/{token}/{messageId}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))).replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters['messageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReactionGetReactions200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of reactions for a message
     */
    async reactionGetReactions(requestParameters: ReactionGetReactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReactionGetReactions200Response> {
        const response = await this.reactionGetReactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a reaction to a message
     */
    async reactionReactRaw(requestParameters: ReactionReactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReactionGetReactions200Response>> {
        if (requestParameters['reaction'] == null) {
            throw new runtime.RequiredError(
                'reaction',
                'Required parameter "reaction" was null or undefined when calling reactionReact().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling reactionReact().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling reactionReact().'
            );
        }

        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling reactionReact().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling reactionReact().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['reaction'] != null) {
            queryParameters['reaction'] = requestParameters['reaction'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/reaction/{token}/{messageId}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))).replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters['messageId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReactionGetReactions200ResponseFromJSON(jsonValue));
    }

    /**
     * Add a reaction to a message
     */
    async reactionReact(requestParameters: ReactionReactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReactionGetReactions200Response> {
        const response = await this.reactionReactRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ReactionDeleteApiVersionEnum = {
    V1: 'v1'
} as const;
export type ReactionDeleteApiVersionEnum = typeof ReactionDeleteApiVersionEnum[keyof typeof ReactionDeleteApiVersionEnum];
/**
 * @export
 */
export const ReactionGetReactionsApiVersionEnum = {
    V1: 'v1'
} as const;
export type ReactionGetReactionsApiVersionEnum = typeof ReactionGetReactionsApiVersionEnum[keyof typeof ReactionGetReactionsApiVersionEnum];
/**
 * @export
 */
export const ReactionReactApiVersionEnum = {
    V1: 'v1'
} as const;
export type ReactionReactApiVersionEnum = typeof ReactionReactApiVersionEnum[keyof typeof ReactionReactApiVersionEnum];
