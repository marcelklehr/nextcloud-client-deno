/* tslint:disable */
/* eslint-disable */
/**
 * spreed
 * Chat, video & audio-conferencing using WebRTC
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  AvatarUploadAvatar200Response,
  BanBanActor400Response,
  BreakoutRoomConfigureBreakoutRooms200Response,
} from '../models/index.ts';
import {
    AvatarUploadAvatar200ResponseFromJSON,
    AvatarUploadAvatar200ResponseToJSON,
    BanBanActor400ResponseFromJSON,
    BanBanActor400ResponseToJSON,
    BreakoutRoomConfigureBreakoutRooms200ResponseFromJSON,
    BreakoutRoomConfigureBreakoutRooms200ResponseToJSON,
} from '../models/index.ts';

export interface BreakoutRoomApplyAttendeeMapRequest {
    attendeeMap: string;
    apiVersion: BreakoutRoomApplyAttendeeMapApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface BreakoutRoomBroadcastChatMessageRequest {
    message: string;
    apiVersion: BreakoutRoomBroadcastChatMessageApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface BreakoutRoomConfigureBreakoutRoomsRequest {
    mode: BreakoutRoomConfigureBreakoutRoomsModeEnum;
    amount: number;
    apiVersion: BreakoutRoomConfigureBreakoutRoomsApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
    attendeeMap?: string;
}

export interface BreakoutRoomRemoveBreakoutRoomsRequest {
    apiVersion: BreakoutRoomRemoveBreakoutRoomsApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface BreakoutRoomRequestAssistanceRequest {
    apiVersion: BreakoutRoomRequestAssistanceApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface BreakoutRoomResetRequestForAssistanceRequest {
    apiVersion: BreakoutRoomResetRequestForAssistanceApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface BreakoutRoomStartBreakoutRoomsRequest {
    apiVersion: BreakoutRoomStartBreakoutRoomsApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface BreakoutRoomStopBreakoutRoomsRequest {
    apiVersion: BreakoutRoomStopBreakoutRoomsApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface BreakoutRoomSwitchBreakoutRoomRequest {
    target: string;
    apiVersion: BreakoutRoomSwitchBreakoutRoomApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

/**
 * 
 */
export class BreakoutRoomApi extends runtime.BaseAPI {

    /**
     * Apply an attendee map to the breakout rooms
     */
    async breakoutRoomApplyAttendeeMapRaw(requestParameters: BreakoutRoomApplyAttendeeMapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BreakoutRoomConfigureBreakoutRooms200Response>> {
        if (requestParameters['attendeeMap'] == null) {
            throw new runtime.RequiredError(
                'attendeeMap',
                'Required parameter "attendeeMap" was null or undefined when calling breakoutRoomApplyAttendeeMap().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling breakoutRoomApplyAttendeeMap().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling breakoutRoomApplyAttendeeMap().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling breakoutRoomApplyAttendeeMap().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['attendeeMap'] != null) {
            queryParameters['attendeeMap'] = requestParameters['attendeeMap'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/breakout-rooms/{token}/attendees`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BreakoutRoomConfigureBreakoutRooms200ResponseFromJSON(jsonValue));
    }

    /**
     * Apply an attendee map to the breakout rooms
     */
    async breakoutRoomApplyAttendeeMap(requestParameters: BreakoutRoomApplyAttendeeMapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BreakoutRoomConfigureBreakoutRooms200Response> {
        const response = await this.breakoutRoomApplyAttendeeMapRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Broadcast a chat message to all breakout rooms
     */
    async breakoutRoomBroadcastChatMessageRaw(requestParameters: BreakoutRoomBroadcastChatMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BreakoutRoomConfigureBreakoutRooms200Response>> {
        if (requestParameters['message'] == null) {
            throw new runtime.RequiredError(
                'message',
                'Required parameter "message" was null or undefined when calling breakoutRoomBroadcastChatMessage().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling breakoutRoomBroadcastChatMessage().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling breakoutRoomBroadcastChatMessage().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling breakoutRoomBroadcastChatMessage().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['message'] != null) {
            queryParameters['message'] = requestParameters['message'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/breakout-rooms/{token}/broadcast`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BreakoutRoomConfigureBreakoutRooms200ResponseFromJSON(jsonValue));
    }

    /**
     * Broadcast a chat message to all breakout rooms
     */
    async breakoutRoomBroadcastChatMessage(requestParameters: BreakoutRoomBroadcastChatMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BreakoutRoomConfigureBreakoutRooms200Response> {
        const response = await this.breakoutRoomBroadcastChatMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Configure the breakout rooms
     */
    async breakoutRoomConfigureBreakoutRoomsRaw(requestParameters: BreakoutRoomConfigureBreakoutRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BreakoutRoomConfigureBreakoutRooms200Response>> {
        if (requestParameters['mode'] == null) {
            throw new runtime.RequiredError(
                'mode',
                'Required parameter "mode" was null or undefined when calling breakoutRoomConfigureBreakoutRooms().'
            );
        }

        if (requestParameters['amount'] == null) {
            throw new runtime.RequiredError(
                'amount',
                'Required parameter "amount" was null or undefined when calling breakoutRoomConfigureBreakoutRooms().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling breakoutRoomConfigureBreakoutRooms().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling breakoutRoomConfigureBreakoutRooms().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling breakoutRoomConfigureBreakoutRooms().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['mode'] != null) {
            queryParameters['mode'] = requestParameters['mode'];
        }

        if (requestParameters['amount'] != null) {
            queryParameters['amount'] = requestParameters['amount'];
        }

        if (requestParameters['attendeeMap'] != null) {
            queryParameters['attendeeMap'] = requestParameters['attendeeMap'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/breakout-rooms/{token}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BreakoutRoomConfigureBreakoutRooms200ResponseFromJSON(jsonValue));
    }

    /**
     * Configure the breakout rooms
     */
    async breakoutRoomConfigureBreakoutRooms(requestParameters: BreakoutRoomConfigureBreakoutRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BreakoutRoomConfigureBreakoutRooms200Response> {
        const response = await this.breakoutRoomConfigureBreakoutRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove the breakout rooms
     */
    async breakoutRoomRemoveBreakoutRoomsRaw(requestParameters: BreakoutRoomRemoveBreakoutRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvatarUploadAvatar200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling breakoutRoomRemoveBreakoutRooms().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling breakoutRoomRemoveBreakoutRooms().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling breakoutRoomRemoveBreakoutRooms().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/breakout-rooms/{token}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvatarUploadAvatar200ResponseFromJSON(jsonValue));
    }

    /**
     * Remove the breakout rooms
     */
    async breakoutRoomRemoveBreakoutRooms(requestParameters: BreakoutRoomRemoveBreakoutRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvatarUploadAvatar200Response> {
        const response = await this.breakoutRoomRemoveBreakoutRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request assistance
     */
    async breakoutRoomRequestAssistanceRaw(requestParameters: BreakoutRoomRequestAssistanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvatarUploadAvatar200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling breakoutRoomRequestAssistance().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling breakoutRoomRequestAssistance().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling breakoutRoomRequestAssistance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/breakout-rooms/{token}/request-assistance`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvatarUploadAvatar200ResponseFromJSON(jsonValue));
    }

    /**
     * Request assistance
     */
    async breakoutRoomRequestAssistance(requestParameters: BreakoutRoomRequestAssistanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvatarUploadAvatar200Response> {
        const response = await this.breakoutRoomRequestAssistanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reset the request for assistance
     */
    async breakoutRoomResetRequestForAssistanceRaw(requestParameters: BreakoutRoomResetRequestForAssistanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvatarUploadAvatar200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling breakoutRoomResetRequestForAssistance().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling breakoutRoomResetRequestForAssistance().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling breakoutRoomResetRequestForAssistance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/breakout-rooms/{token}/request-assistance`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvatarUploadAvatar200ResponseFromJSON(jsonValue));
    }

    /**
     * Reset the request for assistance
     */
    async breakoutRoomResetRequestForAssistance(requestParameters: BreakoutRoomResetRequestForAssistanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvatarUploadAvatar200Response> {
        const response = await this.breakoutRoomResetRequestForAssistanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start the breakout rooms
     */
    async breakoutRoomStartBreakoutRoomsRaw(requestParameters: BreakoutRoomStartBreakoutRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BreakoutRoomConfigureBreakoutRooms200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling breakoutRoomStartBreakoutRooms().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling breakoutRoomStartBreakoutRooms().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling breakoutRoomStartBreakoutRooms().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/breakout-rooms/{token}/rooms`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BreakoutRoomConfigureBreakoutRooms200ResponseFromJSON(jsonValue));
    }

    /**
     * Start the breakout rooms
     */
    async breakoutRoomStartBreakoutRooms(requestParameters: BreakoutRoomStartBreakoutRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BreakoutRoomConfigureBreakoutRooms200Response> {
        const response = await this.breakoutRoomStartBreakoutRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stop the breakout rooms
     */
    async breakoutRoomStopBreakoutRoomsRaw(requestParameters: BreakoutRoomStopBreakoutRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BreakoutRoomConfigureBreakoutRooms200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling breakoutRoomStopBreakoutRooms().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling breakoutRoomStopBreakoutRooms().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling breakoutRoomStopBreakoutRooms().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/breakout-rooms/{token}/rooms`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BreakoutRoomConfigureBreakoutRooms200ResponseFromJSON(jsonValue));
    }

    /**
     * Stop the breakout rooms
     */
    async breakoutRoomStopBreakoutRooms(requestParameters: BreakoutRoomStopBreakoutRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BreakoutRoomConfigureBreakoutRooms200Response> {
        const response = await this.breakoutRoomStopBreakoutRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Switch to another breakout room
     */
    async breakoutRoomSwitchBreakoutRoomRaw(requestParameters: BreakoutRoomSwitchBreakoutRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvatarUploadAvatar200Response>> {
        if (requestParameters['target'] == null) {
            throw new runtime.RequiredError(
                'target',
                'Required parameter "target" was null or undefined when calling breakoutRoomSwitchBreakoutRoom().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling breakoutRoomSwitchBreakoutRoom().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling breakoutRoomSwitchBreakoutRoom().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling breakoutRoomSwitchBreakoutRoom().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['target'] != null) {
            queryParameters['target'] = requestParameters['target'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/breakout-rooms/{token}/switch`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvatarUploadAvatar200ResponseFromJSON(jsonValue));
    }

    /**
     * Switch to another breakout room
     */
    async breakoutRoomSwitchBreakoutRoom(requestParameters: BreakoutRoomSwitchBreakoutRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvatarUploadAvatar200Response> {
        const response = await this.breakoutRoomSwitchBreakoutRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const BreakoutRoomApplyAttendeeMapApiVersionEnum = {
    V1: 'v1'
} as const;
export type BreakoutRoomApplyAttendeeMapApiVersionEnum = typeof BreakoutRoomApplyAttendeeMapApiVersionEnum[keyof typeof BreakoutRoomApplyAttendeeMapApiVersionEnum];
/**
 * @export
 */
export const BreakoutRoomBroadcastChatMessageApiVersionEnum = {
    V1: 'v1'
} as const;
export type BreakoutRoomBroadcastChatMessageApiVersionEnum = typeof BreakoutRoomBroadcastChatMessageApiVersionEnum[keyof typeof BreakoutRoomBroadcastChatMessageApiVersionEnum];
/**
 * @export
 */
export const BreakoutRoomConfigureBreakoutRoomsModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;
export type BreakoutRoomConfigureBreakoutRoomsModeEnum = typeof BreakoutRoomConfigureBreakoutRoomsModeEnum[keyof typeof BreakoutRoomConfigureBreakoutRoomsModeEnum];
/**
 * @export
 */
export const BreakoutRoomConfigureBreakoutRoomsApiVersionEnum = {
    V1: 'v1'
} as const;
export type BreakoutRoomConfigureBreakoutRoomsApiVersionEnum = typeof BreakoutRoomConfigureBreakoutRoomsApiVersionEnum[keyof typeof BreakoutRoomConfigureBreakoutRoomsApiVersionEnum];
/**
 * @export
 */
export const BreakoutRoomRemoveBreakoutRoomsApiVersionEnum = {
    V1: 'v1'
} as const;
export type BreakoutRoomRemoveBreakoutRoomsApiVersionEnum = typeof BreakoutRoomRemoveBreakoutRoomsApiVersionEnum[keyof typeof BreakoutRoomRemoveBreakoutRoomsApiVersionEnum];
/**
 * @export
 */
export const BreakoutRoomRequestAssistanceApiVersionEnum = {
    V1: 'v1'
} as const;
export type BreakoutRoomRequestAssistanceApiVersionEnum = typeof BreakoutRoomRequestAssistanceApiVersionEnum[keyof typeof BreakoutRoomRequestAssistanceApiVersionEnum];
/**
 * @export
 */
export const BreakoutRoomResetRequestForAssistanceApiVersionEnum = {
    V1: 'v1'
} as const;
export type BreakoutRoomResetRequestForAssistanceApiVersionEnum = typeof BreakoutRoomResetRequestForAssistanceApiVersionEnum[keyof typeof BreakoutRoomResetRequestForAssistanceApiVersionEnum];
/**
 * @export
 */
export const BreakoutRoomStartBreakoutRoomsApiVersionEnum = {
    V1: 'v1'
} as const;
export type BreakoutRoomStartBreakoutRoomsApiVersionEnum = typeof BreakoutRoomStartBreakoutRoomsApiVersionEnum[keyof typeof BreakoutRoomStartBreakoutRoomsApiVersionEnum];
/**
 * @export
 */
export const BreakoutRoomStopBreakoutRoomsApiVersionEnum = {
    V1: 'v1'
} as const;
export type BreakoutRoomStopBreakoutRoomsApiVersionEnum = typeof BreakoutRoomStopBreakoutRoomsApiVersionEnum[keyof typeof BreakoutRoomStopBreakoutRoomsApiVersionEnum];
/**
 * @export
 */
export const BreakoutRoomSwitchBreakoutRoomApiVersionEnum = {
    V1: 'v1'
} as const;
export type BreakoutRoomSwitchBreakoutRoomApiVersionEnum = typeof BreakoutRoomSwitchBreakoutRoomApiVersionEnum[keyof typeof BreakoutRoomSwitchBreakoutRoomApiVersionEnum];
