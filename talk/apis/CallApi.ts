/* tslint:disable */
/* eslint-disable */
/**
 * spreed
 * Chat, video & audio-conferencing using WebRTC
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  BanBanActor400Response,
  BanUnbanActor200Response,
  CallGetPeersForCall200Response,
  CallJoinCall400Response,
  CallSipDialOut201Response,
} from '../models/index.ts';
import {
    BanBanActor400ResponseFromJSON,
    BanBanActor400ResponseToJSON,
    BanUnbanActor200ResponseFromJSON,
    BanUnbanActor200ResponseToJSON,
    CallGetPeersForCall200ResponseFromJSON,
    CallGetPeersForCall200ResponseToJSON,
    CallJoinCall400ResponseFromJSON,
    CallJoinCall400ResponseToJSON,
    CallSipDialOut201ResponseFromJSON,
    CallSipDialOut201ResponseToJSON,
} from '../models/index.ts';

export interface CallGetPeersForCallRequest {
    apiVersion: CallGetPeersForCallApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface CallJoinCallRequest {
    apiVersion: CallJoinCallApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
    flags?: number;
    forcePermissions?: number;
    silent?: CallJoinCallSilentEnum;
    recordingConsent?: CallJoinCallRecordingConsentEnum;
}

export interface CallLeaveCallRequest {
    apiVersion: CallLeaveCallApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
    all?: CallLeaveCallAllEnum;
}

export interface CallRingAttendeeRequest {
    apiVersion: CallRingAttendeeApiVersionEnum;
    token: string;
    attendeeId: number;
    oCSAPIRequest: boolean;
}

export interface CallSipDialOutRequest {
    apiVersion: CallSipDialOutApiVersionEnum;
    token: string;
    attendeeId: number;
    oCSAPIRequest: boolean;
}

export interface CallUpdateCallFlagsRequest {
    flags: number;
    apiVersion: CallUpdateCallFlagsApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

/**
 * 
 */
export class CallApi extends runtime.BaseAPI {

    /**
     * Get the peers for a call
     */
    async callGetPeersForCallRaw(requestParameters: CallGetPeersForCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CallGetPeersForCall200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling callGetPeersForCall().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling callGetPeersForCall().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling callGetPeersForCall().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/call/{token}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CallGetPeersForCall200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the peers for a call
     */
    async callGetPeersForCall(requestParameters: CallGetPeersForCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CallGetPeersForCall200Response> {
        const response = await this.callGetPeersForCallRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Join a call
     */
    async callJoinCallRaw(requestParameters: CallJoinCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling callJoinCall().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling callJoinCall().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling callJoinCall().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['flags'] != null) {
            queryParameters['flags'] = requestParameters['flags'];
        }

        if (requestParameters['forcePermissions'] != null) {
            queryParameters['forcePermissions'] = requestParameters['forcePermissions'];
        }

        if (requestParameters['silent'] != null) {
            queryParameters['silent'] = requestParameters['silent'];
        }

        if (requestParameters['recordingConsent'] != null) {
            queryParameters['recordingConsent'] = requestParameters['recordingConsent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/call/{token}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Join a call
     */
    async callJoinCall(requestParameters: CallJoinCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.callJoinCallRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Leave a call
     */
    async callLeaveCallRaw(requestParameters: CallLeaveCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling callLeaveCall().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling callLeaveCall().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling callLeaveCall().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['all'] != null) {
            queryParameters['all'] = requestParameters['all'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/call/{token}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Leave a call
     */
    async callLeaveCall(requestParameters: CallLeaveCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.callLeaveCallRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Ring an attendee
     */
    async callRingAttendeeRaw(requestParameters: CallRingAttendeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling callRingAttendee().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling callRingAttendee().'
            );
        }

        if (requestParameters['attendeeId'] == null) {
            throw new runtime.RequiredError(
                'attendeeId',
                'Required parameter "attendeeId" was null or undefined when calling callRingAttendee().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling callRingAttendee().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/call/{token}/ring/{attendeeId}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))).replace(`{${"attendeeId"}}`, encodeURIComponent(String(requestParameters['attendeeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Ring an attendee
     */
    async callRingAttendee(requestParameters: CallRingAttendeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.callRingAttendeeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Call a SIP dial-out attendee
     */
    async callSipDialOutRaw(requestParameters: CallSipDialOutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CallSipDialOut201Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling callSipDialOut().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling callSipDialOut().'
            );
        }

        if (requestParameters['attendeeId'] == null) {
            throw new runtime.RequiredError(
                'attendeeId',
                'Required parameter "attendeeId" was null or undefined when calling callSipDialOut().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling callSipDialOut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/call/{token}/dialout/{attendeeId}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))).replace(`{${"attendeeId"}}`, encodeURIComponent(String(requestParameters['attendeeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CallSipDialOut201ResponseFromJSON(jsonValue));
    }

    /**
     * Call a SIP dial-out attendee
     */
    async callSipDialOut(requestParameters: CallSipDialOutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CallSipDialOut201Response> {
        const response = await this.callSipDialOutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the in-call flags
     */
    async callUpdateCallFlagsRaw(requestParameters: CallUpdateCallFlagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['flags'] == null) {
            throw new runtime.RequiredError(
                'flags',
                'Required parameter "flags" was null or undefined when calling callUpdateCallFlags().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling callUpdateCallFlags().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling callUpdateCallFlags().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling callUpdateCallFlags().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['flags'] != null) {
            queryParameters['flags'] = requestParameters['flags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/call/{token}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Update the in-call flags
     */
    async callUpdateCallFlags(requestParameters: CallUpdateCallFlagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.callUpdateCallFlagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CallGetPeersForCallApiVersionEnum = {
    V4: 'v4'
} as const;
export type CallGetPeersForCallApiVersionEnum = typeof CallGetPeersForCallApiVersionEnum[keyof typeof CallGetPeersForCallApiVersionEnum];
/**
 * @export
 */
export const CallJoinCallApiVersionEnum = {
    V4: 'v4'
} as const;
export type CallJoinCallApiVersionEnum = typeof CallJoinCallApiVersionEnum[keyof typeof CallJoinCallApiVersionEnum];
/**
 * @export
 */
export const CallJoinCallSilentEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type CallJoinCallSilentEnum = typeof CallJoinCallSilentEnum[keyof typeof CallJoinCallSilentEnum];
/**
 * @export
 */
export const CallJoinCallRecordingConsentEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type CallJoinCallRecordingConsentEnum = typeof CallJoinCallRecordingConsentEnum[keyof typeof CallJoinCallRecordingConsentEnum];
/**
 * @export
 */
export const CallLeaveCallApiVersionEnum = {
    V4: 'v4'
} as const;
export type CallLeaveCallApiVersionEnum = typeof CallLeaveCallApiVersionEnum[keyof typeof CallLeaveCallApiVersionEnum];
/**
 * @export
 */
export const CallLeaveCallAllEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type CallLeaveCallAllEnum = typeof CallLeaveCallAllEnum[keyof typeof CallLeaveCallAllEnum];
/**
 * @export
 */
export const CallRingAttendeeApiVersionEnum = {
    V4: 'v4'
} as const;
export type CallRingAttendeeApiVersionEnum = typeof CallRingAttendeeApiVersionEnum[keyof typeof CallRingAttendeeApiVersionEnum];
/**
 * @export
 */
export const CallSipDialOutApiVersionEnum = {
    V4: 'v4'
} as const;
export type CallSipDialOutApiVersionEnum = typeof CallSipDialOutApiVersionEnum[keyof typeof CallSipDialOutApiVersionEnum];
/**
 * @export
 */
export const CallUpdateCallFlagsApiVersionEnum = {
    V4: 'v4'
} as const;
export type CallUpdateCallFlagsApiVersionEnum = typeof CallUpdateCallFlagsApiVersionEnum[keyof typeof CallUpdateCallFlagsApiVersionEnum];
