/* tslint:disable */
/* eslint-disable */
/**
 * spreed
 * Chat, video & audio-conferencing using WebRTC
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  BanBanActor400Response,
  BotEnableBot200Response,
  BotListBots200Response,
} from '../models/index.ts';
import {
    BanBanActor400ResponseFromJSON,
    BanBanActor400ResponseToJSON,
    BotEnableBot200ResponseFromJSON,
    BotEnableBot200ResponseToJSON,
    BotListBots200ResponseFromJSON,
    BotListBots200ResponseToJSON,
} from '../models/index.ts';

export interface BotDisableBotRequest {
    apiVersion: BotDisableBotApiVersionEnum;
    token: string;
    botId: number;
    oCSAPIRequest: boolean;
}

export interface BotEnableBotRequest {
    apiVersion: BotEnableBotApiVersionEnum;
    token: string;
    botId: number;
    oCSAPIRequest: boolean;
}

export interface BotListBotsRequest {
    apiVersion: BotListBotsApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

/**
 * 
 */
export class BotApi extends runtime.BaseAPI {

    /**
     * Disables a bot
     */
    async botDisableBotRaw(requestParameters: BotDisableBotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BotEnableBot200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling botDisableBot().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling botDisableBot().'
            );
        }

        if (requestParameters['botId'] == null) {
            throw new runtime.RequiredError(
                'botId',
                'Required parameter "botId" was null or undefined when calling botDisableBot().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling botDisableBot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/bot/{token}/{botId}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))).replace(`{${"botId"}}`, encodeURIComponent(String(requestParameters['botId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BotEnableBot200ResponseFromJSON(jsonValue));
    }

    /**
     * Disables a bot
     */
    async botDisableBot(requestParameters: BotDisableBotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BotEnableBot200Response> {
        const response = await this.botDisableBotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enables a bot
     */
    async botEnableBotRaw(requestParameters: BotEnableBotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BotEnableBot200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling botEnableBot().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling botEnableBot().'
            );
        }

        if (requestParameters['botId'] == null) {
            throw new runtime.RequiredError(
                'botId',
                'Required parameter "botId" was null or undefined when calling botEnableBot().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling botEnableBot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/bot/{token}/{botId}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))).replace(`{${"botId"}}`, encodeURIComponent(String(requestParameters['botId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BotEnableBot200ResponseFromJSON(jsonValue));
    }

    /**
     * Enables a bot
     */
    async botEnableBot(requestParameters: BotEnableBotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BotEnableBot200Response> {
        const response = await this.botEnableBotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List bots
     */
    async botListBotsRaw(requestParameters: BotListBotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BotListBots200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling botListBots().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling botListBots().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling botListBots().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/bot/{token}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BotListBots200ResponseFromJSON(jsonValue));
    }

    /**
     * List bots
     */
    async botListBots(requestParameters: BotListBotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BotListBots200Response> {
        const response = await this.botListBotsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const BotDisableBotApiVersionEnum = {
    V1: 'v1'
} as const;
export type BotDisableBotApiVersionEnum = typeof BotDisableBotApiVersionEnum[keyof typeof BotDisableBotApiVersionEnum];
/**
 * @export
 */
export const BotEnableBotApiVersionEnum = {
    V1: 'v1'
} as const;
export type BotEnableBotApiVersionEnum = typeof BotEnableBotApiVersionEnum[keyof typeof BotEnableBotApiVersionEnum];
/**
 * @export
 */
export const BotListBotsApiVersionEnum = {
    V1: 'v1'
} as const;
export type BotListBotsApiVersionEnum = typeof BotListBotsApiVersionEnum[keyof typeof BotListBotsApiVersionEnum];
