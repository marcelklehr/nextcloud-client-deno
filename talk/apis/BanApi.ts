/* tslint:disable */
/* eslint-disable */
/**
 * spreed
 * Chat, video & audio-conferencing using WebRTC
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  BanBanActor200Response,
  BanBanActor400Response,
  BanListBans200Response,
  BanUnbanActor200Response,
} from '../models/index.ts';
import {
    BanBanActor200ResponseFromJSON,
    BanBanActor200ResponseToJSON,
    BanBanActor400ResponseFromJSON,
    BanBanActor400ResponseToJSON,
    BanListBans200ResponseFromJSON,
    BanListBans200ResponseToJSON,
    BanUnbanActor200ResponseFromJSON,
    BanUnbanActor200ResponseToJSON,
} from '../models/index.ts';

export interface BanBanActorRequest {
    actorType: BanBanActorActorTypeEnum;
    actorId: string;
    apiVersion: BanBanActorApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
    internalNote?: string;
}

export interface BanListBansRequest {
    apiVersion: BanListBansApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

export interface BanUnbanActorRequest {
    banId: number;
    apiVersion: BanUnbanActorApiVersionEnum;
    token: string;
    oCSAPIRequest: boolean;
}

/**
 * 
 */
export class BanApi extends runtime.BaseAPI {

    /**
     * Required capability: `ban-v1`
     * Ban an actor or IP address
     */
    async banBanActorRaw(requestParameters: BanBanActorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanBanActor200Response>> {
        if (requestParameters['actorType'] == null) {
            throw new runtime.RequiredError(
                'actorType',
                'Required parameter "actorType" was null or undefined when calling banBanActor().'
            );
        }

        if (requestParameters['actorId'] == null) {
            throw new runtime.RequiredError(
                'actorId',
                'Required parameter "actorId" was null or undefined when calling banBanActor().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling banBanActor().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling banBanActor().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling banBanActor().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['actorType'] != null) {
            queryParameters['actorType'] = requestParameters['actorType'];
        }

        if (requestParameters['actorId'] != null) {
            queryParameters['actorId'] = requestParameters['actorId'];
        }

        if (requestParameters['internalNote'] != null) {
            queryParameters['internalNote'] = requestParameters['internalNote'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/ban/{token}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanBanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Required capability: `ban-v1`
     * Ban an actor or IP address
     */
    async banBanActor(requestParameters: BanBanActorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanBanActor200Response> {
        const response = await this.banBanActorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Required capability: `ban-v1`
     * List the bans of a conversation
     */
    async banListBansRaw(requestParameters: BanListBansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanListBans200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling banListBans().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling banListBans().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling banListBans().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/ban/{token}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanListBans200ResponseFromJSON(jsonValue));
    }

    /**
     * Required capability: `ban-v1`
     * List the bans of a conversation
     */
    async banListBans(requestParameters: BanListBansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanListBans200Response> {
        const response = await this.banListBansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Required capability: `ban-v1`
     * Unban an actor or IP address
     */
    async banUnbanActorRaw(requestParameters: BanUnbanActorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BanUnbanActor200Response>> {
        if (requestParameters['banId'] == null) {
            throw new runtime.RequiredError(
                'banId',
                'Required parameter "banId" was null or undefined when calling banUnbanActor().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling banUnbanActor().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling banUnbanActor().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling banUnbanActor().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['banId'] != null) {
            queryParameters['banId'] = requestParameters['banId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/spreed/api/{apiVersion}/ban/{token}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BanUnbanActor200ResponseFromJSON(jsonValue));
    }

    /**
     * Required capability: `ban-v1`
     * Unban an actor or IP address
     */
    async banUnbanActor(requestParameters: BanUnbanActorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BanUnbanActor200Response> {
        const response = await this.banUnbanActorRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const BanBanActorActorTypeEnum = {
    Users: 'users',
    Groups: 'groups',
    Circles: 'circles',
    Emails: 'emails',
    FederatedUsers: 'federated_users',
    Phones: 'phones',
    Ip: 'ip'
} as const;
export type BanBanActorActorTypeEnum = typeof BanBanActorActorTypeEnum[keyof typeof BanBanActorActorTypeEnum];
/**
 * @export
 */
export const BanBanActorApiVersionEnum = {
    V1: 'v1'
} as const;
export type BanBanActorApiVersionEnum = typeof BanBanActorApiVersionEnum[keyof typeof BanBanActorApiVersionEnum];
/**
 * @export
 */
export const BanListBansApiVersionEnum = {
    V1: 'v1'
} as const;
export type BanListBansApiVersionEnum = typeof BanListBansApiVersionEnum[keyof typeof BanListBansApiVersionEnum];
/**
 * @export
 */
export const BanUnbanActorApiVersionEnum = {
    V1: 'v1'
} as const;
export type BanUnbanActorApiVersionEnum = typeof BanUnbanActorApiVersionEnum[keyof typeof BanUnbanActorApiVersionEnum];
