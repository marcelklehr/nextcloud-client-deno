/* tslint:disable */
/* eslint-disable */
/**
 * spreed
 * Chat, video & audio-conferencing using WebRTC
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.ts';
/**
 * 
 * @export
 * @interface Participant
 */
export interface Participant {
    /**
     * 
     * @type {string}
     * @memberof Participant
     */
    actorId: string;
    /**
     * 
     * @type {string}
     * @memberof Participant
     */
    actorType: string;
    /**
     * 
     * @type {number}
     * @memberof Participant
     */
    attendeeId: number;
    /**
     * 
     * @type {number}
     * @memberof Participant
     */
    attendeePermissions: number;
    /**
     * 
     * @type {string}
     * @memberof Participant
     */
    attendeePin: string;
    /**
     * 
     * @type {string}
     * @memberof Participant
     */
    displayName: string;
    /**
     * 
     * @type {number}
     * @memberof Participant
     */
    inCall: number;
    /**
     * 
     * @type {number}
     * @memberof Participant
     */
    lastPing: number;
    /**
     * 
     * @type {number}
     * @memberof Participant
     */
    participantType: number;
    /**
     * 
     * @type {number}
     * @memberof Participant
     */
    permissions: number;
    /**
     * 
     * @type {string}
     * @memberof Participant
     */
    roomToken: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Participant
     */
    sessionIds: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Participant
     */
    status?: string;
    /**
     * 
     * @type {number}
     * @memberof Participant
     */
    statusClearAt?: number;
    /**
     * 
     * @type {string}
     * @memberof Participant
     */
    statusIcon?: string;
    /**
     * 
     * @type {string}
     * @memberof Participant
     */
    statusMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof Participant
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Participant
     */
    callId?: string;
}

/**
 * Check if a given object implements the Participant interface.
 */
export function instanceOfParticipant(value: object): value is Participant {
    if (!('actorId' in value) || value['actorId'] === undefined) return false;
    if (!('actorType' in value) || value['actorType'] === undefined) return false;
    if (!('attendeeId' in value) || value['attendeeId'] === undefined) return false;
    if (!('attendeePermissions' in value) || value['attendeePermissions'] === undefined) return false;
    if (!('attendeePin' in value) || value['attendeePin'] === undefined) return false;
    if (!('displayName' in value) || value['displayName'] === undefined) return false;
    if (!('inCall' in value) || value['inCall'] === undefined) return false;
    if (!('lastPing' in value) || value['lastPing'] === undefined) return false;
    if (!('participantType' in value) || value['participantType'] === undefined) return false;
    if (!('permissions' in value) || value['permissions'] === undefined) return false;
    if (!('roomToken' in value) || value['roomToken'] === undefined) return false;
    if (!('sessionIds' in value) || value['sessionIds'] === undefined) return false;
    return true;
}

export function ParticipantFromJSON(json: any): Participant {
    return ParticipantFromJSONTyped(json, false);
}

export function ParticipantFromJSONTyped(json: any, ignoreDiscriminator: boolean): Participant {
    if (json == null) {
        return json;
    }
    return {
        
        'actorId': json['actorId'],
        'actorType': json['actorType'],
        'attendeeId': json['attendeeId'],
        'attendeePermissions': json['attendeePermissions'],
        'attendeePin': json['attendeePin'],
        'displayName': json['displayName'],
        'inCall': json['inCall'],
        'lastPing': json['lastPing'],
        'participantType': json['participantType'],
        'permissions': json['permissions'],
        'roomToken': json['roomToken'],
        'sessionIds': json['sessionIds'],
        'status': json['status'] == null ? undefined : json['status'],
        'statusClearAt': json['statusClearAt'] == null ? undefined : json['statusClearAt'],
        'statusIcon': json['statusIcon'] == null ? undefined : json['statusIcon'],
        'statusMessage': json['statusMessage'] == null ? undefined : json['statusMessage'],
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'callId': json['callId'] == null ? undefined : json['callId'],
    };
}

export function ParticipantToJSON(value?: Participant | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'actorId': value['actorId'],
        'actorType': value['actorType'],
        'attendeeId': value['attendeeId'],
        'attendeePermissions': value['attendeePermissions'],
        'attendeePin': value['attendeePin'],
        'displayName': value['displayName'],
        'inCall': value['inCall'],
        'lastPing': value['lastPing'],
        'participantType': value['participantType'],
        'permissions': value['permissions'],
        'roomToken': value['roomToken'],
        'sessionIds': value['sessionIds'],
        'status': value['status'],
        'statusClearAt': value['statusClearAt'],
        'statusIcon': value['statusIcon'],
        'statusMessage': value['statusMessage'],
        'phoneNumber': value['phoneNumber'],
        'callId': value['callId'],
    };
}

