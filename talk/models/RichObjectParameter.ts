/* tslint:disable */
/* eslint-disable */
/**
 * spreed
 * Chat, video & audio-conferencing using WebRTC
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.ts';
/**
 * 
 * @export
 * @interface RichObjectParameter
 */
export interface RichObjectParameter {
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    server?: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    link?: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    callType?: RichObjectParameterCallTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    iconUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    messageId?: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    boardname?: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    stackname?: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    size?: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    path?: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    mimetype?: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    previewAvailable?: RichObjectParameterPreviewAvailableEnum;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    mtime?: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    latitude?: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    longitude?: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    thumb?: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    website?: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    visibility?: RichObjectParameterVisibilityEnum;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    assignable?: RichObjectParameterAssignableEnum;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    conversation?: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    etag?: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    permissions?: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    width?: string;
    /**
     * 
     * @type {string}
     * @memberof RichObjectParameter
     */
    height?: string;
}


/**
 * @export
 */
export const RichObjectParameterCallTypeEnum = {
    One2one: 'one2one',
    Group: 'group',
    Public: 'public'
} as const;
export type RichObjectParameterCallTypeEnum = typeof RichObjectParameterCallTypeEnum[keyof typeof RichObjectParameterCallTypeEnum];

/**
 * @export
 */
export const RichObjectParameterPreviewAvailableEnum = {
    Yes: 'yes',
    No: 'no'
} as const;
export type RichObjectParameterPreviewAvailableEnum = typeof RichObjectParameterPreviewAvailableEnum[keyof typeof RichObjectParameterPreviewAvailableEnum];

/**
 * @export
 */
export const RichObjectParameterVisibilityEnum = {
    _0: '0',
    _1: '1'
} as const;
export type RichObjectParameterVisibilityEnum = typeof RichObjectParameterVisibilityEnum[keyof typeof RichObjectParameterVisibilityEnum];

/**
 * @export
 */
export const RichObjectParameterAssignableEnum = {
    _0: '0',
    _1: '1'
} as const;
export type RichObjectParameterAssignableEnum = typeof RichObjectParameterAssignableEnum[keyof typeof RichObjectParameterAssignableEnum];


/**
 * Check if a given object implements the RichObjectParameter interface.
 */
export function instanceOfRichObjectParameter(value: object): value is RichObjectParameter {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function RichObjectParameterFromJSON(json: any): RichObjectParameter {
    return RichObjectParameterFromJSONTyped(json, false);
}

export function RichObjectParameterFromJSONTyped(json: any, ignoreDiscriminator: boolean): RichObjectParameter {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'id': json['id'],
        'name': json['name'],
        'server': json['server'] == null ? undefined : json['server'],
        'link': json['link'] == null ? undefined : json['link'],
        'callType': json['call-type'] == null ? undefined : json['call-type'],
        'iconUrl': json['icon-url'] == null ? undefined : json['icon-url'],
        'messageId': json['message-id'] == null ? undefined : json['message-id'],
        'boardname': json['boardname'] == null ? undefined : json['boardname'],
        'stackname': json['stackname'] == null ? undefined : json['stackname'],
        'size': json['size'] == null ? undefined : json['size'],
        'path': json['path'] == null ? undefined : json['path'],
        'mimetype': json['mimetype'] == null ? undefined : json['mimetype'],
        'previewAvailable': json['preview-available'] == null ? undefined : json['preview-available'],
        'mtime': json['mtime'] == null ? undefined : json['mtime'],
        'latitude': json['latitude'] == null ? undefined : json['latitude'],
        'longitude': json['longitude'] == null ? undefined : json['longitude'],
        'description': json['description'] == null ? undefined : json['description'],
        'thumb': json['thumb'] == null ? undefined : json['thumb'],
        'website': json['website'] == null ? undefined : json['website'],
        'visibility': json['visibility'] == null ? undefined : json['visibility'],
        'assignable': json['assignable'] == null ? undefined : json['assignable'],
        'conversation': json['conversation'] == null ? undefined : json['conversation'],
        'etag': json['etag'] == null ? undefined : json['etag'],
        'permissions': json['permissions'] == null ? undefined : json['permissions'],
        'width': json['width'] == null ? undefined : json['width'],
        'height': json['height'] == null ? undefined : json['height'],
    };
}

export function RichObjectParameterToJSON(value?: RichObjectParameter | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'type': value['type'],
        'id': value['id'],
        'name': value['name'],
        'server': value['server'],
        'link': value['link'],
        'call-type': value['callType'],
        'icon-url': value['iconUrl'],
        'message-id': value['messageId'],
        'boardname': value['boardname'],
        'stackname': value['stackname'],
        'size': value['size'],
        'path': value['path'],
        'mimetype': value['mimetype'],
        'preview-available': value['previewAvailable'],
        'mtime': value['mtime'],
        'latitude': value['latitude'],
        'longitude': value['longitude'],
        'description': value['description'],
        'thumb': value['thumb'],
        'website': value['website'],
        'visibility': value['visibility'],
        'assignable': value['assignable'],
        'conversation': value['conversation'],
        'etag': value['etag'],
        'permissions': value['permissions'],
        'width': value['width'],
        'height': value['height'],
    };
}

