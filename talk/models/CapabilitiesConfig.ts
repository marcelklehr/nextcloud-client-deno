/* tslint:disable */
/* eslint-disable */
/**
 * spreed
 * Chat, video & audio-conferencing using WebRTC
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.ts';
import type { CapabilitiesConfigCall } from './CapabilitiesConfigCall.ts';
import {
    CapabilitiesConfigCallFromJSON,
    CapabilitiesConfigCallFromJSONTyped,
    CapabilitiesConfigCallToJSON,
} from './CapabilitiesConfigCall.ts';
import type { CapabilitiesConfigConversations } from './CapabilitiesConfigConversations.ts';
import {
    CapabilitiesConfigConversationsFromJSON,
    CapabilitiesConfigConversationsFromJSONTyped,
    CapabilitiesConfigConversationsToJSON,
} from './CapabilitiesConfigConversations.ts';
import type { CapabilitiesConfigPreviews } from './CapabilitiesConfigPreviews.ts';
import {
    CapabilitiesConfigPreviewsFromJSON,
    CapabilitiesConfigPreviewsFromJSONTyped,
    CapabilitiesConfigPreviewsToJSON,
} from './CapabilitiesConfigPreviews.ts';
import type { CapabilitiesConfigChat } from './CapabilitiesConfigChat.ts';
import {
    CapabilitiesConfigChatFromJSON,
    CapabilitiesConfigChatFromJSONTyped,
    CapabilitiesConfigChatToJSON,
} from './CapabilitiesConfigChat.ts';
import type { CapabilitiesConfigFederation } from './CapabilitiesConfigFederation.ts';
import {
    CapabilitiesConfigFederationFromJSON,
    CapabilitiesConfigFederationFromJSONTyped,
    CapabilitiesConfigFederationToJSON,
} from './CapabilitiesConfigFederation.ts';
import type { CapabilitiesConfigAttachments } from './CapabilitiesConfigAttachments.ts';
import {
    CapabilitiesConfigAttachmentsFromJSON,
    CapabilitiesConfigAttachmentsFromJSONTyped,
    CapabilitiesConfigAttachmentsToJSON,
} from './CapabilitiesConfigAttachments.ts';
import type { CapabilitiesConfigSignaling } from './CapabilitiesConfigSignaling.ts';
import {
    CapabilitiesConfigSignalingFromJSON,
    CapabilitiesConfigSignalingFromJSONTyped,
    CapabilitiesConfigSignalingToJSON,
} from './CapabilitiesConfigSignaling.ts';

/**
 * 
 * @export
 * @interface CapabilitiesConfig
 */
export interface CapabilitiesConfig {
    /**
     * 
     * @type {CapabilitiesConfigAttachments}
     * @memberof CapabilitiesConfig
     */
    attachments: CapabilitiesConfigAttachments;
    /**
     * 
     * @type {CapabilitiesConfigCall}
     * @memberof CapabilitiesConfig
     */
    call: CapabilitiesConfigCall;
    /**
     * 
     * @type {CapabilitiesConfigChat}
     * @memberof CapabilitiesConfig
     */
    chat: CapabilitiesConfigChat;
    /**
     * 
     * @type {CapabilitiesConfigConversations}
     * @memberof CapabilitiesConfig
     */
    conversations: CapabilitiesConfigConversations;
    /**
     * 
     * @type {CapabilitiesConfigFederation}
     * @memberof CapabilitiesConfig
     */
    federation: CapabilitiesConfigFederation;
    /**
     * 
     * @type {CapabilitiesConfigPreviews}
     * @memberof CapabilitiesConfig
     */
    previews: CapabilitiesConfigPreviews;
    /**
     * 
     * @type {CapabilitiesConfigSignaling}
     * @memberof CapabilitiesConfig
     */
    signaling: CapabilitiesConfigSignaling;
}

/**
 * Check if a given object implements the CapabilitiesConfig interface.
 */
export function instanceOfCapabilitiesConfig(value: object): value is CapabilitiesConfig {
    if (!('attachments' in value) || value['attachments'] === undefined) return false;
    if (!('call' in value) || value['call'] === undefined) return false;
    if (!('chat' in value) || value['chat'] === undefined) return false;
    if (!('conversations' in value) || value['conversations'] === undefined) return false;
    if (!('federation' in value) || value['federation'] === undefined) return false;
    if (!('previews' in value) || value['previews'] === undefined) return false;
    if (!('signaling' in value) || value['signaling'] === undefined) return false;
    return true;
}

export function CapabilitiesConfigFromJSON(json: any): CapabilitiesConfig {
    return CapabilitiesConfigFromJSONTyped(json, false);
}

export function CapabilitiesConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): CapabilitiesConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'attachments': CapabilitiesConfigAttachmentsFromJSON(json['attachments']),
        'call': CapabilitiesConfigCallFromJSON(json['call']),
        'chat': CapabilitiesConfigChatFromJSON(json['chat']),
        'conversations': CapabilitiesConfigConversationsFromJSON(json['conversations']),
        'federation': CapabilitiesConfigFederationFromJSON(json['federation']),
        'previews': CapabilitiesConfigPreviewsFromJSON(json['previews']),
        'signaling': CapabilitiesConfigSignalingFromJSON(json['signaling']),
    };
}

export function CapabilitiesConfigToJSON(value?: CapabilitiesConfig | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'attachments': CapabilitiesConfigAttachmentsToJSON(value['attachments']),
        'call': CapabilitiesConfigCallToJSON(value['call']),
        'chat': CapabilitiesConfigChatToJSON(value['chat']),
        'conversations': CapabilitiesConfigConversationsToJSON(value['conversations']),
        'federation': CapabilitiesConfigFederationToJSON(value['federation']),
        'previews': CapabilitiesConfigPreviewsToJSON(value['previews']),
        'signaling': CapabilitiesConfigSignalingToJSON(value['signaling']),
    };
}

