/* tslint:disable */
/* eslint-disable */
/**
 * spreed
 * Chat, video & audio-conferencing using WebRTC
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.ts';
import type { SignalingSettingsStunserversInner } from './SignalingSettingsStunserversInner.ts';
import {
    SignalingSettingsStunserversInnerFromJSON,
    SignalingSettingsStunserversInnerFromJSONTyped,
    SignalingSettingsStunserversInnerToJSON,
} from './SignalingSettingsStunserversInner.ts';
import type { SignalingSettingsHelloAuthParams } from './SignalingSettingsHelloAuthParams.ts';
import {
    SignalingSettingsHelloAuthParamsFromJSON,
    SignalingSettingsHelloAuthParamsFromJSONTyped,
    SignalingSettingsHelloAuthParamsToJSON,
} from './SignalingSettingsHelloAuthParams.ts';
import type { SignalingSettingsTurnserversInner } from './SignalingSettingsTurnserversInner.ts';
import {
    SignalingSettingsTurnserversInnerFromJSON,
    SignalingSettingsTurnserversInnerFromJSONTyped,
    SignalingSettingsTurnserversInnerToJSON,
} from './SignalingSettingsTurnserversInner.ts';

/**
 * 
 * @export
 * @interface SignalingSettings
 */
export interface SignalingSettings {
    /**
     * 
     * @type {SignalingSettingsHelloAuthParams}
     * @memberof SignalingSettings
     */
    helloAuthParams: SignalingSettingsHelloAuthParams;
    /**
     * 
     * @type {boolean}
     * @memberof SignalingSettings
     */
    hideWarning: boolean;
    /**
     * 
     * @type {string}
     * @memberof SignalingSettings
     */
    server: string;
    /**
     * 
     * @type {string}
     * @memberof SignalingSettings
     */
    signalingMode: string;
    /**
     * 
     * @type {string}
     * @memberof SignalingSettings
     */
    sipDialinInfo: string;
    /**
     * 
     * @type {Array<SignalingSettingsStunserversInner>}
     * @memberof SignalingSettings
     */
    stunservers: Array<SignalingSettingsStunserversInner>;
    /**
     * 
     * @type {string}
     * @memberof SignalingSettings
     */
    ticket: string;
    /**
     * 
     * @type {Array<SignalingSettingsTurnserversInner>}
     * @memberof SignalingSettings
     */
    turnservers: Array<SignalingSettingsTurnserversInner>;
    /**
     * 
     * @type {string}
     * @memberof SignalingSettings
     */
    userId: string | null;
}

/**
 * Check if a given object implements the SignalingSettings interface.
 */
export function instanceOfSignalingSettings(value: object): value is SignalingSettings {
    if (!('helloAuthParams' in value) || value['helloAuthParams'] === undefined) return false;
    if (!('hideWarning' in value) || value['hideWarning'] === undefined) return false;
    if (!('server' in value) || value['server'] === undefined) return false;
    if (!('signalingMode' in value) || value['signalingMode'] === undefined) return false;
    if (!('sipDialinInfo' in value) || value['sipDialinInfo'] === undefined) return false;
    if (!('stunservers' in value) || value['stunservers'] === undefined) return false;
    if (!('ticket' in value) || value['ticket'] === undefined) return false;
    if (!('turnservers' in value) || value['turnservers'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function SignalingSettingsFromJSON(json: any): SignalingSettings {
    return SignalingSettingsFromJSONTyped(json, false);
}

export function SignalingSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): SignalingSettings {
    if (json == null) {
        return json;
    }
    return {
        
        'helloAuthParams': SignalingSettingsHelloAuthParamsFromJSON(json['helloAuthParams']),
        'hideWarning': json['hideWarning'],
        'server': json['server'],
        'signalingMode': json['signalingMode'],
        'sipDialinInfo': json['sipDialinInfo'],
        'stunservers': ((json['stunservers'] as Array<any>).map(SignalingSettingsStunserversInnerFromJSON)),
        'ticket': json['ticket'],
        'turnservers': ((json['turnservers'] as Array<any>).map(SignalingSettingsTurnserversInnerFromJSON)),
        'userId': json['userId'],
    };
}

export function SignalingSettingsToJSON(value?: SignalingSettings | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'helloAuthParams': SignalingSettingsHelloAuthParamsToJSON(value['helloAuthParams']),
        'hideWarning': value['hideWarning'],
        'server': value['server'],
        'signalingMode': value['signalingMode'],
        'sipDialinInfo': value['sipDialinInfo'],
        'stunservers': ((value['stunservers'] as Array<any>).map(SignalingSettingsStunserversInnerToJSON)),
        'ticket': value['ticket'],
        'turnservers': ((value['turnservers'] as Array<any>).map(SignalingSettingsTurnserversInnerToJSON)),
        'userId': value['userId'],
    };
}

