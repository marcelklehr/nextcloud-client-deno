/* tslint:disable */
/* eslint-disable */
/**
 * spreed
 * Chat, video & audio-conferencing using WebRTC
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.ts';
import type { PollVote } from './PollVote.ts';
import {
    PollVoteFromJSON,
    PollVoteFromJSONTyped,
    PollVoteToJSON,
} from './PollVote.ts';

/**
 * 
 * @export
 * @interface Poll
 */
export interface Poll {
    /**
     * 
     * @type {string}
     * @memberof Poll
     */
    actorDisplayName: string;
    /**
     * 
     * @type {string}
     * @memberof Poll
     */
    actorId: string;
    /**
     * 
     * @type {string}
     * @memberof Poll
     */
    actorType: string;
    /**
     * 
     * @type {Array<PollVote>}
     * @memberof Poll
     */
    details?: Array<PollVote>;
    /**
     * 
     * @type {number}
     * @memberof Poll
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof Poll
     */
    maxVotes: number;
    /**
     * 
     * @type {number}
     * @memberof Poll
     */
    numVoters?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Poll
     */
    options: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Poll
     */
    question: string;
    /**
     * 
     * @type {number}
     * @memberof Poll
     */
    resultMode: number;
    /**
     * 
     * @type {number}
     * @memberof Poll
     */
    status: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof Poll
     */
    votedSelf?: Array<number>;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof Poll
     */
    votes?: { [key: string]: number; };
}

/**
 * Check if a given object implements the Poll interface.
 */
export function instanceOfPoll(value: object): value is Poll {
    if (!('actorDisplayName' in value) || value['actorDisplayName'] === undefined) return false;
    if (!('actorId' in value) || value['actorId'] === undefined) return false;
    if (!('actorType' in value) || value['actorType'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('maxVotes' in value) || value['maxVotes'] === undefined) return false;
    if (!('options' in value) || value['options'] === undefined) return false;
    if (!('question' in value) || value['question'] === undefined) return false;
    if (!('resultMode' in value) || value['resultMode'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function PollFromJSON(json: any): Poll {
    return PollFromJSONTyped(json, false);
}

export function PollFromJSONTyped(json: any, ignoreDiscriminator: boolean): Poll {
    if (json == null) {
        return json;
    }
    return {
        
        'actorDisplayName': json['actorDisplayName'],
        'actorId': json['actorId'],
        'actorType': json['actorType'],
        'details': json['details'] == null ? undefined : ((json['details'] as Array<any>).map(PollVoteFromJSON)),
        'id': json['id'],
        'maxVotes': json['maxVotes'],
        'numVoters': json['numVoters'] == null ? undefined : json['numVoters'],
        'options': json['options'],
        'question': json['question'],
        'resultMode': json['resultMode'],
        'status': json['status'],
        'votedSelf': json['votedSelf'] == null ? undefined : json['votedSelf'],
        'votes': json['votes'] == null ? undefined : json['votes'],
    };
}

export function PollToJSON(value?: Poll | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'actorDisplayName': value['actorDisplayName'],
        'actorId': value['actorId'],
        'actorType': value['actorType'],
        'details': value['details'] == null ? undefined : ((value['details'] as Array<any>).map(PollVoteToJSON)),
        'id': value['id'],
        'maxVotes': value['maxVotes'],
        'numVoters': value['numVoters'],
        'options': value['options'],
        'question': value['question'],
        'resultMode': value['resultMode'],
        'status': value['status'],
        'votedSelf': value['votedSelf'],
        'votes': value['votes'],
    };
}

