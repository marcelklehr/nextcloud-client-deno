/* tslint:disable */
/* eslint-disable */
/**
 * notifications
 * This app provides a backend and frontend for the notification API available in Nextcloud.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  EndpointConfirmIdsForUser200Response,
  EndpointDeleteAllNotifications200Response,
  EndpointDeleteAllNotifications403Response,
  EndpointGetNotification200Response,
  EndpointListNotifications200Response,
} from '../models/index.ts';
import {
    EndpointConfirmIdsForUser200ResponseFromJSON,
    EndpointConfirmIdsForUser200ResponseToJSON,
    EndpointDeleteAllNotifications200ResponseFromJSON,
    EndpointDeleteAllNotifications200ResponseToJSON,
    EndpointDeleteAllNotifications403ResponseFromJSON,
    EndpointDeleteAllNotifications403ResponseToJSON,
    EndpointGetNotification200ResponseFromJSON,
    EndpointGetNotification200ResponseToJSON,
    EndpointListNotifications200ResponseFromJSON,
    EndpointListNotifications200ResponseToJSON,
} from '../models/index.ts';

export interface EndpointConfirmIdsForUserRequest {
    ids: Array<number>;
    apiVersion: EndpointConfirmIdsForUserApiVersionEnum;
    oCSAPIRequest: boolean;
}

export interface EndpointDeleteAllNotificationsRequest {
    apiVersion: EndpointDeleteAllNotificationsApiVersionEnum;
    oCSAPIRequest: boolean;
}

export interface EndpointDeleteNotificationRequest {
    apiVersion: EndpointDeleteNotificationApiVersionEnum;
    id: number;
    oCSAPIRequest: boolean;
}

export interface EndpointGetNotificationRequest {
    apiVersion: EndpointGetNotificationApiVersionEnum;
    id: number;
    oCSAPIRequest: boolean;
}

export interface EndpointListNotificationsRequest {
    apiVersion: EndpointListNotificationsApiVersionEnum;
    oCSAPIRequest: boolean;
}

/**
 * 
 */
export class EndpointApi extends runtime.BaseAPI {

    /**
     * Check if notification IDs exist
     */
    async endpointConfirmIdsForUserRaw(requestParameters: EndpointConfirmIdsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EndpointConfirmIdsForUser200Response>> {
        if (requestParameters['ids'] == null) {
            throw new runtime.RequiredError(
                'ids',
                'Required parameter "ids" was null or undefined when calling endpointConfirmIdsForUser().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling endpointConfirmIdsForUser().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling endpointConfirmIdsForUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids[]'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/notifications/api/{apiVersion}/notifications/exists`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EndpointConfirmIdsForUser200ResponseFromJSON(jsonValue));
    }

    /**
     * Check if notification IDs exist
     */
    async endpointConfirmIdsForUser(requestParameters: EndpointConfirmIdsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EndpointConfirmIdsForUser200Response> {
        const response = await this.endpointConfirmIdsForUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete all notifications
     */
    async endpointDeleteAllNotificationsRaw(requestParameters: EndpointDeleteAllNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EndpointDeleteAllNotifications200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling endpointDeleteAllNotifications().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling endpointDeleteAllNotifications().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/notifications/api/{apiVersion}/notifications`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EndpointDeleteAllNotifications200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete all notifications
     */
    async endpointDeleteAllNotifications(requestParameters: EndpointDeleteAllNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EndpointDeleteAllNotifications200Response> {
        const response = await this.endpointDeleteAllNotificationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a notification
     */
    async endpointDeleteNotificationRaw(requestParameters: EndpointDeleteNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EndpointDeleteAllNotifications200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling endpointDeleteNotification().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling endpointDeleteNotification().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling endpointDeleteNotification().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/notifications/api/{apiVersion}/notifications/{id}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EndpointDeleteAllNotifications200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a notification
     */
    async endpointDeleteNotification(requestParameters: EndpointDeleteNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EndpointDeleteAllNotifications200Response> {
        const response = await this.endpointDeleteNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a notification
     */
    async endpointGetNotificationRaw(requestParameters: EndpointGetNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EndpointGetNotification200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling endpointGetNotification().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling endpointGetNotification().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling endpointGetNotification().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/notifications/api/{apiVersion}/notifications/{id}`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EndpointGetNotification200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a notification
     */
    async endpointGetNotification(requestParameters: EndpointGetNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EndpointGetNotification200Response> {
        const response = await this.endpointGetNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all notifications
     */
    async endpointListNotificationsRaw(requestParameters: EndpointListNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EndpointListNotifications200Response>> {
        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling endpointListNotifications().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling endpointListNotifications().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/notifications/api/{apiVersion}/notifications`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EndpointListNotifications200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all notifications
     */
    async endpointListNotifications(requestParameters: EndpointListNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EndpointListNotifications200Response | null | undefined > {
        const response = await this.endpointListNotificationsRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

}

/**
 * @export
 */
export const EndpointConfirmIdsForUserApiVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type EndpointConfirmIdsForUserApiVersionEnum = typeof EndpointConfirmIdsForUserApiVersionEnum[keyof typeof EndpointConfirmIdsForUserApiVersionEnum];
/**
 * @export
 */
export const EndpointDeleteAllNotificationsApiVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type EndpointDeleteAllNotificationsApiVersionEnum = typeof EndpointDeleteAllNotificationsApiVersionEnum[keyof typeof EndpointDeleteAllNotificationsApiVersionEnum];
/**
 * @export
 */
export const EndpointDeleteNotificationApiVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type EndpointDeleteNotificationApiVersionEnum = typeof EndpointDeleteNotificationApiVersionEnum[keyof typeof EndpointDeleteNotificationApiVersionEnum];
/**
 * @export
 */
export const EndpointGetNotificationApiVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type EndpointGetNotificationApiVersionEnum = typeof EndpointGetNotificationApiVersionEnum[keyof typeof EndpointGetNotificationApiVersionEnum];
/**
 * @export
 */
export const EndpointListNotificationsApiVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type EndpointListNotificationsApiVersionEnum = typeof EndpointListNotificationsApiVersionEnum[keyof typeof EndpointListNotificationsApiVersionEnum];
