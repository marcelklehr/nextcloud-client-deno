/* tslint:disable */
/* eslint-disable */
/**
 * notifications
 * This app provides a backend and frontend for the notification API available in Nextcloud.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  EndpointDeleteAllNotifications200Response,
} from '../models/index.ts';
import {
    EndpointDeleteAllNotifications200ResponseFromJSON,
    EndpointDeleteAllNotifications200ResponseToJSON,
} from '../models/index.ts';

export interface SettingsPersonalRequest {
    batchSetting: number;
    soundNotification: string;
    soundTalk: string;
    apiVersion: SettingsPersonalApiVersionEnum;
    oCSAPIRequest: boolean;
}

/**
 * 
 */
export class SettingsApi extends runtime.BaseAPI {

    /**
     * Update personal notification settings
     */
    async settingsPersonalRaw(requestParameters: SettingsPersonalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EndpointDeleteAllNotifications200Response>> {
        if (requestParameters['batchSetting'] == null) {
            throw new runtime.RequiredError(
                'batchSetting',
                'Required parameter "batchSetting" was null or undefined when calling settingsPersonal().'
            );
        }

        if (requestParameters['soundNotification'] == null) {
            throw new runtime.RequiredError(
                'soundNotification',
                'Required parameter "soundNotification" was null or undefined when calling settingsPersonal().'
            );
        }

        if (requestParameters['soundTalk'] == null) {
            throw new runtime.RequiredError(
                'soundTalk',
                'Required parameter "soundTalk" was null or undefined when calling settingsPersonal().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling settingsPersonal().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling settingsPersonal().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['batchSetting'] != null) {
            queryParameters['batchSetting'] = requestParameters['batchSetting'];
        }

        if (requestParameters['soundNotification'] != null) {
            queryParameters['soundNotification'] = requestParameters['soundNotification'];
        }

        if (requestParameters['soundTalk'] != null) {
            queryParameters['soundTalk'] = requestParameters['soundTalk'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/apps/notifications/api/{apiVersion}/settings`.replace(`{${"apiVersion"}}`, encodeURIComponent(String(requestParameters['apiVersion']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EndpointDeleteAllNotifications200ResponseFromJSON(jsonValue));
    }

    /**
     * Update personal notification settings
     */
    async settingsPersonal(requestParameters: SettingsPersonalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EndpointDeleteAllNotifications200Response> {
        const response = await this.settingsPersonalRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const SettingsPersonalApiVersionEnum = {
    V2: 'v2'
} as const;
export type SettingsPersonalApiVersionEnum = typeof SettingsPersonalApiVersionEnum[keyof typeof SettingsPersonalApiVersionEnum];
