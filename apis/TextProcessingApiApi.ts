/* tslint:disable */
/* eslint-disable */
/**
 * core
 * Core functionality of Nextcloud
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  TaskProcessingApiSchedule500Response,
  TextProcessingApiListTasksByApp200Response,
  TextProcessingApiSchedule200Response,
  TextProcessingApiTaskTypes200Response,
} from '../models/index';
import {
    TaskProcessingApiSchedule500ResponseFromJSON,
    TaskProcessingApiSchedule500ResponseToJSON,
    TextProcessingApiListTasksByApp200ResponseFromJSON,
    TextProcessingApiListTasksByApp200ResponseToJSON,
    TextProcessingApiSchedule200ResponseFromJSON,
    TextProcessingApiSchedule200ResponseToJSON,
    TextProcessingApiTaskTypes200ResponseFromJSON,
    TextProcessingApiTaskTypes200ResponseToJSON,
} from '../models/index';

export interface TextProcessingApiDeleteTaskRequest {
    id: number;
    oCSAPIRequest: boolean;
}

export interface TextProcessingApiGetTaskRequest {
    id: number;
    oCSAPIRequest: boolean;
}

export interface TextProcessingApiListTasksByAppRequest {
    appId: string;
    oCSAPIRequest: boolean;
    identifier?: string;
}

export interface TextProcessingApiScheduleRequest {
    input: string;
    type: string;
    appId: string;
    oCSAPIRequest: boolean;
    identifier?: string;
}

export interface TextProcessingApiTaskTypesRequest {
    oCSAPIRequest: boolean;
}

/**
 * 
 */
export class TextProcessingApiApi extends runtime.BaseAPI {

    /**
     * This endpoint allows to delete a scheduled task for a user
     */
    async textProcessingApiDeleteTaskRaw(requestParameters: TextProcessingApiDeleteTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TextProcessingApiSchedule200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling textProcessingApiDeleteTask().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling textProcessingApiDeleteTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/textprocessing/task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TextProcessingApiSchedule200ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint allows to delete a scheduled task for a user
     */
    async textProcessingApiDeleteTask(requestParameters: TextProcessingApiDeleteTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TextProcessingApiSchedule200Response> {
        const response = await this.textProcessingApiDeleteTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows checking the status and results of a task. Tasks are removed 1 week after receiving their last update.
     */
    async textProcessingApiGetTaskRaw(requestParameters: TextProcessingApiGetTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TextProcessingApiSchedule200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling textProcessingApiGetTask().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling textProcessingApiGetTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/textprocessing/task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TextProcessingApiSchedule200ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint allows checking the status and results of a task. Tasks are removed 1 week after receiving their last update.
     */
    async textProcessingApiGetTask(requestParameters: TextProcessingApiGetTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TextProcessingApiSchedule200Response> {
        const response = await this.textProcessingApiGetTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns a list of tasks of a user that are related with a specific appId and optionally with an identifier
     */
    async textProcessingApiListTasksByAppRaw(requestParameters: TextProcessingApiListTasksByAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TextProcessingApiListTasksByApp200Response>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling textProcessingApiListTasksByApp().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling textProcessingApiListTasksByApp().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['identifier'] != null) {
            queryParameters['identifier'] = requestParameters['identifier'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/textprocessing/tasks/app/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TextProcessingApiListTasksByApp200ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns a list of tasks of a user that are related with a specific appId and optionally with an identifier
     */
    async textProcessingApiListTasksByApp(requestParameters: TextProcessingApiListTasksByAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TextProcessingApiListTasksByApp200Response> {
        const response = await this.textProcessingApiListTasksByAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows scheduling a language model task
     */
    async textProcessingApiScheduleRaw(requestParameters: TextProcessingApiScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TextProcessingApiSchedule200Response>> {
        if (requestParameters['input'] == null) {
            throw new runtime.RequiredError(
                'input',
                'Required parameter "input" was null or undefined when calling textProcessingApiSchedule().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling textProcessingApiSchedule().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling textProcessingApiSchedule().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling textProcessingApiSchedule().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['input'] != null) {
            queryParameters['input'] = requestParameters['input'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['appId'] != null) {
            queryParameters['appId'] = requestParameters['appId'];
        }

        if (requestParameters['identifier'] != null) {
            queryParameters['identifier'] = requestParameters['identifier'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/textprocessing/schedule`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TextProcessingApiSchedule200ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint allows scheduling a language model task
     */
    async textProcessingApiSchedule(requestParameters: TextProcessingApiScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TextProcessingApiSchedule200Response> {
        const response = await this.textProcessingApiScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns all available LanguageModel task types
     */
    async textProcessingApiTaskTypesRaw(requestParameters: TextProcessingApiTaskTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TextProcessingApiTaskTypes200Response>> {
        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling textProcessingApiTaskTypes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/textprocessing/tasktypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TextProcessingApiTaskTypes200ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns all available LanguageModel task types
     */
    async textProcessingApiTaskTypes(requestParameters: TextProcessingApiTaskTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TextProcessingApiTaskTypes200Response> {
        const response = await this.textProcessingApiTaskTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
