/* tslint:disable */
/* eslint-disable */
/**
 * core
 * Core functionality of Nextcloud
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  WipeCheckWipe200Response,
} from '../models/index.ts';
import {
    WipeCheckWipe200ResponseFromJSON,
    WipeCheckWipe200ResponseToJSON,
} from '../models/index.ts';

export interface WipeCheckWipeRequest {
    token: string;
}

export interface WipeWipeDoneRequest {
    token: string;
}

/**
 * 
 */
export class WipeApi extends runtime.BaseAPI {

    /**
     * Check if the device should be wiped
     */
    async wipeCheckWipeRaw(requestParameters: WipeCheckWipeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WipeCheckWipe200Response>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling wipeCheckWipe().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/index.php/core/wipe/check`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WipeCheckWipe200ResponseFromJSON(jsonValue));
    }

    /**
     * Check if the device should be wiped
     */
    async wipeCheckWipe(requestParameters: WipeCheckWipeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WipeCheckWipe200Response> {
        const response = await this.wipeCheckWipeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Finish the wipe
     */
    async wipeWipeDoneRaw(requestParameters: WipeWipeDoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling wipeWipeDone().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/index.php/core/wipe/success`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Finish the wipe
     */
    async wipeWipeDone(requestParameters: WipeWipeDoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.wipeWipeDoneRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
