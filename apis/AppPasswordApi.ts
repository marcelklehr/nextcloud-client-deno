/* tslint:disable */
/* eslint-disable */
/**
 * core
 * Core functionality of Nextcloud
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  AppPasswordConfirmUserPassword200Response,
  AppPasswordGetAppPassword200Response,
  AppPasswordGetAppPassword403Response,
} from '../models/index.ts';
import {
    AppPasswordConfirmUserPassword200ResponseFromJSON,
    AppPasswordConfirmUserPassword200ResponseToJSON,
    AppPasswordGetAppPassword200ResponseFromJSON,
    AppPasswordGetAppPassword200ResponseToJSON,
    AppPasswordGetAppPassword403ResponseFromJSON,
    AppPasswordGetAppPassword403ResponseToJSON,
} from '../models/index.ts';

export interface AppPasswordConfirmUserPasswordRequest {
    password: string;
    oCSAPIRequest: boolean;
}

export interface AppPasswordDeleteAppPasswordRequest {
    oCSAPIRequest: boolean;
}

export interface AppPasswordGetAppPasswordRequest {
    oCSAPIRequest: boolean;
}

export interface AppPasswordRotateAppPasswordRequest {
    oCSAPIRequest: boolean;
}

/**
 * 
 */
export class AppPasswordApi extends runtime.BaseAPI {

    /**
     * Confirm the user password
     */
    async appPasswordConfirmUserPasswordRaw(requestParameters: AppPasswordConfirmUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPasswordConfirmUserPassword200Response>> {
        if (requestParameters['password'] == null) {
            throw new runtime.RequiredError(
                'password',
                'Required parameter "password" was null or undefined when calling appPasswordConfirmUserPassword().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling appPasswordConfirmUserPassword().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['password'] != null) {
            queryParameters['password'] = requestParameters['password'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/core/apppassword/confirm`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppPasswordConfirmUserPassword200ResponseFromJSON(jsonValue));
    }

    /**
     * Confirm the user password
     */
    async appPasswordConfirmUserPassword(requestParameters: AppPasswordConfirmUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPasswordConfirmUserPassword200Response> {
        const response = await this.appPasswordConfirmUserPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete app password
     */
    async appPasswordDeleteAppPasswordRaw(requestParameters: AppPasswordDeleteAppPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPasswordGetAppPassword403Response>> {
        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling appPasswordDeleteAppPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/core/apppassword`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppPasswordGetAppPassword403ResponseFromJSON(jsonValue));
    }

    /**
     * Delete app password
     */
    async appPasswordDeleteAppPassword(requestParameters: AppPasswordDeleteAppPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPasswordGetAppPassword403Response> {
        const response = await this.appPasswordDeleteAppPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires password confirmation
     * Create app password
     */
    async appPasswordGetAppPasswordRaw(requestParameters: AppPasswordGetAppPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPasswordGetAppPassword200Response>> {
        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling appPasswordGetAppPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/core/getapppassword`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppPasswordGetAppPassword200ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint requires password confirmation
     * Create app password
     */
    async appPasswordGetAppPassword(requestParameters: AppPasswordGetAppPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPasswordGetAppPassword200Response> {
        const response = await this.appPasswordGetAppPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Rotate app password
     */
    async appPasswordRotateAppPasswordRaw(requestParameters: AppPasswordRotateAppPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPasswordGetAppPassword200Response>> {
        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling appPasswordRotateAppPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/core/apppassword/rotate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppPasswordGetAppPassword200ResponseFromJSON(jsonValue));
    }

    /**
     * Rotate app password
     */
    async appPasswordRotateAppPassword(requestParameters: AppPasswordRotateAppPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPasswordGetAppPassword200Response> {
        const response = await this.appPasswordRotateAppPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
