/* tslint:disable */
/* eslint-disable */
/**
 * core
 * Core functionality of Nextcloud
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  AppPasswordGetAppPassword403Response,
  CollaborationResourcesListCollection200Response,
  CollaborationResourcesSearchCollections200Response,
} from '../models/index.ts';
import {
    AppPasswordGetAppPassword403ResponseFromJSON,
    AppPasswordGetAppPassword403ResponseToJSON,
    CollaborationResourcesListCollection200ResponseFromJSON,
    CollaborationResourcesListCollection200ResponseToJSON,
    CollaborationResourcesSearchCollections200ResponseFromJSON,
    CollaborationResourcesSearchCollections200ResponseToJSON,
} from '../models/index.ts';

export interface CollaborationResourcesAddResourceRequest {
    resourceType: string;
    resourceId: string;
    collectionId: number;
    oCSAPIRequest: boolean;
}

export interface CollaborationResourcesCreateCollectionOnResourceRequest {
    name: string;
    baseResourceType: string;
    baseResourceId: string;
    oCSAPIRequest: boolean;
}

export interface CollaborationResourcesGetCollectionsByResourceRequest {
    resourceType: string;
    resourceId: string;
    oCSAPIRequest: boolean;
}

export interface CollaborationResourcesListCollectionRequest {
    collectionId: number;
    oCSAPIRequest: boolean;
}

export interface CollaborationResourcesRemoveResourceRequest {
    resourceType: string;
    resourceId: string;
    collectionId: number;
    oCSAPIRequest: boolean;
}

export interface CollaborationResourcesRenameCollectionRequest {
    collectionName: string;
    collectionId: number;
    oCSAPIRequest: boolean;
}

export interface CollaborationResourcesSearchCollectionsRequest {
    filter: string;
    oCSAPIRequest: boolean;
}

/**
 * 
 */
export class CollaborationResourcesApi extends runtime.BaseAPI {

    /**
     * Add a resource to a collection
     */
    async collaborationResourcesAddResourceRaw(requestParameters: CollaborationResourcesAddResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollaborationResourcesListCollection200Response>> {
        if (requestParameters['resourceType'] == null) {
            throw new runtime.RequiredError(
                'resourceType',
                'Required parameter "resourceType" was null or undefined when calling collaborationResourcesAddResource().'
            );
        }

        if (requestParameters['resourceId'] == null) {
            throw new runtime.RequiredError(
                'resourceId',
                'Required parameter "resourceId" was null or undefined when calling collaborationResourcesAddResource().'
            );
        }

        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling collaborationResourcesAddResource().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling collaborationResourcesAddResource().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['resourceType'] != null) {
            queryParameters['resourceType'] = requestParameters['resourceType'];
        }

        if (requestParameters['resourceId'] != null) {
            queryParameters['resourceId'] = requestParameters['resourceId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/collaboration/resources/collections/{collectionId}`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollaborationResourcesListCollection200ResponseFromJSON(jsonValue));
    }

    /**
     * Add a resource to a collection
     */
    async collaborationResourcesAddResource(requestParameters: CollaborationResourcesAddResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollaborationResourcesListCollection200Response> {
        const response = await this.collaborationResourcesAddResourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a collection for a resource
     */
    async collaborationResourcesCreateCollectionOnResourceRaw(requestParameters: CollaborationResourcesCreateCollectionOnResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollaborationResourcesListCollection200Response>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling collaborationResourcesCreateCollectionOnResource().'
            );
        }

        if (requestParameters['baseResourceType'] == null) {
            throw new runtime.RequiredError(
                'baseResourceType',
                'Required parameter "baseResourceType" was null or undefined when calling collaborationResourcesCreateCollectionOnResource().'
            );
        }

        if (requestParameters['baseResourceId'] == null) {
            throw new runtime.RequiredError(
                'baseResourceId',
                'Required parameter "baseResourceId" was null or undefined when calling collaborationResourcesCreateCollectionOnResource().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling collaborationResourcesCreateCollectionOnResource().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/collaboration/resources/{baseResourceType}/{baseResourceId}`.replace(`{${"baseResourceType"}}`, encodeURIComponent(String(requestParameters['baseResourceType']))).replace(`{${"baseResourceId"}}`, encodeURIComponent(String(requestParameters['baseResourceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollaborationResourcesListCollection200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a collection for a resource
     */
    async collaborationResourcesCreateCollectionOnResource(requestParameters: CollaborationResourcesCreateCollectionOnResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollaborationResourcesListCollection200Response> {
        const response = await this.collaborationResourcesCreateCollectionOnResourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get collections by resource
     */
    async collaborationResourcesGetCollectionsByResourceRaw(requestParameters: CollaborationResourcesGetCollectionsByResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollaborationResourcesSearchCollections200Response>> {
        if (requestParameters['resourceType'] == null) {
            throw new runtime.RequiredError(
                'resourceType',
                'Required parameter "resourceType" was null or undefined when calling collaborationResourcesGetCollectionsByResource().'
            );
        }

        if (requestParameters['resourceId'] == null) {
            throw new runtime.RequiredError(
                'resourceId',
                'Required parameter "resourceId" was null or undefined when calling collaborationResourcesGetCollectionsByResource().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling collaborationResourcesGetCollectionsByResource().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/collaboration/resources/{resourceType}/{resourceId}`.replace(`{${"resourceType"}}`, encodeURIComponent(String(requestParameters['resourceType']))).replace(`{${"resourceId"}}`, encodeURIComponent(String(requestParameters['resourceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollaborationResourcesSearchCollections200ResponseFromJSON(jsonValue));
    }

    /**
     * Get collections by resource
     */
    async collaborationResourcesGetCollectionsByResource(requestParameters: CollaborationResourcesGetCollectionsByResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollaborationResourcesSearchCollections200Response> {
        const response = await this.collaborationResourcesGetCollectionsByResourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a collection
     */
    async collaborationResourcesListCollectionRaw(requestParameters: CollaborationResourcesListCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollaborationResourcesListCollection200Response>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling collaborationResourcesListCollection().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling collaborationResourcesListCollection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/collaboration/resources/collections/{collectionId}`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollaborationResourcesListCollection200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a collection
     */
    async collaborationResourcesListCollection(requestParameters: CollaborationResourcesListCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollaborationResourcesListCollection200Response> {
        const response = await this.collaborationResourcesListCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a resource from a collection
     */
    async collaborationResourcesRemoveResourceRaw(requestParameters: CollaborationResourcesRemoveResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollaborationResourcesListCollection200Response>> {
        if (requestParameters['resourceType'] == null) {
            throw new runtime.RequiredError(
                'resourceType',
                'Required parameter "resourceType" was null or undefined when calling collaborationResourcesRemoveResource().'
            );
        }

        if (requestParameters['resourceId'] == null) {
            throw new runtime.RequiredError(
                'resourceId',
                'Required parameter "resourceId" was null or undefined when calling collaborationResourcesRemoveResource().'
            );
        }

        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling collaborationResourcesRemoveResource().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling collaborationResourcesRemoveResource().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['resourceType'] != null) {
            queryParameters['resourceType'] = requestParameters['resourceType'];
        }

        if (requestParameters['resourceId'] != null) {
            queryParameters['resourceId'] = requestParameters['resourceId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/collaboration/resources/collections/{collectionId}`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollaborationResourcesListCollection200ResponseFromJSON(jsonValue));
    }

    /**
     * Remove a resource from a collection
     */
    async collaborationResourcesRemoveResource(requestParameters: CollaborationResourcesRemoveResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollaborationResourcesListCollection200Response> {
        const response = await this.collaborationResourcesRemoveResourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Rename a collection
     */
    async collaborationResourcesRenameCollectionRaw(requestParameters: CollaborationResourcesRenameCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollaborationResourcesListCollection200Response>> {
        if (requestParameters['collectionName'] == null) {
            throw new runtime.RequiredError(
                'collectionName',
                'Required parameter "collectionName" was null or undefined when calling collaborationResourcesRenameCollection().'
            );
        }

        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling collaborationResourcesRenameCollection().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling collaborationResourcesRenameCollection().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['collectionName'] != null) {
            queryParameters['collectionName'] = requestParameters['collectionName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/collaboration/resources/collections/{collectionId}`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollaborationResourcesListCollection200ResponseFromJSON(jsonValue));
    }

    /**
     * Rename a collection
     */
    async collaborationResourcesRenameCollection(requestParameters: CollaborationResourcesRenameCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollaborationResourcesListCollection200Response> {
        const response = await this.collaborationResourcesRenameCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for collections
     */
    async collaborationResourcesSearchCollectionsRaw(requestParameters: CollaborationResourcesSearchCollectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollaborationResourcesSearchCollections200Response>> {
        if (requestParameters['filter'] == null) {
            throw new runtime.RequiredError(
                'filter',
                'Required parameter "filter" was null or undefined when calling collaborationResourcesSearchCollections().'
            );
        }

        if (requestParameters['oCSAPIRequest'] == null) {
            throw new runtime.RequiredError(
                'oCSAPIRequest',
                'Required parameter "oCSAPIRequest" was null or undefined when calling collaborationResourcesSearchCollections().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['oCSAPIRequest'] != null) {
            headerParameters['OCS-APIRequest'] = String(requestParameters['oCSAPIRequest']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ocs/v2.php/collaboration/resources/collections/search/{filter}`.replace(`{${"filter"}}`, encodeURIComponent(String(requestParameters['filter']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollaborationResourcesSearchCollections200ResponseFromJSON(jsonValue));
    }

    /**
     * Search for collections
     */
    async collaborationResourcesSearchCollections(requestParameters: CollaborationResourcesSearchCollectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollaborationResourcesSearchCollections200Response> {
        const response = await this.collaborationResourcesSearchCollectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
